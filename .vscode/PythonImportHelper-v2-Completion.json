[
    {
        "label": "gymnasium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gymnasium",
        "description": "gymnasium",
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gymnasium",
        "description": "gymnasium",
        "isExtraImport": true,
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "arange",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ones",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "shape",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "hstack",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "nan_to_num",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ones",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "arange",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ones",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "shape",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "hstack",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "nan_to_num",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ones",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_args",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_args",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "A2C",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "SAC",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "A2C",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "SAC",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "PPO",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "evaluate_policy",
        "importPath": "stable_baselines3.common.evaluation",
        "description": "stable_baselines3.common.evaluation",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.evaluation",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "VecNormalize",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "DummyVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "SubprocVecEnv",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "VecNormalize",
        "importPath": "stable_baselines3.common.vec_env",
        "description": "stable_baselines3.common.vec_env",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.vec_env",
        "documentation": {}
    },
    {
        "label": "train_sindy_model",
        "importPath": "train_sindy_model",
        "description": "train_sindy_model",
        "isExtraImport": true,
        "detail": "train_sindy_model",
        "documentation": {}
    },
    {
        "label": "train_sindy_model",
        "importPath": "train_sindy_model",
        "description": "train_sindy_model",
        "isExtraImport": true,
        "detail": "train_sindy_model",
        "documentation": {}
    },
    {
        "label": "train_sindy_model",
        "importPath": "train_sindy_model",
        "description": "train_sindy_model",
        "isExtraImport": true,
        "detail": "train_sindy_model",
        "documentation": {}
    },
    {
        "label": "DollhouseThermalEnv",
        "importPath": "dollhouse_env",
        "description": "dollhouse_env",
        "isExtraImport": true,
        "detail": "dollhouse_env",
        "documentation": {}
    },
    {
        "label": "DollhouseThermalEnv",
        "importPath": "dollhouse_env",
        "description": "dollhouse_env",
        "isExtraImport": true,
        "detail": "dollhouse_env",
        "documentation": {}
    },
    {
        "label": "DollhouseThermalEnv",
        "importPath": "dollhouse_env",
        "description": "dollhouse_env",
        "isExtraImport": true,
        "detail": "dollhouse_env",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "CheckpointCallback",
        "importPath": "stable_baselines3.common.callbacks",
        "description": "stable_baselines3.common.callbacks",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.callbacks",
        "documentation": {}
    },
    {
        "label": "BaseCallback",
        "importPath": "stable_baselines3.common.callbacks",
        "description": "stable_baselines3.common.callbacks",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.callbacks",
        "documentation": {}
    },
    {
        "label": "Monitor",
        "importPath": "stable_baselines3.common.monitor",
        "description": "stable_baselines3.common.monitor",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.monitor",
        "documentation": {}
    },
    {
        "label": "make_vec_env",
        "importPath": "stable_baselines3.common.env_util",
        "description": "stable_baselines3.common.env_util",
        "isExtraImport": true,
        "detail": "stable_baselines3.common.env_util",
        "documentation": {}
    },
    {
        "label": "wandb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wandb",
        "description": "wandb",
        "detail": "wandb",
        "documentation": {}
    },
    {
        "label": "WandbCallback",
        "importPath": "wandb.integration.sb3",
        "description": "wandb.integration.sb3",
        "isExtraImport": true,
        "detail": "wandb.integration.sb3",
        "documentation": {}
    },
    {
        "label": "pysindy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pysindy",
        "description": "pysindy",
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "GeneralizedLibrary",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "TrappingSR3",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "AxesArray",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "pysindy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "importPath": "pysindy",
        "description": "pysindy",
        "isExtraImport": true,
        "detail": "pysindy",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "SpectralDerivative",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "SINDyDerivative",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "SmoothedFiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "SpectralDerivative",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "SINDyDerivative",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "SmoothedFiniteDifference",
        "importPath": "pysindy.differentiation",
        "description": "pysindy.differentiation",
        "isExtraImport": true,
        "detail": "pysindy.differentiation",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SSR",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "FROLS",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SSR",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "FROLS",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "BaseOptimizer",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "ConstrainedSR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "EnsembleOptimizer",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "FROLS",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "MIOSR",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SBR",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SINDyPI",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SSR",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "StableLinearSR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "TrappingSR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "WrappedOptimizer",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SINDyPI",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "WrappedOptimizer",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "ConstrainedSR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "WrappedOptimizer",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "SR3",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "importPath": "pysindy.optimizers",
        "description": "pysindy.optimizers",
        "isExtraImport": true,
        "detail": "pysindy.optimizers",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "Parallel",
        "importPath": "joblib",
        "description": "joblib",
        "isExtraImport": true,
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "delayed",
        "importPath": "joblib",
        "description": "joblib",
        "isExtraImport": true,
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "GeneralizedLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "CustomLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "SINDyPILibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "CustomLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "GeneralizedLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "PDELibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "ConcatLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "CustomLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "GeneralizedLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "IdentityLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "ParameterizedLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "PDELibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "SINDyPILibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "TensoredLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "WeakPDELibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "PDELibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "WeakPDELibrary",
        "importPath": "pysindy.feature_library",
        "description": "pysindy.feature_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "ListedColormap",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "Patch",
        "importPath": "matplotlib.patches",
        "description": "matplotlib.patches",
        "isExtraImport": true,
        "detail": "matplotlib.patches",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_X_y",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_array",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_X_y",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_array",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "check_is_fitted",
        "importPath": "sklearn.utils.validation",
        "description": "sklearn.utils.validation",
        "isExtraImport": true,
        "detail": "sklearn.utils.validation",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "TransformerMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "TransformerMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "MultiOutputMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "TransformerMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "TransformerMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "MultiOutputMixin",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "BaseEstimator",
        "importPath": "sklearn.base",
        "description": "sklearn.base",
        "isExtraImport": true,
        "detail": "sklearn.base",
        "documentation": {}
    },
    {
        "label": "numpy.typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NBitBase",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NBitBase",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "binom",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "perm",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "binom",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "perm",
        "importPath": "scipy.special",
        "description": "scipy.special",
        "isExtraImport": true,
        "detail": "scipy.special",
        "documentation": {}
    },
    {
        "label": "AxesArray",
        "importPath": "pysindy.utils.axes",
        "description": "pysindy.utils.axes",
        "isExtraImport": true,
        "detail": "pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "AxesArray",
        "importPath": "pysindy.utils.axes",
        "description": "pysindy.utils.axes",
        "isExtraImport": true,
        "detail": "pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "_AxisMapping",
        "importPath": "pysindy.utils.axes",
        "description": "pysindy.utils.axes",
        "isExtraImport": true,
        "detail": "pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "AxesWarning",
        "importPath": "pysindy.utils.axes",
        "description": "pysindy.utils.axes",
        "isExtraImport": true,
        "detail": "pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "methods",
        "importPath": "derivative",
        "description": "derivative",
        "isExtraImport": true,
        "detail": "derivative",
        "documentation": {}
    },
    {
        "label": "methods",
        "importPath": "derivative",
        "description": "derivative",
        "isExtraImport": true,
        "detail": "derivative",
        "documentation": {}
    },
    {
        "label": "dxdt",
        "importPath": "derivative",
        "description": "derivative",
        "isExtraImport": true,
        "detail": "derivative",
        "documentation": {}
    },
    {
        "label": "savgol_filter",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "find_peaks",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "savgol_filter",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations_with_replacement",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations_with_replacement",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations_with_replacement",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations_with_replacement",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "jax",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jax",
        "description": "jax",
        "detail": "jax",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "jax",
        "description": "jax",
        "isExtraImport": true,
        "detail": "jax",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "jax",
        "description": "jax",
        "isExtraImport": true,
        "detail": "jax",
        "documentation": {}
    },
    {
        "label": "scipy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy",
        "description": "scipy",
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "sparse",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "sparse",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "sparse",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "sparse",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "sparse",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "sparse",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "comb",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "comb",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "comb",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "comb",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ridge_regression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ridge_regression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ridge_regression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ridge_regression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ridge_regression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ridge_regression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ElasticNet",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ElasticNet",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "ElasticNet",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "_preprocess_data",
        "importPath": "sklearn.linear_model._base",
        "description": "sklearn.linear_model._base",
        "isExtraImport": true,
        "detail": "sklearn.linear_model._base",
        "documentation": {}
    },
    {
        "label": "_preprocess_data",
        "importPath": "sklearn.linear_model._base",
        "description": "sklearn.linear_model._base",
        "isExtraImport": true,
        "detail": "sklearn.linear_model._base",
        "documentation": {}
    },
    {
        "label": "safe_sparse_dot",
        "importPath": "sklearn.utils.extmath",
        "description": "sklearn.utils.extmath",
        "isExtraImport": true,
        "detail": "sklearn.utils.extmath",
        "documentation": {}
    },
    {
        "label": "safe_sparse_dot",
        "importPath": "sklearn.utils.extmath",
        "description": "sklearn.utils.extmath",
        "isExtraImport": true,
        "detail": "sklearn.utils.extmath",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "cho_factor",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "cho_factor",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "cho_solve",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "cho_factor",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "LinAlgWarning",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "LinAlgWarning",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "cho_factor",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "cho_factor",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "cho_solve",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "cho_factor",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "LinAlgWarning",
        "importPath": "scipy.linalg",
        "description": "scipy.linalg",
        "isExtraImport": true,
        "detail": "scipy.linalg",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFittedError",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFittedError",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFittedError",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFittedError",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "ConvergenceWarning",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFittedError",
        "importPath": "sklearn.exceptions",
        "description": "sklearn.exceptions",
        "isExtraImport": true,
        "detail": "sklearn.exceptions",
        "documentation": {}
    },
    {
        "label": "jax.numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jax.numpy",
        "description": "jax.numpy",
        "detail": "jax.numpy",
        "documentation": {}
    },
    {
        "label": "numpyro",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpyro",
        "description": "numpyro",
        "detail": "numpyro",
        "documentation": {}
    },
    {
        "label": "Exponential",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "HalfCauchy",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "InverseGamma",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "Normal",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "Exponential",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "HalfCauchy",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "InverseGamma",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "Normal",
        "importPath": "numpyro.distributions",
        "description": "numpyro.distributions",
        "isExtraImport": true,
        "detail": "numpyro.distributions",
        "documentation": {}
    },
    {
        "label": "MCMC",
        "importPath": "numpyro.infer",
        "description": "numpyro.infer",
        "isExtraImport": true,
        "detail": "numpyro.infer",
        "documentation": {}
    },
    {
        "label": "NUTS",
        "importPath": "numpyro.infer",
        "description": "numpyro.infer",
        "isExtraImport": true,
        "detail": "numpyro.infer",
        "documentation": {}
    },
    {
        "label": "MCMC",
        "importPath": "numpyro.infer",
        "description": "numpyro.infer",
        "isExtraImport": true,
        "detail": "numpyro.infer",
        "documentation": {}
    },
    {
        "label": "NUTS",
        "importPath": "numpyro.infer",
        "description": "numpyro.infer",
        "isExtraImport": true,
        "detail": "numpyro.infer",
        "documentation": {}
    },
    {
        "label": "cvxpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cvxpy",
        "description": "cvxpy",
        "detail": "cvxpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "MultiOutputRegressor",
        "importPath": "sklearn.multioutput",
        "description": "sklearn.multioutput",
        "isExtraImport": true,
        "detail": "sklearn.multioutput",
        "documentation": {}
    },
    {
        "label": "MultiOutputRegressor",
        "importPath": "sklearn.multioutput",
        "description": "sklearn.multioutput",
        "isExtraImport": true,
        "detail": "sklearn.multioutput",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "bisect",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "dual_annealing",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "dual_annealing",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "dual_annealing",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "dual_annealing",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "bisect",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "odeint",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "odeint",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "odeint",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "solve_ivp",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "interp1d",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "interp1d",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "griddata",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "interp1d",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "interp1d",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "nodes",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {}
    },
    {
        "label": "StringList",
        "importPath": "docutils.statemachine",
        "description": "docutils.statemachine",
        "isExtraImport": true,
        "detail": "docutils.statemachine",
        "documentation": {}
    },
    {
        "label": "Sphinx",
        "importPath": "sphinx.application",
        "description": "sphinx.application",
        "isExtraImport": true,
        "detail": "sphinx.application",
        "documentation": {}
    },
    {
        "label": "TocTree",
        "importPath": "sphinx.directives.other",
        "description": "sphinx.directives.other",
        "isExtraImport": true,
        "detail": "sphinx.directives.other",
        "documentation": {}
    },
    {
        "label": "SphinxDirective",
        "importPath": "sphinx.util.docutils",
        "description": "sphinx.util.docutils",
        "isExtraImport": true,
        "detail": "sphinx.util.docutils",
        "documentation": {}
    },
    {
        "label": "GoogleDocstring",
        "importPath": "sphinx.ext.napoleon.docstring",
        "description": "sphinx.ext.napoleon.docstring",
        "isExtraImport": true,
        "detail": "sphinx.ext.napoleon.docstring",
        "documentation": {}
    },
    {
        "label": "dysts.flows",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dysts.flows",
        "description": "dysts.flows",
        "detail": "dysts.flows",
        "documentation": {}
    },
    {
        "label": "compute_medl",
        "importPath": "dysts.equation_utils",
        "description": "dysts.equation_utils",
        "isExtraImport": true,
        "detail": "dysts.equation_utils",
        "documentation": {}
    },
    {
        "label": "make_dysts_true_coefficients",
        "importPath": "dysts.equation_utils",
        "description": "dysts.equation_utils",
        "isExtraImport": true,
        "detail": "dysts.equation_utils",
        "documentation": {}
    },
    {
        "label": "nonlinear_terms_from_coefficients",
        "importPath": "dysts.equation_utils",
        "description": "dysts.equation_utils",
        "isExtraImport": true,
        "detail": "dysts.equation_utils",
        "documentation": {}
    },
    {
        "label": "make_dysts_true_coefficients",
        "importPath": "dysts.equation_utils",
        "description": "dysts.equation_utils",
        "isExtraImport": true,
        "detail": "dysts.equation_utils",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "load_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "normalized_RMSE",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Pareto_scan_ensembling",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "total_coefficient_error_normalized",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "compare_methods",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "print_equations",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "compare_coefficient_plots",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "plot_sho",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "plot_lorenz",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "sample_initial_conditions",
        "importPath": "dysts.analysis",
        "description": "dysts.analysis",
        "isExtraImport": true,
        "detail": "dysts.analysis",
        "documentation": {}
    },
    {
        "label": "sample_initial_conditions",
        "importPath": "dysts.analysis",
        "description": "dysts.analysis",
        "isExtraImport": true,
        "detail": "dysts.analysis",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "linregress",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "enzyme",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "lorenz_control",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "linear_damped_SHO",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "linear_damped_SHO",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "burgers_galerkin",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "meanfield",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "mhd",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "oscillator",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "supports_multiple_targets",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "axes",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "AxesArray",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "get_prox",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "get_regularization",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "reorder_constraints",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "validate_control_variables",
        "importPath": "pysindy.utils",
        "description": "pysindy.utils",
        "isExtraImport": true,
        "detail": "pysindy.utils",
        "documentation": {}
    },
    {
        "label": "arviz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "arviz",
        "description": "arviz",
        "detail": "arviz",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "scipy.io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy.io",
        "description": "scipy.io",
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "loadmat",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "loadmat",
        "importPath": "scipy.io",
        "description": "scipy.io",
        "isExtraImport": true,
        "detail": "scipy.io",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "sindy_library",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "sindy_library_no_bias",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_fits",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_lissajou",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "check_local_stability",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "trapping_region",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_progress_plots",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "galerkin_model",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "obj_function",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "check_local_stability",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "load_data",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_trap_progress_plots",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "obj_function",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "sindy_library",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "sindy_library",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_fits",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "obj_function",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "check_local_stability",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_trap_progress_plots",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "galerkin_model",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "nel",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "nGLL",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "interp",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "get_velocity",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "get_vorticity",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "obj_function",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "sindy_library_no_bias",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "check_local_stability",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_trap_progress_plots",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_bar",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "nx",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "ny",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "plot_field",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_progress_plots",
        "importPath": "trapping_utils",
        "description": "trapping_utils",
        "isExtraImport": true,
        "detail": "trapping_utils",
        "documentation": {}
    },
    {
        "label": "matplotlib.gridspec",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.gridspec",
        "description": "matplotlib.gridspec",
        "detail": "matplotlib.gridspec",
        "documentation": {}
    },
    {
        "label": "sympy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sympy",
        "description": "sympy",
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "limit",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "Symbol",
        "importPath": "sympy",
        "description": "sympy",
        "isExtraImport": true,
        "detail": "sympy",
        "documentation": {}
    },
    {
        "label": "pymech.neksuite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymech.neksuite",
        "description": "pymech.neksuite",
        "detail": "pymech.neksuite",
        "documentation": {}
    },
    {
        "label": "EnstrophyMat",
        "importPath": "pysindy.optimizers.trapping_sr3",
        "description": "pysindy.optimizers.trapping_sr3",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "_convert_quad_terms_to_ens_basis",
        "importPath": "pysindy.optimizers.trapping_sr3",
        "description": "pysindy.optimizers.trapping_sr3",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "_create_A_symm",
        "importPath": "pysindy.optimizers.trapping_sr3",
        "description": "pysindy.optimizers.trapping_sr3",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "_permutation_asymmetry",
        "importPath": "pysindy.optimizers.trapping_sr3",
        "description": "pysindy.optimizers.trapping_sr3",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "_antisymm_double_constraint",
        "importPath": "pysindy.optimizers.trapping_sr3",
        "description": "pysindy.optimizers.trapping_sr3",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "_antisymm_triple_constraints",
        "importPath": "pysindy.optimizers.trapping_sr3",
        "description": "pysindy.optimizers.trapping_sr3",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "_make_constraints",
        "importPath": "pysindy.optimizers.trapping_sr3",
        "description": "pysindy.optimizers.trapping_sr3",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "jupytext",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jupytext",
        "description": "jupytext",
        "detail": "jupytext",
        "documentation": {}
    },
    {
        "label": "nbformat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nbformat",
        "description": "nbformat",
        "detail": "nbformat",
        "documentation": {}
    },
    {
        "label": "kernelapp",
        "importPath": "ipykernel",
        "description": "ipykernel",
        "isExtraImport": true,
        "detail": "ipykernel",
        "documentation": {}
    },
    {
        "label": "kernelapp",
        "importPath": "ipykernel",
        "description": "ipykernel",
        "isExtraImport": true,
        "detail": "ipykernel",
        "documentation": {}
    },
    {
        "label": "ExecutePreprocessor",
        "importPath": "nbconvert.preprocessors",
        "description": "nbconvert.preprocessors",
        "isExtraImport": true,
        "detail": "nbconvert.preprocessors",
        "documentation": {}
    },
    {
        "label": "ExecutePreprocessor",
        "importPath": "nbconvert.preprocessors",
        "description": "nbconvert.preprocessors",
        "isExtraImport": true,
        "detail": "nbconvert.preprocessors",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "norm",
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "isExtraImport": true,
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "InvalidParameterError",
        "importPath": "sklearn.utils._param_validation",
        "description": "sklearn.utils._param_validation",
        "isExtraImport": true,
        "detail": "sklearn.utils._param_validation",
        "documentation": {}
    },
    {
        "label": "_normalize_features",
        "importPath": "pysindy.optimizers.base",
        "description": "pysindy.optimizers.base",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "_ind_inflection",
        "importPath": "pysindy.optimizers.ssr",
        "description": "pysindy.optimizers.ssr",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "_remove_and_decrement",
        "importPath": "pysindy.optimizers.stlsq",
        "description": "pysindy.optimizers.stlsq",
        "isExtraImport": true,
        "detail": "pysindy.optimizers.stlsq",
        "documentation": {}
    },
    {
        "label": "enzyme",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "bacterial",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "burgers_galerkin",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "cubic_damped_SHO",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "cubic_oscillator",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "double_pendulum",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "duffing",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "enzyme",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "hopf",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "kinematic_commonroad",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "linear_3D",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "linear_damped_SHO",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz_control",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lotka",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "meanfield",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "mhd",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "oscillator",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "pendulum_on_cart",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "rossler",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "van_der_pol",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "yeast",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map_control",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map_multicontrol",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz_control",
        "importPath": "pysindy.utils.odes",
        "description": "pysindy.utils.odes",
        "isExtraImport": true,
        "detail": "pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "assert_",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "assert_array_equal",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "assert_equal",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "assert_raises",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "assert_array_equal",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "assert_allclose",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "BaseDifferentiation",
        "importPath": "pysindy.differentiation.base",
        "description": "pysindy.differentiation.base",
        "isExtraImport": true,
        "detail": "pysindy.differentiation.base",
        "documentation": {}
    },
    {
        "label": "csr_matrix",
        "importPath": "scipy.sparse",
        "description": "scipy.sparse",
        "isExtraImport": true,
        "detail": "scipy.sparse",
        "documentation": {}
    },
    {
        "label": "BaseFeatureLibrary",
        "importPath": "pysindy.feature_library.base",
        "description": "pysindy.feature_library.base",
        "isExtraImport": true,
        "detail": "pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "n_poly_features",
        "importPath": "pysindy.feature_library.polynomial_library",
        "description": "pysindy.feature_library.polynomial_library",
        "isExtraImport": true,
        "detail": "pysindy.feature_library.polynomial_library",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "assume",
        "importPath": "hypothesis",
        "description": "hypothesis",
        "isExtraImport": true,
        "detail": "hypothesis",
        "documentation": {}
    },
    {
        "label": "given",
        "importPath": "hypothesis",
        "description": "hypothesis",
        "isExtraImport": true,
        "detail": "hypothesis",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "hypothesis",
        "description": "hypothesis",
        "isExtraImport": true,
        "detail": "hypothesis",
        "documentation": {}
    },
    {
        "label": "integers",
        "importPath": "hypothesis.strategies",
        "description": "hypothesis.strategies",
        "isExtraImport": true,
        "detail": "hypothesis.strategies",
        "documentation": {}
    },
    {
        "label": "make_regression",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "RandomizedSearchCV",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "TimeSeriesSplit",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "SINDyEstimator",
        "importPath": "pysindy.deeptime",
        "description": "pysindy.deeptime",
        "isExtraImport": true,
        "detail": "pysindy.deeptime",
        "documentation": {}
    },
    {
        "label": "SINDyModel",
        "importPath": "pysindy.deeptime",
        "description": "pysindy.deeptime",
        "isExtraImport": true,
        "detail": "pysindy.deeptime",
        "documentation": {}
    },
    {
        "label": "DollhouseThermalEnv",
        "kind": 6,
        "importPath": "Environment.dollhouse_env",
        "description": "Environment.dollhouse_env",
        "peekOfCode": "class DollhouseThermalEnv(gym.Env):\n    \"\"\"\n    A Gymnasium environment for the dollhouse thermal control problem using a pre-trained SINDy model.\n    The environment simulates a two-floor dollhouse with:\n    - Controllable lights (ON/OFF) on each floor\n    - Controllable windows (OPEN/CLOSED) on each floor\n    - Temperature states for ground floor and top floor\n    - External temperature (time-varying)\n    The goal is to maintain temperatures within desired setpoints for both floors.\n    \"\"\"",
        "detail": "Environment.dollhouse_env",
        "documentation": {}
    },
    {
        "label": "load_model",
        "kind": 2,
        "importPath": "Environment.evaluate_rl_agent",
        "description": "Environment.evaluate_rl_agent",
        "peekOfCode": "def load_model(model_path):\n    \"\"\"\n    Load a trained RL model.\n    Args:\n        model_path: Path to the saved model\n    Returns:\n        model: Loaded model\n    \"\"\"\n    # Determine the algorithm from the model path\n    if \"ppo\" in model_path.lower():",
        "detail": "Environment.evaluate_rl_agent",
        "documentation": {}
    },
    {
        "label": "recreate_environment",
        "kind": 2,
        "importPath": "Environment.evaluate_rl_agent",
        "description": "Environment.evaluate_rl_agent",
        "peekOfCode": "def recreate_environment(env_params_path, data_file=None, model_dir=None):\n    \"\"\"\n    Recreate the environment using saved parameters, with normalization if available.\n    Args:\n        env_params_path: Path to the saved environment parameters\n        data_file: Optional path to data file for SINDy model (overrides saved path)\n        model_dir: Directory where the model is saved (to look for normalization stats)\n    Returns:\n        env: Recreated environment (possibly normalized)\n    \"\"\"",
        "detail": "Environment.evaluate_rl_agent",
        "documentation": {}
    },
    {
        "label": "evaluate_agent",
        "kind": 2,
        "importPath": "Environment.evaluate_rl_agent",
        "description": "Environment.evaluate_rl_agent",
        "peekOfCode": "def evaluate_agent(env, model, num_episodes=5, render=False, verbose=True):\n    \"\"\"\n    Evaluate a trained agent on the environment using deterministic actions.\n    Handles both normalized and non-normalized environments.\n    Args:\n        env: The environment to evaluate on (may be VecNormalize wrapped)\n        model: The trained RL model\n        num_episodes: Number of episodes to evaluate\n        render: Whether to render the environment\n        verbose: Whether to print detailed logs",
        "detail": "Environment.evaluate_rl_agent",
        "documentation": {}
    },
    {
        "label": "visualize_performance",
        "kind": 2,
        "importPath": "Environment.evaluate_rl_agent",
        "description": "Environment.evaluate_rl_agent",
        "peekOfCode": "def visualize_performance(performance, output_dir, agent_name=\"RL Agent\"):\n    \"\"\"\n    Create visualizations of agent performance with dynamic setpoint support.\n    Args:\n        performance: Performance dictionary from evaluate_agent\n        output_dir: Directory to save visualizations\n        agent_name: Name of the agent for plot titles\n    \"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n    # Extract episode data",
        "detail": "Environment.evaluate_rl_agent",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Environment.evaluate_rl_agent",
        "description": "Environment.evaluate_rl_agent",
        "peekOfCode": "def main(\n    model_path,\n    data_file,\n    env_params_path=None,\n    num_episodes=5,\n    render=False,\n    output_dir=None,\n    verbose=True,\n):\n    \"\"\"",
        "detail": "Environment.evaluate_rl_agent",
        "documentation": {}
    },
    {
        "label": "create_rule_based_controller",
        "kind": 2,
        "importPath": "Environment.rule_based_controller",
        "description": "Environment.rule_based_controller",
        "peekOfCode": "def create_rule_based_controller(hysteresis=0.5):\n    \"\"\"\n    Create a simple rule-based controller.\n    Args:\n        hysteresis: Temperature buffer to prevent oscillation\n    Returns:\n        function: Rule-based controller function\n    \"\"\"\n    def controller(observation):\n        # Extract state variables",
        "detail": "Environment.rule_based_controller",
        "documentation": {}
    },
    {
        "label": "evaluate_rule_based",
        "kind": 2,
        "importPath": "Environment.rule_based_controller",
        "description": "Environment.rule_based_controller",
        "peekOfCode": "def evaluate_rule_based(env, num_episodes=5, render=True, hysteresis=0.5):\n    \"\"\"\n    Evaluate a simple rule-based controller on the environment.\n    Args:\n        env: The environment to evaluate on\n        num_episodes: Number of episodes to evaluate\n        render: Whether to render the environment\n        hysteresis: Hysteresis parameter for the rule-based controller\n    Returns:\n        dict: Evaluation results",
        "detail": "Environment.rule_based_controller",
        "documentation": {}
    },
    {
        "label": "visualize_performance",
        "kind": 2,
        "importPath": "Environment.rule_based_controller",
        "description": "Environment.rule_based_controller",
        "peekOfCode": "def visualize_performance(\n    performance, output_dir, controller_name=\"Simple Rule-Based Controller\"\n):\n    \"\"\"\n    Create visualizations of controller performance with dynamic setpoint support.\n    Args:\n        performance: Performance dictionary from evaluate_controller\n        output_dir: Directory to save visualizations\n        controller_name: Name of the controller for plot titles\n    \"\"\"",
        "detail": "Environment.rule_based_controller",
        "documentation": {}
    },
    {
        "label": "run_rule_based_evaluation",
        "kind": 2,
        "importPath": "Environment.rule_based_controller",
        "description": "Environment.rule_based_controller",
        "peekOfCode": "def run_rule_based_evaluation(\n    data_file,\n    output_dir=None,\n    num_episodes=5,\n    render=True,\n    env_params_path=None,\n    hysteresis=0.5,\n):\n    \"\"\"\n    Train a SINDy model and evaluate a simple rule-based controller.",
        "detail": "Environment.rule_based_controller",
        "documentation": {}
    },
    {
        "label": "CustomWandbCallback",
        "kind": 6,
        "importPath": "Environment.train_rl_agent",
        "description": "Environment.train_rl_agent",
        "peekOfCode": "class CustomWandbCallback(BaseCallback):\n    \"\"\"\n    Custom callback for logging additional metrics to WandB.\n    \"\"\"\n    def __init__(self, verbose=0):\n        super(CustomWandbCallback, self).__init__(verbose)\n        self.episode_rewards = []\n        self.episode_lengths = []\n        self.episode_comfort_violations = []\n    def _on_step(self) -> bool:",
        "detail": "Environment.train_rl_agent",
        "documentation": {}
    },
    {
        "label": "check_gpu_availability",
        "kind": 2,
        "importPath": "Environment.train_rl_agent",
        "description": "Environment.train_rl_agent",
        "peekOfCode": "def check_gpu_availability():\n    \"\"\"\n    Check if GPU is available and return the appropriate device.\n    \"\"\"\n    if torch.cuda.is_available():\n        device = torch.device(\"cuda\")\n        print(f\"GPU available! Using {torch.cuda.get_device_name(0)}\")\n        print(\n            f\"GPU Memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.2f} GB\"\n        )",
        "detail": "Environment.train_rl_agent",
        "documentation": {}
    },
    {
        "label": "make_env",
        "kind": 2,
        "importPath": "Environment.train_rl_agent",
        "description": "Environment.train_rl_agent",
        "peekOfCode": "def make_env(rank, seed, sindy_model, env_params, monitor_dir):\n    \"\"\"\n    Create a function that returns a single environment instance.\n    Args:\n        rank: Unique identifier for the environment\n        seed: Random seed\n        sindy_model: Trained SINDy model\n        env_params: Environment parameters\n        monitor_dir: Directory for monitor logs\n    Returns:",
        "detail": "Environment.train_rl_agent",
        "documentation": {}
    },
    {
        "label": "create_vectorized_env",
        "kind": 2,
        "importPath": "Environment.train_rl_agent",
        "description": "Environment.train_rl_agent",
        "peekOfCode": "def create_vectorized_env(\n    sindy_model,\n    env_params,\n    n_envs,\n    seed,\n    monitor_dir,\n    vec_env_type=\"subproc\",\n    normalize=True,\n):\n    \"\"\"",
        "detail": "Environment.train_rl_agent",
        "documentation": {}
    },
    {
        "label": "train_rl_agent",
        "kind": 2,
        "importPath": "Environment.train_rl_agent",
        "description": "Environment.train_rl_agent",
        "peekOfCode": "def train_rl_agent(\n    vec_env,\n    n_envs,\n    algorithm=\"ppo\",\n    total_timesteps=5000000,\n    seed=0,\n    log_dir=\"logs\",\n    wandb_project=\"dollhouse-thermal-control\",\n    wandb_entity=None,\n    use_wandb=True,",
        "detail": "Environment.train_rl_agent",
        "documentation": {}
    },
    {
        "label": "setup_training",
        "kind": 2,
        "importPath": "Environment.train_rl_agent",
        "description": "Environment.train_rl_agent",
        "peekOfCode": "def setup_training(\n    data_file,\n    output_dir=None,\n    algorithm=\"ppo\",\n    total_timesteps=5000000,\n    reward_type=\"balanced\",\n    energy_weight=1.0,\n    comfort_weight=1.0,\n    seed=0,\n    wandb_project=\"dollhouse-thermal-control\",",
        "detail": "Environment.train_rl_agent",
        "documentation": {}
    },
    {
        "label": "load_and_prepare_data",
        "kind": 2,
        "importPath": "Environment.train_sindy_model",
        "description": "Environment.train_sindy_model",
        "peekOfCode": "def load_and_prepare_data(file_path, warmup_period_minutes=1):\n    \"\"\"\n    Load and prepare data for SINDy model training.\n    Args:\n        file_path: Path to CSV data file\n        warmup_period_minutes: Warmup period to exclude from analysis\n    Returns:\n        X (np.array): State variables (temperatures)\n        u (np.array): Input variables\n        scaler_X (StandardScaler): Scaler used for state variables (or None)",
        "detail": "Environment.train_sindy_model",
        "documentation": {}
    },
    {
        "label": "filter_warmup_period",
        "kind": 2,
        "importPath": "Environment.train_sindy_model",
        "description": "Environment.train_sindy_model",
        "peekOfCode": "def filter_warmup_period(X, u, warmup_indices):\n    \"\"\"\n    Filter out the warmup period from data arrays\n    Args:\n        X: State variables\n        u: Input variables\n        warmup_indices: Indices representing the warmup period\n    Returns:\n        X_filtered: Filtered state variables\n        u_filtered: Filtered input variables",
        "detail": "Environment.train_sindy_model",
        "documentation": {}
    },
    {
        "label": "train_sindy_model",
        "kind": 2,
        "importPath": "Environment.train_sindy_model",
        "description": "Environment.train_sindy_model",
        "peekOfCode": "def train_sindy_model(file_path, output_dir=None, threshold=0.1, alpha=0.1, degree=2):\n    \"\"\"\n    Train a SINDy model on the given data file.\n    Args:\n        file_path: Path to the data file to train on\n        output_dir: Directory to save the model (optional)\n        threshold: Threshold parameter for STLSQ\n        alpha: Alpha parameter for STLSQ\n        degree: Degree for polynomial library\n    Returns:",
        "detail": "Environment.train_sindy_model",
        "documentation": {}
    },
    {
        "label": "load_and_prepare_data",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def load_and_prepare_data(file_path, add_features=True, warmup_period_minutes=1):\n    \"\"\"\n    Load and prepare data for SINDy model training and testing\n    Parameters:\n    file_path (str): Path to the CSV data file\n    add_features (bool): Whether to add physics-informed features\n    warmup_period_minutes (float): Warmup period to exclude from analysis\n    Returns:\n    X (np.array): State variables (temperatures)\n    u (np.array): Input variables",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "get_library_configurations",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def get_library_configurations():\n    \"\"\"\n    Define an expanded set of library configurations for SINDy model search\n    with more combinations of polynomial and Fourier terms.\n    Returns:\n    library_configs (list): List of library configuration dictionaries\n    \"\"\"\n    library_configs = [\n        # Basic libraries\n        {",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "get_optimizer_configurations",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def get_optimizer_configurations():\n    \"\"\"\n    Define optimizer configurations for SINDy model search based on the\n    official pySINDy documentation.\n    Returns:\n    optimizer_configs (list): List of optimizer configuration dictionaries\n    \"\"\"\n    optimizer_configs = []\n    # STLSQ optimizer\n    # Sequentially thresholded least squares algorithm",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "create_sindy_model",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def create_sindy_model(feature_library, optimizer_config):\n    \"\"\"\n    Create a SINDy model with specified library and optimizer\n    Parameters:\n    feature_library: The feature library to use\n    optimizer_config (dict): Optimizer configuration\n    Returns:\n    model (SINDy): The configured SINDy model\n    \"\"\"\n    optimizer_type = optimizer_config[\"name\"]",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "single_step_prediction",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def single_step_prediction(model, X, u=None):\n    \"\"\"\n    Perform single-step prediction with a SINDy model\n    Parameters:\n    model: Trained SINDy model\n    X (np.array): Input states\n    u (np.array): Input control variables\n    Returns:\n    X_pred (np.array): Predicted states\n    \"\"\"",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "multi_step_prediction",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def multi_step_prediction(model, X_init, u, steps):\n    \"\"\"\n    Perform multi-step prediction with a SINDy model\n    Parameters:\n    model: Trained SINDy model\n    X_init: Initial state\n    u: Input variables\n    steps: Number of steps to predict\n    Returns:\n    X_pred: Predicted states",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "filter_warmup_period",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def filter_warmup_period(X, u, warmup_indices):\n    \"\"\"\n    Filter out the warmup period from data arrays\n    Parameters:\n    X, u: Data arrays\n    warmup_indices: Indices to filter out\n    Returns:\n    X_filtered, u_filtered: Filtered arrays\n    \"\"\"\n    # Create a mask of all indices (True)",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "calculate_rmse",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def calculate_rmse(actual, predicted, variable_idx=None):\n    \"\"\"\n    Calculate RMSE between actual and predicted values\n    Parameters:\n    actual: Actual values\n    predicted: Predicted values\n    variable_idx: Optional index for specific variable\n    Returns:\n    rmse: RMSE value(s)\n    \"\"\"",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "evaluate_model_config",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def evaluate_model_config(lib_config, opt_config, X_train, u_train, test_datasets):\n    \"\"\"\n    Evaluate a specific model configuration on multiple test datasets\n    Parameters:\n    lib_config: Library configuration\n    opt_config: Optimizer configuration\n    X_train, u_train: Training data\n    test_datasets: List of test datasets\n    Returns:\n    result: Evaluation results dictionary containing both single-step and multi-step metrics",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "plot_predictions",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def plot_predictions(test_name, plot_data, results_dir):\n    \"\"\"\n    Plot single-step and multi-step predictions along with residuals\n    Parameters:\n    test_name: Name of the test dataset\n    plot_data: Dictionary containing prediction data\n    results_dir: Directory to save plots\n    \"\"\"\n    # Convert data from list to numpy arrays\n    X_test = np.array(plot_data[\"X_test\"])",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "run_hyperparameter_optimization",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def run_hyperparameter_optimization(\n    train_data_files,\n    test_data_files,\n    add_features=True,\n    warmup_period_minutes=1,\n    n_jobs=-1,\n):\n    \"\"\"\n    Run hyperparameter optimization for SINDy models using multiple training and test files\n    Parameters:",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function for SINDy hyperparameter optimization with support for multiple training and test files\n    \"\"\"\n    import argparse\n    # Declare the global variable at the start of the function\n    global results_dir\n    parser = argparse.ArgumentParser(description=\"SINDy Hyperparameter Optimization\")\n    parser.add_argument(\n        \"--train\",",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "results_dir",
        "kind": 5,
        "importPath": "Sindy.Training.training",
        "description": "Sindy.Training.training",
        "peekOfCode": "results_dir = None\ndef load_and_prepare_data(file_path, add_features=True, warmup_period_minutes=1):\n    \"\"\"\n    Load and prepare data for SINDy model training and testing\n    Parameters:\n    file_path (str): Path to the CSV data file\n    add_features (bool): Whether to add physics-informed features\n    warmup_period_minutes (float): Warmup period to exclude from analysis\n    Returns:\n    X (np.array): State variables (temperatures)",
        "detail": "Sindy.Training.training",
        "documentation": {}
    },
    {
        "label": "create_rule_based_controller",
        "kind": 2,
        "importPath": "Test.policy_comparison",
        "description": "Test.policy_comparison",
        "peekOfCode": "def create_rule_based_controller(heating_setpoint, cooling_setpoint, hysteresis=0.5):\n    \"\"\"\n    Create a simple rule-based controller.\n    \"\"\"\n    def controller(observation):\n        ground_temp = observation[0]\n        top_temp = observation[1]\n        action = np.zeros(4, dtype=int)\n        avg_setpoint = (heating_setpoint + cooling_setpoint) / 2\n        if ground_temp < avg_setpoint - hysteresis:",
        "detail": "Test.policy_comparison",
        "documentation": {}
    },
    {
        "label": "create_observation",
        "kind": 2,
        "importPath": "Test.policy_comparison",
        "description": "Test.policy_comparison",
        "peekOfCode": "def create_observation(ground_temp, top_temp):\n    \"\"\"\n    Create observation vector for the environment.\n    \"\"\"\n    obs = np.zeros(11)\n    obs[0], obs[1], obs[2] = ground_temp, top_temp, 22.0  # Temperatures\n    obs[7], obs[8] = 26.0, 28.0  # Heating and cooling setpoints\n    return obs.astype(np.float32)\ndef record_policy_actions(\n    controller, temp_range, output_file, is_rl_model=False, deterministic=True",
        "detail": "Test.policy_comparison",
        "documentation": {}
    },
    {
        "label": "record_policy_actions",
        "kind": 2,
        "importPath": "Test.policy_comparison",
        "description": "Test.policy_comparison",
        "peekOfCode": "def record_policy_actions(\n    controller, temp_range, output_file, is_rl_model=False, deterministic=True\n):\n    \"\"\"\n    Record actions from a policy across a range of temperatures.\n    \"\"\"\n    data = []\n    for ground_temp in temp_range:\n        for top_temp in temp_range:\n            obs = create_observation(ground_temp, top_temp)",
        "detail": "Test.policy_comparison",
        "documentation": {}
    },
    {
        "label": "visualize_policy",
        "kind": 2,
        "importPath": "Test.policy_comparison",
        "description": "Test.policy_comparison",
        "peekOfCode": "def visualize_policy(csv_files, labels, temp_range, output_dir, save_format=\"pdf\"):\n    \"\"\"\n    Visualize and compare policies from CSV files.\n    \"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n    sns.set_style(\"whitegrid\")\n    for csv_file, label in zip(csv_files, labels):\n        df = pd.read_csv(csv_file)\n        # Temperature values should already be rounded in the CSV,\n        # but ensure they are rounded to 2 decimal places just in case",
        "detail": "Test.policy_comparison",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Test.policy_comparison",
        "description": "Test.policy_comparison",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Record and visualize policy actions.\")\n    parser.add_argument(\n        \"--model\", type=str, required=True, help=\"Path to the trained PPO model\"\n    )\n    parser.add_argument(\n        \"--output\", type=str, default=None, help=\"Directory to save results\"\n    )\n    parser.add_argument(\n        \"--format\",",
        "detail": "Test.policy_comparison",
        "documentation": {}
    },
    {
        "label": "create_rule_based_controller",
        "kind": 2,
        "importPath": "Test.temp",
        "description": "Test.temp",
        "peekOfCode": "def create_rule_based_controller(heating_setpoint, cooling_setpoint, hysteresis=0.5):\n    \"\"\"\n    Create a simple rule-based controller.\n    Args:\n        heating_setpoint: Heating setpoint temperature\n        cooling_setpoint: Cooling setpoint temperature\n        hysteresis: Temperature buffer to prevent oscillation\n    Returns:\n        function: Rule-based controller function\n    \"\"\"",
        "detail": "Test.temp",
        "documentation": {}
    },
    {
        "label": "create_observation",
        "kind": 2,
        "importPath": "Test.temp",
        "description": "Test.temp",
        "peekOfCode": "def create_observation(ground_temp, top_temp, current_action=None):\n    \"\"\"\n    Create observation vector matching the training environment format.\n    Observation format:\n    [ground_temp, top_temp, external_temp, ground_light, ground_window, top_light, top_window,\n     heating_setpoint, cooling_setpoint, hour_of_day, time_step]\n    Args:\n        ground_temp: Ground floor temperature\n        top_temp: Top floor temperature\n        current_action: Previous action (if available)",
        "detail": "Test.temp",
        "documentation": {}
    },
    {
        "label": "calculate_action_combination",
        "kind": 2,
        "importPath": "Test.temp",
        "description": "Test.temp",
        "peekOfCode": "def calculate_action_combination(action):\n    \"\"\"\n    Calculate action combination code for a single floor.\n    Args:\n        action: [light_state, window_state]\n    Returns:\n        int: Action combination code (0-3)\n    \"\"\"\n    light, window = action[0], action[1]\n    if light == 0 and window == 0:",
        "detail": "Test.temp",
        "documentation": {}
    },
    {
        "label": "generate_policy_grid",
        "kind": 2,
        "importPath": "Test.temp",
        "description": "Test.temp",
        "peekOfCode": "def generate_policy_grid(controller, temp_range, is_rl_model=False, deterministic=True):\n    \"\"\"\n    Generate a policy grid for a controller across a range of temperatures.\n    Args:\n        controller: Controller function or model\n        temp_range: Range of temperatures to evaluate\n        is_rl_model: Whether the controller is an RL model\n        deterministic: Whether to use deterministic actions (for RL model)\n    Returns:\n        Ground actions grid and Top actions grid (2D arrays of action combinations)",
        "detail": "Test.temp",
        "documentation": {}
    },
    {
        "label": "visualize_policies",
        "kind": 2,
        "importPath": "Test.temp",
        "description": "Test.temp",
        "peekOfCode": "def visualize_policies(\n    rule_based_ground,\n    rule_based_top,\n    ppo_stochastic_ground,\n    ppo_stochastic_top,\n    ppo_deterministic_ground,\n    ppo_deterministic_top,\n    temp_range,\n    output_dir,\n    save_format=\"pdf\",",
        "detail": "Test.temp",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Test.temp",
        "description": "Test.temp",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to run the policy comparison.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Compare rule-based and PPO controller policies\"\n    )\n    parser.add_argument(\n        \"--model\", type=str, required=True, help=\"Path to the trained PPO model\"\n    )",
        "detail": "Test.temp",
        "documentation": {}
    },
    {
        "label": "SINDyEstimator",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.deeptime.deeptime",
        "description": "pysindy.build.lib.pysindy.deeptime.deeptime",
        "peekOfCode": "class SINDyEstimator(SINDy):\n    \"\"\"\n    Implementation of SINDy conforming to the API of a Deeptime\n    `Estimator \\\n    <https://deeptime-ml.github.io/api/generated/deeptime.base.Estimator.html>`_.\n    Parameters\n    ----------\n    optimizer : optimizer object, optional\n        Optimization method used to fit the SINDy model. This must be an object\n        extending :class:`pysindy.optimizers.BaseOptimizer`. Default is",
        "detail": "pysindy.build.lib.pysindy.deeptime.deeptime",
        "documentation": {}
    },
    {
        "label": "SINDyModel",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.deeptime.deeptime",
        "description": "pysindy.build.lib.pysindy.deeptime.deeptime",
        "peekOfCode": "class SINDyModel(SINDy):\n    \"\"\"\n    Implementation of SINDy conforming to the API of a Deeptime\n    `Model <https://deeptime-ml.github.io/api/generated/deeptime.base.Model.html>`_.\n    The model is represented as a Scikit-learn pipeline object with three steps:\n    1. Map the raw input data to nonlinear features according to the selected\n    ``feature_library``\n    2. Reshape the data from input shape to an optimization problem\n    3. Multiply the nonlinear features with a coefficient matrix encapuslated\n    in ``optimizer``.",
        "detail": "pysindy.build.lib.pysindy.deeptime.deeptime",
        "documentation": {}
    },
    {
        "label": "BaseDifferentiation",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.differentiation.base",
        "description": "pysindy.build.lib.pysindy.differentiation.base",
        "peekOfCode": "class BaseDifferentiation(BaseEstimator):\n    \"\"\"\n    Base class for differentiation methods.\n    Simply forces differentiation methods to implement a\n    ``_differentiate`` function.\n    Attributes:\n        smoothed_x_: Methods that smooth x before differentiating save\n            that value here.  Methods that do not simply save x here.\n    \"\"\"\n    def __init__(self):",
        "detail": "pysindy.build.lib.pysindy.differentiation.base",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.differentiation.finite_difference",
        "description": "pysindy.build.lib.pysindy.differentiation.finite_difference",
        "peekOfCode": "class FiniteDifference(BaseDifferentiation):\n    \"\"\"Finite difference derivatives.\n    Parameters\n    ----------\n    order: int, optional (default 2)\n        The order of the finite difference method to be used.\n        Currently only centered differences are implemented, for even order\n        and left-off-centered differences for odd order.\n    d : int, optional (default 1)\n        The order of derivative to take.  Must be positive integer.",
        "detail": "pysindy.build.lib.pysindy.differentiation.finite_difference",
        "documentation": {}
    },
    {
        "label": "SINDyDerivative",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.differentiation.sindy_derivative",
        "description": "pysindy.build.lib.pysindy.differentiation.sindy_derivative",
        "peekOfCode": "class SINDyDerivative(BaseDifferentiation):\n    \"\"\"\n    Wrapper class for differentiation classes from the :doc:`derivative:index` package.\n    This class is meant to provide all the same functionality as the\n    `dxdt <https://derivative.readthedocs.io/en/latest/api.html\\\n        #derivative.differentiation.dxdt>`_ method.\n    This class also has ``_differentiate`` and ``__call__`` methods which are\n    used by PySINDy.\n    Parameters\n    ----------",
        "detail": "pysindy.build.lib.pysindy.differentiation.sindy_derivative",
        "documentation": {}
    },
    {
        "label": "SmoothedFiniteDifference",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.differentiation.smoothed_finite_difference",
        "description": "pysindy.build.lib.pysindy.differentiation.smoothed_finite_difference",
        "peekOfCode": "class SmoothedFiniteDifference(FiniteDifference):\n    \"\"\"Smoothed finite difference derivatives.\n    Perform differentiation by smoothing input data then applying a finite\n    difference method.\n    Parameters\n    ----------\n    smoother: function, optional (default :code:`savgol_filter`)\n        Function to perform smoothing. Must be compatible with the\n        following call signature: :code:`x_smoothed = smoother(x, **smoother_kws)`\n    smoother_kws: dict, optional (default :code:`{}`)",
        "detail": "pysindy.build.lib.pysindy.differentiation.smoothed_finite_difference",
        "documentation": {}
    },
    {
        "label": "SpectralDerivative",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.differentiation.spectral_derivative",
        "description": "pysindy.build.lib.pysindy.differentiation.spectral_derivative",
        "peekOfCode": "class SpectralDerivative(BaseDifferentiation):\n    \"\"\"Spectral derivatives.\n    Assumes uniform grid, and utilizes FFT to approximate a derivative.\n    Works well for derivatives in periodic dimensions.\n    Equivalent to a maximal-order finite difference, but runs in O(NlogN).\n    Parameters\n    ----------\n    d : int\n        The order of derivative to take\n    axis: int, optional (default 0)",
        "detail": "pysindy.build.lib.pysindy.differentiation.spectral_derivative",
        "documentation": {}
    },
    {
        "label": "BaseFeatureLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.base",
        "description": "pysindy.build.lib.pysindy.feature_library.base",
        "peekOfCode": "class BaseFeatureLibrary(TransformerMixin):\n    \"\"\"\n    Base class for feature libraries.\n    Forces subclasses to implement ``fit``, ``transform``,\n    and ``get_feature_names`` methods.\n    \"\"\"\n    def validate_input(self, x, *args, **kwargs):\n        return validate_no_reshape(x, *args, **kwargs)\n    def reshape_samples_to_spatial_grid(self, x: np.ndarray) -> AxesArray:\n        \"\"\"Adapt predictions to fitted spatial grid.\"\"\"",
        "detail": "pysindy.build.lib.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "ConcatLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.base",
        "description": "pysindy.build.lib.pysindy.feature_library.base",
        "peekOfCode": "class ConcatLibrary(BaseFeatureLibrary):\n    \"\"\"Concatenate multiple libraries into one library. All settings\n    provided to individual libraries will be applied.\n    Parameters\n    ----------\n    libraries : list of libraries\n        Library instances to be applied to the input matrix.\n    Attributes\n    ----------\n    n_features_in_ : int",
        "detail": "pysindy.build.lib.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "TensoredLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.base",
        "description": "pysindy.build.lib.pysindy.feature_library.base",
        "peekOfCode": "class TensoredLibrary(BaseFeatureLibrary):\n    \"\"\"Tensor multiple libraries together into one library. All settings\n    provided to individual libraries will be applied.\n    Parameters\n    ----------\n    libraries : list of libraries\n        Library instances to be applied to the input matrix.\n    inputs_per_library_ : Sequence of Sequences of ints (default None)\n        list that specifies which input indexes should be passed as\n        inputs for each of the individual feature libraries.",
        "detail": "pysindy.build.lib.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "x_sequence_or_item",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.feature_library.base",
        "description": "pysindy.build.lib.pysindy.feature_library.base",
        "peekOfCode": "def x_sequence_or_item(wrapped_func):\n    \"\"\"Allow a feature library's method to handle list or item inputs.\"\"\"\n    @wraps(wrapped_func)\n    def func(self, x, *args, **kwargs):\n        if isinstance(x, Sequence):\n            if isinstance(x[0], jax.Array):\n                xs = x\n            else:\n                xs = [AxesArray(xi, comprehend_axes(xi)) for xi in x]\n            result = wrapped_func(self, xs, *args, **kwargs)",
        "detail": "pysindy.build.lib.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "CustomLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.custom_library",
        "description": "pysindy.build.lib.pysindy.feature_library.custom_library",
        "peekOfCode": "class CustomLibrary(BaseFeatureLibrary):\n    \"\"\"Generate a library with custom functions.\n    Parameters\n    ----------\n    library_functions : list of mathematical functions\n        Functions to include in the library. Default is to use same functions\n        for all variables. Can also be used so that each variable has an\n        associated library, in this case library_functions is shape\n        (n_input_features, num_library_functions)\n    function_names : list of functions, optional (default None)",
        "detail": "pysindy.build.lib.pysindy.feature_library.custom_library",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.fourier_library",
        "description": "pysindy.build.lib.pysindy.feature_library.fourier_library",
        "peekOfCode": "class FourierLibrary(BaseFeatureLibrary):\n    \"\"\"\n    Generate a library with trigonometric functions.\n    Parameters\n    ----------\n    n_frequencies : int, optional (default 1)\n        Number of frequencies to include in the library. The library will\n        include functions :math:`\\\\sin(x), \\\\sin(2x), \\\\dots\n        \\\\sin(n_{frequencies}x)` for each input feature :math:`x`\n        (depending on which of sine and/or cosine features are included).",
        "detail": "pysindy.build.lib.pysindy.feature_library.fourier_library",
        "documentation": {}
    },
    {
        "label": "GeneralizedLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "description": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "peekOfCode": "class GeneralizedLibrary(BaseFeatureLibrary):\n    \"\"\"Put multiple libraries into one library. All settings\n    provided to individual libraries will be applied. Note that this class\n    allows one to specifically choose which input variables are used for\n    each library, and take tensor products of any pair of libraries. Tensored\n    libraries inherit the same input variables specified for the individual\n    libraries.\n    Parameters\n    ----------\n    libraries : list of libraries",
        "detail": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "documentation": {}
    },
    {
        "label": "has_weak",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "description": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "peekOfCode": "def has_weak(lib):\n    if isinstance(lib, WeakPDELibrary):\n        return True\n    elif hasattr(lib, \"libraries_\"):\n        for lib_k in lib.libraries_:\n            if has_weak(lib_k):\n                return True\n    return False\ndef has_nonweak(lib):\n    if hasattr(lib, \"libraries_\"):",
        "detail": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "documentation": {}
    },
    {
        "label": "has_nonweak",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "description": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "peekOfCode": "def has_nonweak(lib):\n    if hasattr(lib, \"libraries_\"):\n        for lib_k in lib.libraries_:\n            if has_nonweak(lib_k):\n                return True\n    elif not isinstance(lib, WeakPDELibrary):\n        return True\n    return False",
        "detail": "pysindy.build.lib.pysindy.feature_library.generalized_library",
        "documentation": {}
    },
    {
        "label": "ParameterizedLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.parameterized_library",
        "description": "pysindy.build.lib.pysindy.feature_library.parameterized_library",
        "peekOfCode": "class ParameterizedLibrary(GeneralizedLibrary):\n    \"\"\"A tensor product of two libraries with different inputs.\n    Typically, this is a feature library of the input data and a\n    parameter library of input control, making the SINDyCP method.  If\n    the input libraries are weak, the temporal derivatives are\n    automatically rescaled by the appropriate domain volumes.\n    Parameters\n    ----------\n    parameter_library : BaseFeatureLibrary, optional (default PolynomialLibrary).\n    Specifies the library function to apply to the input control features.",
        "detail": "pysindy.build.lib.pysindy.feature_library.parameterized_library",
        "documentation": {}
    },
    {
        "label": "PDELibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.pde_library",
        "description": "pysindy.build.lib.pysindy.feature_library.pde_library",
        "peekOfCode": "class PDELibrary(BaseFeatureLibrary):\n    \"\"\"Generate a PDE library with custom functions.\n    Parameters\n    ----------\n    function_library : BaseFeatureLibrary, optional (default\n        PolynomialLibrary(degree=3,include_bias=False))\n        SINDy library with output features representing library_functions to include\n        in the library, in place of library_functions.\n    derivative_order : int, optional (default 0)\n        Order of derivative to take on each input variable,",
        "detail": "pysindy.build.lib.pysindy.feature_library.pde_library",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "description": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "peekOfCode": "class PolynomialLibrary(PolynomialFeatures, BaseFeatureLibrary):\n    \"\"\"Generate polynomial and interaction features.\n    This is the same as :code:`sklearn.preprocessing.PolynomialFeatures`,\n    but also adds the option to omit interaction features from the library.\n    Parameters\n    ----------\n    degree : integer, optional (default 2)\n        The degree of the polynomial features.\n    include_interaction : boolean, optional (default True)\n        Determines whether interaction features are produced.",
        "detail": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "documentation": {}
    },
    {
        "label": "n_poly_features",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "description": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "peekOfCode": "def n_poly_features(\n    n_in_feat: int,\n    degree: int,\n    include_bias: bool = False,\n    include_interation: bool = True,\n    interaction_only: bool = False,\n) -> int:\n    \"\"\"Calculate number of polynomial features\n    Args:\n        n_in_feat: number of input features, e.g. 3 for x, y, z",
        "detail": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "documentation": {}
    },
    {
        "label": "IdentityLibrary",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "description": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "peekOfCode": "def IdentityLibrary():\n    \"\"\"\n    Generate an identity library which maps all input features to\n    themselves. An alias for creating a degree-1 polynomial library\n    with no constant term.\n    \"\"\"\n    return PolynomialLibrary(degree=1, include_bias=False)",
        "detail": "pysindy.build.lib.pysindy.feature_library.polynomial_library",
        "documentation": {}
    },
    {
        "label": "SINDyPILibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.sindy_pi_library",
        "description": "pysindy.build.lib.pysindy.feature_library.sindy_pi_library",
        "peekOfCode": "class SINDyPILibrary(BaseFeatureLibrary):\n    \"\"\"\n    WARNING: This library is deprecated in PySINDy versions > 1.7. Please\n    use the PDE or WeakPDE libraries instead.\n    Generate a library with custom functions. The Library takes custom\n    libraries for X and Xdot respectively, and then tensor-products them\n    together. For a 3D system, a library of constant and linear terms in x_dot,\n    i.e. [1, x_dot0, ..., x_dot3], is good\n    enough for most problems and implicit terms. The function names list\n    should include both X and Xdot functions, without the mixed terms.",
        "detail": "pysindy.build.lib.pysindy.feature_library.sindy_pi_library",
        "documentation": {}
    },
    {
        "label": "WeakPDELibrary",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.feature_library.weak_pde_library",
        "description": "pysindy.build.lib.pysindy.feature_library.weak_pde_library",
        "peekOfCode": "class WeakPDELibrary(BaseFeatureLibrary):\n    \"\"\"Generate a weak formulation library with custom functions and,\n       optionally, any spatial derivatives in arbitrary dimensions.\n       The features in the weak formulation are integrals of derivatives of input data\n       multiplied by a test function phi, which are evaluated on K subdomains\n       randomly sampled across the spatiotemporal grid. Each subdomain\n       is initial generated with a size H_xt along each axis, and is then shrunk\n       such that the left and right boundaries lie on spatiotemporal grid points.\n       The expressions are integrated by parts to remove as many derivatives from the\n       input data as possible and put the derivatives onto the test functions.",
        "detail": "pysindy.build.lib.pysindy.feature_library.weak_pde_library",
        "documentation": {}
    },
    {
        "label": "_BaseOptimizer",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.base",
        "description": "pysindy.build.lib.pysindy.optimizers.base",
        "peekOfCode": "class _BaseOptimizer(BaseEstimator, abc.ABC):\n    coef_: np.ndarray[tuple[NTarget, NFeat], FloatDType]\n    intercept_: np.ndarray[tuple[NTarget], FloatDType]\n    @property\n    def complexity(self):\n        check_is_fitted(self)\n        return np.count_nonzero(self.coef_) + np.count_nonzero(self.intercept_)\nclass BaseOptimizer(LinearRegression, _BaseOptimizer):\n    \"\"\"\n    Base class for SINDy optimizers. Subclasses must implement",
        "detail": "pysindy.build.lib.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "BaseOptimizer",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.base",
        "description": "pysindy.build.lib.pysindy.optimizers.base",
        "peekOfCode": "class BaseOptimizer(LinearRegression, _BaseOptimizer):\n    \"\"\"\n    Base class for SINDy optimizers. Subclasses must implement\n    a _reduce method for carrying out the bulk of the work of\n    fitting a model.\n    Parameters\n    ----------\n    normalize_columns : boolean, optional (default False)\n        Normalize the columns of x (the SINDy library terms) before regression\n        by dividing by the L2-norm.",
        "detail": "pysindy.build.lib.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "EnsembleOptimizer",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.base",
        "description": "pysindy.build.lib.pysindy.optimizers.base",
        "peekOfCode": "class EnsembleOptimizer(BaseOptimizer):\n    \"\"\"Wrapper class for ensembling methods.\n    Parameters\n    ----------\n    opt: BaseOptimizer\n        The underlying optimizer to run on each ensemble\n    bagging : boolean, optional (default False)\n        This parameter is used to allow for \"ensembling\", i.e. the\n        generation of many SINDy models (n_models) by choosing a random\n        temporal subset of the input data (n_subset) for each sparse",
        "detail": "pysindy.build.lib.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "NFeat",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.base",
        "description": "pysindy.build.lib.pysindy.optimizers.base",
        "peekOfCode": "NFeat = NewType(\"NFeat\", int)\nNTarget = NewType(\"NTarget\", int)\ndef _rescale_data(X, y, sample_weight):\n    \"\"\"Rescale data so as to support sample_weight\"\"\"\n    n_samples = X.shape[0]\n    sample_weight = np.asarray(sample_weight)\n    if sample_weight.ndim == 0:\n        sample_weight = np.full(n_samples, sample_weight, dtype=sample_weight.dtype)\n    sample_weight = np.sqrt(sample_weight)\n    sw_matrix = sparse.dia_matrix((sample_weight, 0), shape=(n_samples, n_samples))",
        "detail": "pysindy.build.lib.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "NTarget",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.base",
        "description": "pysindy.build.lib.pysindy.optimizers.base",
        "peekOfCode": "NTarget = NewType(\"NTarget\", int)\ndef _rescale_data(X, y, sample_weight):\n    \"\"\"Rescale data so as to support sample_weight\"\"\"\n    n_samples = X.shape[0]\n    sample_weight = np.asarray(sample_weight)\n    if sample_weight.ndim == 0:\n        sample_weight = np.full(n_samples, sample_weight, dtype=sample_weight.dtype)\n    sample_weight = np.sqrt(sample_weight)\n    sw_matrix = sparse.dia_matrix((sample_weight, 0), shape=(n_samples, n_samples))\n    X = safe_sparse_dot(sw_matrix, X)",
        "detail": "pysindy.build.lib.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "ConstrainedSR3",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.constrained_sr3",
        "description": "pysindy.build.lib.pysindy.optimizers.constrained_sr3",
        "peekOfCode": "class ConstrainedSR3(SR3):\n    \"\"\"\n    Sparse relaxed regularized regression with linear (in)equality constraints.\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)\n        + (0.5 / \\\\nu)\\\\|w-u\\\\|^2_2\n    .. math::\n        \\\\text{subject to } Cw = d\n    over u and w, where :math:`R(u)` is a regularization function, C is a",
        "detail": "pysindy.build.lib.pysindy.optimizers.constrained_sr3",
        "documentation": {}
    },
    {
        "label": "FROLS",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.frols",
        "description": "pysindy.build.lib.pysindy.optimizers.frols",
        "peekOfCode": "class FROLS(BaseOptimizer):\n    \"\"\"Forward Regression Orthogonal Least-Squares (FROLS) optimizer.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteractively selecting the most correlated\n    function in the library. This is a greedy algorithm.\n    See the following reference for more details:\n        Billings, Stephen A. Nonlinear system identification:\n        NARMAX methods in the time, frequency, and spatio-temporal domains.\n        John Wiley & Sons, 2013.",
        "detail": "pysindy.build.lib.pysindy.optimizers.frols",
        "documentation": {}
    },
    {
        "label": "MIOSR",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.miosr",
        "description": "pysindy.build.lib.pysindy.optimizers.miosr",
        "peekOfCode": "class MIOSR(BaseOptimizer):\n    \"\"\"Mixed-Integer Optimized Sparse Regression.\n    Solves the sparsity constrained regression problem to provable optimality\n    .. math::\n        \\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)\n    .. math::\n        \\\\text{subject to } \\\\|w\\\\|_0 \\\\leq k\n    by using type-1 specially ordered sets (SOS1) to encode the support of\n    the coefficients. Can optionally add additional constraints on the\n    coefficients or access the gurobi model directly for advanced usage.",
        "detail": "pysindy.build.lib.pysindy.optimizers.miosr",
        "documentation": {}
    },
    {
        "label": "SBR",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.sbr",
        "description": "pysindy.build.lib.pysindy.optimizers.sbr",
        "peekOfCode": "class SBR(BaseOptimizer):\n    \"\"\"\n    Sparse Bayesian Regression (SBR) optimizer. This uses the regularised\n    horseshoe prior over the SINDy coefficients to achieve sparsification.\n    The horseshoe prior contains a \"spike\" of nonzero probability at the\n    origin, and a Student's-T-shaped \"slab\" of distribution in cases where a\n    coefficient is nonzero.\n    The SINDy coefficients are set as the posterior means of the MCMC NUTS samples.\n    Additional statistics can be computed from the MCMC samples stored in\n    the mcmc attribute using e.g. ArviZ.",
        "detail": "pysindy.build.lib.pysindy.optimizers.sbr",
        "documentation": {}
    },
    {
        "label": "SINDyPI",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.sindy_pi",
        "description": "pysindy.build.lib.pysindy.optimizers.sindy_pi",
        "peekOfCode": "class SINDyPI(SR3):\n    \"\"\"\n    SINDy-PI optimizer\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|X-Xw\\\\|^2_2 + \\\\lambda R(w)\n    over w where :math:`R(v)` is a regularization function. See the following\n    reference for more details:\n        Kaheman, Kadierdan, J. Nathan Kutz, and Steven L. Brunton. SINDy-PI:\n        a robust algorithm for parallel implicit sparse identification of",
        "detail": "pysindy.build.lib.pysindy.optimizers.sindy_pi",
        "documentation": {}
    },
    {
        "label": "SR3",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.sr3",
        "description": "pysindy.build.lib.pysindy.optimizers.sr3",
        "peekOfCode": "class SR3(BaseOptimizer):\n    \"\"\"\n    Sparse relaxed regularized regression.\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)\n        + (0.5 / \\\\nu)\\\\|w-u\\\\|^2_2\n    where :math:`R(u)` is a regularization function.\n    See the following references for more details:\n        Zheng, Peng, et al. \"A unified framework for sparse relaxed",
        "detail": "pysindy.build.lib.pysindy.optimizers.sr3",
        "documentation": {}
    },
    {
        "label": "SSR",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.ssr",
        "description": "pysindy.build.lib.pysindy.optimizers.ssr",
        "peekOfCode": "class SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.\n        \"Sparse learning of stochastic dynamical equations.\"\n        The Journal of chemical physics 148.24 (2018): 241723.\n    Parameters",
        "detail": "pysindy.build.lib.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Rows",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.ssr",
        "description": "pysindy.build.lib.pysindy.optimizers.ssr",
        "peekOfCode": "Rows = TypeVar(\"Rows\", covariant=True, bound=int)\nCols = TypeVar(\"Cols\", covariant=True, bound=int)\nFloat2D = np.ndarray[tuple[Rows, Cols], np.dtype[np.floating[NBitBase]]]\nFeatures = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`",
        "detail": "pysindy.build.lib.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Cols",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.ssr",
        "description": "pysindy.build.lib.pysindy.optimizers.ssr",
        "peekOfCode": "Cols = TypeVar(\"Cols\", covariant=True, bound=int)\nFloat2D = np.ndarray[tuple[Rows, Cols], np.dtype[np.floating[NBitBase]]]\nFeatures = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient",
        "detail": "pysindy.build.lib.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Float2D",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.ssr",
        "description": "pysindy.build.lib.pysindy.optimizers.ssr",
        "peekOfCode": "Float2D = np.ndarray[tuple[Rows, Cols], np.dtype[np.floating[NBitBase]]]\nFeatures = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:",
        "detail": "pysindy.build.lib.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Features",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.ssr",
        "description": "pysindy.build.lib.pysindy.optimizers.ssr",
        "peekOfCode": "Features = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.",
        "detail": "pysindy.build.lib.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Targets",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.ssr",
        "description": "pysindy.build.lib.pysindy.optimizers.ssr",
        "peekOfCode": "Targets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.\n        \"Sparse learning of stochastic dynamical equations.\"",
        "detail": "pysindy.build.lib.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Samples",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.ssr",
        "description": "pysindy.build.lib.pysindy.optimizers.ssr",
        "peekOfCode": "Samples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.\n        \"Sparse learning of stochastic dynamical equations.\"\n        The Journal of chemical physics 148.24 (2018): 241723.",
        "detail": "pysindy.build.lib.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "StableLinearSR3",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.stable_linear_sr3",
        "description": "pysindy.build.lib.pysindy.optimizers.stable_linear_sr3",
        "peekOfCode": "class StableLinearSR3(ConstrainedSR3):\n    \"\"\"\n    Sparse relaxed regularized regression for building a-priori\n    stable linear models. This requires making a matrix negative definite,\n    which can be challenging. Here we use a similar method to the\n    TrappingOptimizer algorithm. Linear equality and linear inequality\n    constraints are both allowed, as in the ConstrainedSR3 optimizer.\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)",
        "detail": "pysindy.build.lib.pysindy.optimizers.stable_linear_sr3",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.stlsq",
        "description": "pysindy.build.lib.pysindy.optimizers.stlsq",
        "peekOfCode": "class STLSQ(BaseOptimizer):\n    \"\"\"Sequentially thresholded least squares algorithm.\n    Defaults to doing Sequentially thresholded Ridge regression.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively performing least squares and masking out\n    elements of the weight array w that are below a given threshold.\n    See the following reference for more details:\n        Brunton, Steven L., Joshua L. Proctor, and J. Nathan Kutz.\n        \"Discovering governing equations from data by sparse",
        "detail": "pysindy.build.lib.pysindy.optimizers.stlsq",
        "documentation": {}
    },
    {
        "label": "EnstrophyMat",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "class EnstrophyMat:\n    \"\"\"Pre-compute some useful factors of an enstrophy matrix\n    The matrix, root, and root inverse are frequently used in transformation\n    between the original and enstrophy bases\n    \"\"\"\n    P: Float2D\n    P_root: Float2D\n    P_root_inv: Float2D\n    def __init__(self, P):\n        self.P = P",
        "detail": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "TrappingSR3",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "class TrappingSR3(ConstrainedSR3):\n    \"\"\"\n    Generalized trapping variant of sparse relaxed regularized regression.\n    This optimizer can be used to identify quadratically nonlinear systems with\n    either a-priori globally or locally stable (bounded) solutions.\n    This optimizer can be used to minimize five different objective functions:\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda \\\\times R(w)\n        + 0.5\\\\|Pw-A\\\\|^2_2/\\\\eta + \\\\delta_0(Cw-d)\n        + \\\\delta_{\\\\Lambda}(A) + \\\\alpha \\\\|Qijk\\\\|",
        "detail": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "TwoOrFourD",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "TwoOrFourD = TypeVar(\"TwoOrFourD\", Float2D, Float4D)\ndef _create_A_symm(\n    L_obj: TwoOrFourD,\n    M_obj: Union[Float3D, Float5D],\n    trap_ctr: Float1D,\n    ens: EnstrophyMat,\n) -> TwoOrFourD:\n    r\"\"\"Create the enstrophy/energy growth quadratic form\n    In the paper, this is :math:`A^S`.  This function can be used\n    to create either the matrix itself or a projector from SINDy coefficient",
        "detail": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "Q_Arr",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "Q_Arr = TypeVar(\"Q_Arr\", Float3D, Float5D)\ndef _permutation_asymmetry(Q_obj: Q_Arr) -> Q_Arr:\n    r\"\"\"Calculate the permutation-asymmetric part of the first 3 axes of Q\n    In the paper, this defines the directions of cubic energy growth.  It is\n    used to create :math:`\\tilde{Q}'`, its 2D flattening, :math:`H_0`,\n    and its enstrophy-basis (z-space) version, :math:`\\tilde {H_0}`\n    This works on both the true quadratic terms as well as the projector\n    onto the quadratic terms.\n    Note: The paper uses three times this quantity.\n    \"\"\"",
        "detail": "pysindy.build.lib.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "WrappedOptimizer",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.optimizers.wrapped_optimizer",
        "description": "pysindy.build.lib.pysindy.optimizers.wrapped_optimizer",
        "peekOfCode": "class WrappedOptimizer(BaseOptimizer):\n    \"\"\"Wrapper class for generic optimizers/sparse regression methods\n    Enables single target regressors (i.e. those whose predictions are\n    1-dimensional) to perform multi target regression (i.e. predictions\n    are 2-dimensional).  Also allows unbiasing & normalization for\n    optimizers that would otherwise not include it.\n    Args:\n        optimizer: wrapped optimizer/sparse regression method\n    Parameters\n    ----------",
        "detail": "pysindy.build.lib.pysindy.optimizers.wrapped_optimizer",
        "documentation": {}
    },
    {
        "label": "COEF_THRESHOLD",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.optimizers.wrapped_optimizer",
        "description": "pysindy.build.lib.pysindy.optimizers.wrapped_optimizer",
        "peekOfCode": "COEF_THRESHOLD = 1e-14\nclass WrappedOptimizer(BaseOptimizer):\n    \"\"\"Wrapper class for generic optimizers/sparse regression methods\n    Enables single target regressors (i.e. those whose predictions are\n    1-dimensional) to perform multi target regression (i.e. predictions\n    are 2-dimensional).  Also allows unbiasing & normalization for\n    optimizers that would otherwise not include it.\n    Args:\n        optimizer: wrapped optimizer/sparse regression method\n    Parameters",
        "detail": "pysindy.build.lib.pysindy.optimizers.wrapped_optimizer",
        "documentation": {}
    },
    {
        "label": "AX_TIME",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils._axis_conventions",
        "description": "pysindy.build.lib.pysindy.utils._axis_conventions",
        "peekOfCode": "AX_TIME = -2\nAX_COORD = -1",
        "detail": "pysindy.build.lib.pysindy.utils._axis_conventions",
        "documentation": {}
    },
    {
        "label": "AX_COORD",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils._axis_conventions",
        "description": "pysindy.build.lib.pysindy.utils._axis_conventions",
        "peekOfCode": "AX_COORD = -1",
        "detail": "pysindy.build.lib.pysindy.utils._axis_conventions",
        "documentation": {}
    },
    {
        "label": "_Sentinels",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "class _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(\n        self,\n        axes: dict[str, Union[int, Sequence[int]]],",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "_AxisMapping",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "class _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(\n        self,\n        axes: dict[str, Union[int, Sequence[int]]],\n        in_ndim: int,\n    ):\n        self.fwd_map = {}",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "AxesArray",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "class AxesArray(np.lib.mixins.NDArrayOperatorsMixin, np.ndarray):\n    \"\"\"A numpy-like array that keeps track of the meaning of its axes.\n    Limitations:\n    * Not all numpy functions, such as ``np.flatten()``, have an\n      implementation for ``AxesArray``.  In such cases a regular numpy array\n      is returned.\n    * For functions that are implemented for `AxesArray`, such as\n      ``np.reshape()``, use the numpy function rather than the bound\n      method (e.g. ``arr.reshape``)\n    * Such functions may raise ``ValueError`` where numpy would not, when",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "SampleConcatter",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "class SampleConcatter(TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self, x_list, y_list):\n        return self\n    def __sklearn_is_fitted__(self):\n        return True\n    def transform(self, x_list):\n        return concat_sample_axis(x_list)\ndef concat_sample_axis(x_list: List[AxesArray]):",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "ravel",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def ravel(a, order=\"C\"):\n    out = np.ravel(np.asarray(a), order=order)\n    is_1d_already = len(a.shape) == 1\n    if is_1d_already:\n        return AxesArray(out, a.axes)\n    else:\n        return AxesArray(out, {\"ax_unk\": 0})\n@_implements(np.ix_)\ndef ix_(*args: AxesArray):\n    calc = np.ix_(*(np.asarray(arg) for arg in args))",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "ix_",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def ix_(*args: AxesArray):\n    calc = np.ix_(*(np.asarray(arg) for arg in args))\n    ax_names = [list(arr.axes)[0] for arr in args]\n    axes = fwd_from_names(ax_names)\n    return tuple(AxesArray(arr, axes) for arr in calc)\n@_implements(np.concatenate)\ndef concatenate(arrays, axis=0, out=None, dtype=None, casting=\"same_kind\"):\n    parents = [np.asarray(obj) for obj in arrays]\n    ax_list = [obj.axes for obj in arrays if isinstance(obj, AxesArray)]\n    for ax1, ax2 in zip(ax_list[:-1], ax_list[1:]):",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "concatenate",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def concatenate(arrays, axis=0, out=None, dtype=None, casting=\"same_kind\"):\n    parents = [np.asarray(obj) for obj in arrays]\n    ax_list = [obj.axes for obj in arrays if isinstance(obj, AxesArray)]\n    for ax1, ax2 in zip(ax_list[:-1], ax_list[1:]):\n        if ax1 != ax2:\n            raise ValueError(\"Concatenating >1 AxesArray with incompatible axes\")\n    result = np.concatenate(parents, axis, out=out, dtype=dtype, casting=casting)\n    if isinstance(out, AxesArray):\n        out._ax_map = _AxisMapping(ax_list[0], in_ndim=result.ndim)\n    return AxesArray(result, axes=ax_list[0])",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "reshape",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def reshape(a: AxesArray, newshape: int | tuple[int], order=\"C\"):\n    \"\"\"Gives a new shape to an array without changing its data.\n    Args:\n        a: Array to be reshaped\n        newshape: int or tuple of ints\n            The new shape should be compatible with the original shape.  In\n            addition, the axis labels must make sense when the data is\n            translated to a new shape.  Currently, the only use case supported\n            is to flatten an outer product of two or more axes with the same\n            label and size.",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "transpose",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def transpose(a: AxesArray, axes: Optional[Union[Tuple[int], List[int]]] = None):\n    \"\"\"Returns an array with axes transposed.\n    Args:\n        a: input array\n        axes: As the numpy function\n    \"\"\"\n    out = np.transpose(np.asarray(a), axes)\n    if axes is None:\n        axes = range(a.ndim)[::-1]\n    new_axes = {}",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "einsum",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def einsum(\n    subscripts: str, *operands: AxesArray, out: Optional[NDArray] = None, **kwargs\n) -> AxesArray:\n    calc = np.einsum(\n        subscripts, *(np.asarray(arr) for arr in operands), out=out, **kwargs\n    )\n    try:\n        # explicit mode\n        lscripts, rscript = subscripts.split(\"->\")\n    except ValueError:",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "linalg_solve",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def linalg_solve(a: AxesArray, b: AxesArray) -> AxesArray:\n    result = np.linalg.solve(np.asarray(a), np.asarray(b))\n    a_rev = a._ax_map.reverse_map\n    a_names = [a_rev[k] for k in sorted(a_rev)]\n    contracted_axis_name = a_names[-1]\n    b_rev = b._ax_map.reverse_map\n    b_names = [b_rev[k] for k in sorted(b_rev)]\n    match_axes_list = a_names[:-1]\n    start = max(b.ndim - a.ndim, 0)\n    end = start + len(match_axes_list)",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "tensordot",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def tensordot(\n    a: AxesArray, b: AxesArray, axes: Union[int, Sequence[Sequence[int]]] = 2\n) -> AxesArray:\n    sub = _tensordot_to_einsum(a.ndim, b.ndim, axes)\n    return einsum(sub, a, b)\ndef _tensordot_to_einsum(\n    a_ndim: int, b_ndim: int, axes: Union[int, Sequence[Sequence[int]]]\n) -> str:\n    lc_ord = range(97, 123)\n    sub_a = \"\".join([chr(code) for code in lc_ord[:a_ndim]])",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "comprehend_axes",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def comprehend_axes(x):\n    axes = {}\n    axes[\"ax_coord\"] = len(x.shape) - 1\n    axes[\"ax_time\"] = len(x.shape) - 2\n    if x.ndim > 2:\n        axes[\"ax_spatial\"] = list(range(len(x.shape) - 2))\n    return axes\nclass SampleConcatter(TransformerMixin):\n    def __init__(self):\n        pass",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "concat_sample_axis",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def concat_sample_axis(x_list: List[AxesArray]):\n    \"\"\"Concatenate all trajectories and axes used to create samples.\"\"\"\n    new_arrs = []\n    for x in x_list:\n        sample_ax_names = (\"ax_spatial\", \"ax_time\", \"ax_sample\")\n        sample_ax_inds = []\n        for name in sample_ax_names:\n            ax_inds = getattr(x, name, [])\n            if isinstance(ax_inds, int):\n                ax_inds = [ax_inds]",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "wrap_axes",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def wrap_axes(axes: dict, obj):\n    \"\"\"Add axes to object (usually, a sparse matrix)\"\"\"\n    for key in [\"ax_spatial\", \"ax_time\", \"ax_sample\", \"ax_coord\"]:\n        try:\n            obj.__setattr__(key, axes[key])\n        except KeyError:\n            pass\n    return obj\ndef compat_dict_append(\n    compat_dict: CompatDict[T],",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "compat_dict_append",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def compat_dict_append(\n    compat_dict: CompatDict[T],\n    key: str,\n    item_or_list: ItemOrList[T],\n) -> None:\n    \"\"\"Add an element or list of elements to a dictionary, preserving old values\"\"\"\n    try:\n        prev_val = compat_dict[key]\n    except KeyError:\n        compat_dict[key] = item_or_list",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "fwd_from_names",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "def fwd_from_names(names: List[str]) -> CompatDict[int]:\n    \"\"\"Create mapping of name: axis or name: [ax_1, ax_2, ...]\"\"\"\n    fwd_map: Dict[str, Sequence[int]] = {}\n    for ax_ind, name in enumerate(names):\n        compat_dict_append(fwd_map, name, [ax_ind])\n    return fwd_map",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "HANDLED_FUNCTIONS",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "HANDLED_FUNCTIONS = {}\nAxesWarning = type(\"AxesWarning\", (SyntaxWarning,), {})\nBasicIndexer = Union[slice, int, type(Ellipsis), None, str]\nIndexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "AxesWarning",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "AxesWarning = type(\"AxesWarning\", (SyntaxWarning,), {})\nBasicIndexer = Union[slice, int, type(Ellipsis), None, str]\nIndexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "BasicIndexer",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "BasicIndexer = Union[slice, int, type(Ellipsis), None, str]\nIndexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "Indexer",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "Indexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "StandardIndexer",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "StandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "OldIndex",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "OldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "KeyIndex",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "KeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "NewIndex",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "NewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "T = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "ItemOrList",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "ItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "CompatDict",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.axes",
        "description": "pysindy.build.lib.pysindy.utils.axes",
        "peekOfCode": "CompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(\n        self,",
        "detail": "pysindy.build.lib.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "flatten_2d_tall",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def flatten_2d_tall(x):\n    return x.reshape(x.size // x.shape[-1], x.shape[-1])\ndef validate_input(x, t=T_DEFAULT):\n    \"\"\"Forces input data to have compatible dimensions, if possible.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate\n        index on second axis.",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "validate_input",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def validate_input(x, t=T_DEFAULT):\n    \"\"\"Forces input data to have compatible dimensions, if possible.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate\n        index on second axis.\n    \"\"\"\n    if not isinstance(x, np.ndarray):",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "validate_no_reshape",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def validate_no_reshape(x, t: Union[float, np.ndarray, object] = T_DEFAULT):\n    \"\"\"Check types and numerical sensibility of arguments.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate\n        index on second axis.\n    \"\"\"\n    if not hasattr(x, \"shape\"):",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "validate_control_variables",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def validate_control_variables(\n    x: Sequence[AxesArray], u: Sequence[AxesArray], trim_last_point: bool = False\n) -> None:\n    \"\"\"Ensure that control variables u are compatible with the data x.\n    Args:\n        x: trajectories of system variables\n        u: trajectories of control variables\n        trim_last_point: whether to remove last time point of controls\n    \"\"\"\n    if not isinstance(x, Sequence):",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "drop_nan_samples",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def drop_nan_samples(x, y):\n    \"\"\"Drops samples from x and y where either has a nan value\"\"\"\n    x_non_sample_axes = tuple(ax for ax in range(x.ndim) if ax != x.ax_sample)\n    y_non_sample_axes = tuple(ax for ax in range(y.ndim) if ax != y.ax_sample)\n    x_good_samples = (~np.isnan(x)).any(axis=x_non_sample_axes)\n    y_good_samples = (~np.isnan(y)).any(axis=y_non_sample_axes)\n    good_sample_ind = np.nonzero(x_good_samples & y_good_samples)[0]\n    x = x.take(good_sample_ind, axis=x.ax_sample)\n    y = y.take(good_sample_ind, axis=y.ax_sample)\n    return x, y",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "reorder_constraints",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def reorder_constraints(arr, n_features, output_order=\"feature\"):\n    \"\"\"Switch between 'feature' and 'target' constraint order.\"\"\"\n    warnings.warn(\"Target format constraints are deprecated.\", stacklevel=2)\n    n_constraints = arr.shape[0] if arr.ndim > 1 else 1\n    n_tgt = arr.size // n_features // n_constraints\n    if output_order == \"feature\":\n        starting_shape = (n_constraints, n_tgt, n_features)\n    else:\n        starting_shape = (n_constraints, n_features, n_tgt)\n    return arr.reshape(starting_shape).transpose([0, 2, 1]).reshape((n_constraints, -1))",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "get_prox",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def get_prox(\n    regularization: str,\n) -> Callable[\n    [NDArray[np.float64], Union[float, NDArray[np.float64]]], NDArray[np.float64]\n]:\n    \"\"\"\n    Args:\n    -----\n    regularization: 'l0' | 'weighted_l0' | 'l1' | 'weighted_l1' | 'l2' | 'weighted_l2'\n    Returns:",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "get_regularization",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def get_regularization(\n    regularization: str,\n) -> Callable[[NDArray[np.float64], Union[float, NDArray[np.float64]]], float]:\n    \"\"\"\n    Args:\n    -----\n    regularization: 'l0' | 'weighted_l0' | 'l1' | 'weighted_l1' | 'l2' | 'weighted_l2'\n    Returns:\n    --------\n    regularization_function: (x: np.array, reg_weight: float | np.array) -> np.array",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "capped_simplex_projection",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def capped_simplex_projection(trimming_array, trimming_fraction):\n    \"\"\"Projection of trimming_array onto the capped simplex\"\"\"\n    a = np.min(trimming_array) - 1.0\n    b = np.max(trimming_array) - 0.0\n    def f(x):\n        return (\n            np.sum(np.maximum(np.minimum(trimming_array - x, 1.0), 0.0))\n            - (1.0 - trimming_fraction) * trimming_array.size\n        )\n    x = bisect(f, a, b)",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "supports_multiple_targets",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "def supports_multiple_targets(estimator):\n    \"\"\"Checks whether estimator supports multiple targets.\"\"\"\n    if isinstance(estimator, MultiOutputMixin):\n        return True\n    try:\n        return estimator._more_tags()[\"multioutput\"]\n    except (AttributeError, KeyError):\n        return False",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "T_DEFAULT",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.utils.base",
        "description": "pysindy.build.lib.pysindy.utils.base",
        "peekOfCode": "T_DEFAULT = object()\ndef flatten_2d_tall(x):\n    return x.reshape(x.size // x.shape[-1], x.shape[-1])\ndef validate_input(x, t=T_DEFAULT):\n    \"\"\"Forces input data to have compatible dimensions, if possible.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate",
        "detail": "pysindy.build.lib.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "linear_damped_SHO",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def linear_damped_SHO(t, x):\n    return [-0.1 * x[0] + 2 * x[1], -2 * x[0] - 0.1 * x[1]]\n# Cubic, damped harmonic oscillator\ndef cubic_damped_SHO(t, x):\n    return [\n        -0.1 * x[0] ** 3 + 2 * x[1] ** 3,\n        -2 * x[0] ** 3 - 0.1 * x[1] ** 3,\n    ]\n# Linear 3D toy system\ndef linear_3D(t, x):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "cubic_damped_SHO",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def cubic_damped_SHO(t, x):\n    return [\n        -0.1 * x[0] ** 3 + 2 * x[1] ** 3,\n        -2 * x[0] ** 3 - 0.1 * x[1] ** 3,\n    ]\n# Linear 3D toy system\ndef linear_3D(t, x):\n    return [-0.1 * x[0] + 2 * x[1], -2 * x[0] - 0.1 * x[1], -0.3 * x[2]]\n# Van der Pol ODE\ndef van_der_pol(t, x, p=[0.5]):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "linear_3D",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def linear_3D(t, x):\n    return [-0.1 * x[0] + 2 * x[1], -2 * x[0] - 0.1 * x[1], -0.3 * x[2]]\n# Van der Pol ODE\ndef van_der_pol(t, x, p=[0.5]):\n    return [x[1], p[0] * (1 - x[0] ** 2) * x[1] - x[0]]\n# Duffing ODE\ndef duffing(t, x, p=[0.2, 0.05, 1]):\n    return [x[1], -p[0] * x[1] - p[1] * x[0] - p[2] * x[0] ** 3]\n# Lotka model\ndef lotka(t, x, p=[1, 10]):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "van_der_pol",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def van_der_pol(t, x, p=[0.5]):\n    return [x[1], p[0] * (1 - x[0] ** 2) * x[1] - x[0]]\n# Duffing ODE\ndef duffing(t, x, p=[0.2, 0.05, 1]):\n    return [x[1], -p[0] * x[1] - p[1] * x[0] - p[2] * x[0] ** 3]\n# Lotka model\ndef lotka(t, x, p=[1, 10]):\n    return [p[0] * x[0] - p[1] * x[0] * x[1], p[1] * x[0] * x[1] - 2 * p[0] * x[1]]\n# Generic cubic oscillator model\ndef cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "duffing",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def duffing(t, x, p=[0.2, 0.05, 1]):\n    return [x[1], -p[0] * x[1] - p[1] * x[0] - p[2] * x[0] ** 3]\n# Lotka model\ndef lotka(t, x, p=[1, 10]):\n    return [p[0] * x[0] - p[1] * x[0] * x[1], p[1] * x[0] * x[1] - 2 * p[0] * x[1]]\n# Generic cubic oscillator model\ndef cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):\n    return [p[0] * x[0] ** 3 + p[1] * x[1] ** 3, p[2] * x[0] ** 3 + p[3] * x[1] ** 3]\n# Rossler model\ndef rossler(t, x, p=[0.2, 0.2, 5.7]):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lotka",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def lotka(t, x, p=[1, 10]):\n    return [p[0] * x[0] - p[1] * x[0] * x[1], p[1] * x[0] * x[1] - 2 * p[0] * x[1]]\n# Generic cubic oscillator model\ndef cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):\n    return [p[0] * x[0] ** 3 + p[1] * x[1] ** 3, p[2] * x[0] ** 3 + p[3] * x[1] ** 3]\n# Rossler model\ndef rossler(t, x, p=[0.2, 0.2, 5.7]):\n    return [-x[1] - x[2], x[0] + p[0] * x[1], p[1] + (x[0] - p[2]) * x[2]]\n# Hopf bifurcation model\ndef hopf(t, x, mu=-0.05, omega=1, A=1):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "cubic_oscillator",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):\n    return [p[0] * x[0] ** 3 + p[1] * x[1] ** 3, p[2] * x[0] ** 3 + p[3] * x[1] ** 3]\n# Rossler model\ndef rossler(t, x, p=[0.2, 0.2, 5.7]):\n    return [-x[1] - x[2], x[0] + p[0] * x[1], p[1] + (x[0] - p[2]) * x[2]]\n# Hopf bifurcation model\ndef hopf(t, x, mu=-0.05, omega=1, A=1):\n    return [\n        mu * x[0] - omega * x[1] - A * x[0] * (x[0] ** 2 + x[1] ** 2),\n        omega * x[0] + mu * x[1] - A * x[1] * (x[0] ** 2 + x[1] ** 2),",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "rossler",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def rossler(t, x, p=[0.2, 0.2, 5.7]):\n    return [-x[1] - x[2], x[0] + p[0] * x[1], p[1] + (x[0] - p[2]) * x[2]]\n# Hopf bifurcation model\ndef hopf(t, x, mu=-0.05, omega=1, A=1):\n    return [\n        mu * x[0] - omega * x[1] - A * x[0] * (x[0] ** 2 + x[1] ** 2),\n        omega * x[0] + mu * x[1] - A * x[1] * (x[0] ** 2 + x[1] ** 2),\n    ]\n# Logistic map model\ndef logistic_map(x, mu):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "hopf",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def hopf(t, x, mu=-0.05, omega=1, A=1):\n    return [\n        mu * x[0] - omega * x[1] - A * x[0] * (x[0] ** 2 + x[1] ** 2),\n        omega * x[0] + mu * x[1] - A * x[1] * (x[0] ** 2 + x[1] ** 2),\n    ]\n# Logistic map model\ndef logistic_map(x, mu):\n    return mu * x * (1 - x)\n# Logistic map model with linear control input\ndef logistic_map_control(x, mu, u):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def logistic_map(x, mu):\n    return mu * x * (1 - x)\n# Logistic map model with linear control input\ndef logistic_map_control(x, mu, u):\n    return mu * x * (1 - x) + u\n# Logistic map model with other control input\ndef logistic_map_multicontrol(x, mu, u):\n    return mu * x * (1 - x) + u[0] * u[1]\n# Lorenz model\ndef lorenz(t, x, sigma=10, beta=2.66667, rho=28):",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map_control",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def logistic_map_control(x, mu, u):\n    return mu * x * (1 - x) + u\n# Logistic map model with other control input\ndef logistic_map_multicontrol(x, mu, u):\n    return mu * x * (1 - x) + u[0] * u[1]\n# Lorenz model\ndef lorenz(t, x, sigma=10, beta=2.66667, rho=28):\n    return [\n        sigma * (x[1] - x[0]),\n        x[0] * (rho - x[2]) - x[1],",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map_multicontrol",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def logistic_map_multicontrol(x, mu, u):\n    return mu * x * (1 - x) + u[0] * u[1]\n# Lorenz model\ndef lorenz(t, x, sigma=10, beta=2.66667, rho=28):\n    return [\n        sigma * (x[1] - x[0]),\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2],\n    ]\n# Sample control input for Lorenz + control",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def lorenz(t, x, sigma=10, beta=2.66667, rho=28):\n    return [\n        sigma * (x[1] - x[0]),\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2],\n    ]\n# Sample control input for Lorenz + control\ndef lorenz_u(t):\n    return np.column_stack([np.sin(2 * t) ** 2, t**2])\n# Lorenz equations with control input",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz_u",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def lorenz_u(t):\n    return np.column_stack([np.sin(2 * t) ** 2, t**2])\n# Lorenz equations with control input\ndef lorenz_control(t, x, u_fun, sigma=10, beta=2.66667, rho=28):\n    u = u_fun(t)\n    return [\n        sigma * (x[1] - x[0]) + u[0, 0],\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2] - u[0, 1],\n    ]",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz_control",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def lorenz_control(t, x, u_fun, sigma=10, beta=2.66667, rho=28):\n    u = u_fun(t)\n    return [\n        sigma * (x[1] - x[0]) + u[0, 0],\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2] - u[0, 1],\n    ]\n# Mean field model from Noack et al. 2003\n# \"A hierarchy of low-dimensional models for the transient and post-transient\n# cylinder wake\", B.R. Noack et al.",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "meanfield",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def meanfield(t, x, mu=0.01):\n    return [\n        mu * x[0] - x[1] - x[0] * x[2],\n        mu * x[1] + x[0] - x[1] * x[2],\n        -x[2] + x[0] ** 2 + x[1] ** 2,\n    ]\n# Atmospheric oscillator from Tuwankotta et al and Trapping SINDy paper\ndef oscillator(t, x, mu1=0.05, mu2=-0.01, omega=3.0, alpha=-2.0, beta=-5.0, sigma=1.1):\n    return [\n        mu1 * x[0] + sigma * x[0] * x[1],",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "oscillator",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def oscillator(t, x, mu1=0.05, mu2=-0.01, omega=3.0, alpha=-2.0, beta=-5.0, sigma=1.1):\n    return [\n        mu1 * x[0] + sigma * x[0] * x[1],\n        mu2 * x[1] + (omega + alpha * x[1] + beta * x[2]) * x[2] - sigma * x[0] ** 2,\n        mu2 * x[2] - (omega + alpha * x[1] + beta * x[2]) * x[1],\n    ]\n# Carbone and Veltri triadic MHD model\ndef mhd(t, x, nu=0.0, mu=0.0, sigma=0.0):\n    return [\n        -2 * nu * x[0] + 4.0 * (x[1] * x[2] - x[4] * x[5]),",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "mhd",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def mhd(t, x, nu=0.0, mu=0.0, sigma=0.0):\n    return [\n        -2 * nu * x[0] + 4.0 * (x[1] * x[2] - x[4] * x[5]),\n        -5 * nu * x[1] - 7.0 * (x[0] * x[2] - x[3] * x[5]),\n        -9 * nu * x[2] + 3.0 * (x[0] * x[1] - x[3] * x[4]),\n        -2 * mu * x[4] + 2.0 * (x[5] * x[1] - x[2] * x[4]),\n        -5 * mu * x[4] + sigma * x[5] + 5.0 * (x[2] * x[3] - x[0] * x[5]),\n        -9 * mu * x[5] + sigma * x[4] + 9.0 * (x[4] * x[0] - x[1] * x[3]),\n    ]\n# Galerkin coefficients for the Burgers' equation in Noack et al. 2008",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "burgers_galerkin",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def burgers_galerkin(sigma=0.1, nu=0.025, U=1.0):\n    r = 10\n    L = np.zeros([r, r])\n    for i in range(r // 2):\n        # Dissipation\n        L[2 * i, 2 * i] = -nu * (i + 1) ** 2\n        L[2 * i + 1, 2 * i + 1] = -nu * (i + 1) ** 2\n        # Mean flow advection\n        L[2 * i, 2 * i + 1] = -(i + 1) * U\n        L[2 * i + 1, 2 * i] = (i + 1) * U",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "enzyme",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def enzyme(t, x, jx=0.6, Vmax=1.5, Km=0.3):\n    return jx - Vmax * x / (Km + x)\n# Bacterial competence system (Mangan et al. 2016)\ndef bacterial(t, x, a1=0.004, a2=0.07, a3=0.04, b1=0.82, b2=1854.5):\n    return [\n        a1 + a2 * x[0] ** 2 / (a3 + x[0] ** 2) - x[0] / (1 + x[0] + x[1]),\n        b1 / (1 + b2 * x[0] ** 5) - x[1] / (1 + x[0] + x[1]),\n    ]\n# yeast glycolysis model, note that there are many typos in the sindy-pi paper\ndef yeast(",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "bacterial",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def bacterial(t, x, a1=0.004, a2=0.07, a3=0.04, b1=0.82, b2=1854.5):\n    return [\n        a1 + a2 * x[0] ** 2 / (a3 + x[0] ** 2) - x[0] / (1 + x[0] + x[1]),\n        b1 / (1 + b2 * x[0] ** 5) - x[1] / (1 + x[0] + x[1]),\n    ]\n# yeast glycolysis model, note that there are many typos in the sindy-pi paper\ndef yeast(\n    t,\n    x,\n    c1=2.5,",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "yeast",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def yeast(\n    t,\n    x,\n    c1=2.5,\n    c2=-100,\n    c3=13.6769,\n    d1=200,\n    d2=13.6769,\n    d3=-6,\n    d4=-6,",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "pendulum_on_cart",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def pendulum_on_cart(t, x, m=1, M=1, L=1, F=0, g=9.81):\n    return [\n        x[2],\n        x[3],\n        (\n            (M + m) * g * np.sin(x[0])\n            - F * np.cos(x[0])\n            - m * L * np.sin(x[0]) * np.cos(x[0]) * x[2] ** 2\n        )\n        / (L * (M + m * np.sin(x[0]) ** 2)),",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "f_steer",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def f_steer(\n    x,\n    u,\n    min_sangle=-0.91,\n    max_sangle=0.91,\n    min_svel=-0.4,\n    max_svel=0.4,\n    min_vel=-13.9,\n    max_vel=45.8,\n    switch_vel=4.755,",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "f_acc",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def f_acc(\n    y,\n    u,\n    min_sangle=-0.91,\n    max_sangle=0.91,\n    min_svel=-0.4,\n    max_svel=0.4,\n    min_vel=-13.9,\n    max_vel=45.8,\n    switch_vel=4.755,",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "kinematic_commonroad",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def kinematic_commonroad(t, x, u_fun, amax=11.5, lwb=2.391):\n    u = u_fun(t)\n    return [\n        x[3] * np.cos(x[4]),\n        x[3] * np.sin(x[4]),\n        f_steer(x[0], u[0, 0]),\n        f_acc(x[1], u[0, 1]),\n        x[1] * np.tan(x[0]) / lwb,\n    ]\n# Infamous double pendulum problem (frictionless if k1=k2=0)",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "double_pendulum",
        "kind": 2,
        "importPath": "pysindy.build.lib.pysindy.utils.odes",
        "description": "pysindy.build.lib.pysindy.utils.odes",
        "peekOfCode": "def double_pendulum(\n    t,\n    x,\n    m1=0.2704,\n    m2=0.2056,\n    a1=0.191,\n    a2=0.1621,\n    L1=0.2667,\n    L2=0.2667,\n    I1=0.003,",
        "detail": "pysindy.build.lib.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "NpFlt",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "NpFlt = np.floating[npt.NBitBase]\nFloatDType = np.dtype[np.floating[npt.NBitBase]]\nInt1D = np.ndarray[tuple[int], np.dtype[np.int_]]\nFloat1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "FloatDType",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "FloatDType = np.dtype[np.floating[npt.NBitBase]]\nInt1D = np.ndarray[tuple[int], np.dtype[np.int_]]\nFloat1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Int1D",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "Int1D = np.ndarray[tuple[int], np.dtype[np.int_]]\nFloat1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float1D",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "Float1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float2D",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "Float2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float3D",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "Float3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float4D",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "Float4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float5D",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "Float5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "FloatND",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy._typing",
        "description": "pysindy.build.lib.pysindy._typing",
        "peekOfCode": "FloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.build.lib.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "_BaseSINDy",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.pysindy",
        "description": "pysindy.build.lib.pysindy.pysindy",
        "peekOfCode": "class _BaseSINDy(BaseEstimator, ABC):\n    feature_library: BaseFeatureLibrary\n    optimizer: _BaseOptimizer\n    discrete_time: bool\n    model: Pipeline\n    feature_names: Optional[list[str]]\n    # Hacks to remove later\n    discrete_time: bool = False\n    n_control_features_: int = 0\n    @abstractmethod",
        "detail": "pysindy.build.lib.pysindy.pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "kind": 6,
        "importPath": "pysindy.build.lib.pysindy.pysindy",
        "description": "pysindy.build.lib.pysindy.pysindy",
        "peekOfCode": "class SINDy(_BaseSINDy):\n    \"\"\"\n    Sparse Identification of Nonlinear Dynamical Systems (SINDy).\n    Uses sparse regression to learn a dynamical systems model from measurement data.\n    Parameters\n    ----------\n    optimizer : optimizer object, optional\n        Optimization method used to fit the SINDy model. This must be a class\n        extending :class:`pysindy.optimizers.BaseOptimizer`.\n        The default is :class:`STLSQ`.",
        "detail": "pysindy.build.lib.pysindy.pysindy",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.version",
        "description": "pysindy.build.lib.pysindy.version",
        "peekOfCode": "__all__ = [\"__version__\", \"__version_tuple__\", \"version\", \"version_tuple\"]\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\nversion: str\n__version__: str",
        "detail": "pysindy.build.lib.pysindy.version",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.version",
        "description": "pysindy.build.lib.pysindy.version",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE",
        "detail": "pysindy.build.lib.pysindy.version",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.version",
        "description": "pysindy.build.lib.pysindy.version",
        "peekOfCode": "__version__ = version = '1.7.6.dev523+g04f2dc2'\n__version_tuple__ = version_tuple = (1, 7, 6, 'dev523', 'g04f2dc2')",
        "detail": "pysindy.build.lib.pysindy.version",
        "documentation": {}
    },
    {
        "label": "__version_tuple__",
        "kind": 5,
        "importPath": "pysindy.build.lib.pysindy.version",
        "description": "pysindy.build.lib.pysindy.version",
        "peekOfCode": "__version_tuple__ = version_tuple = (1, 7, 6, 'dev523', 'g04f2dc2')",
        "detail": "pysindy.build.lib.pysindy.version",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "pysindy.docs.Youtube.generate_data",
        "description": "pysindy.docs.Youtube.generate_data",
        "peekOfCode": "def f(x, t):\n    return [np.sin(2 * x[1]), 1 - np.cos(x[0])]\ndt = 0.01\nt_train = np.arange(0, 10, dt)\nx0_train = [1, 2]\nx_train = odeint(f, x0_train, t_train)\nwith open(\"data.npy\", \"wb\") as file:\n    np.save(file, x_train)",
        "detail": "pysindy.docs.Youtube.generate_data",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.docs.Youtube.generate_data",
        "description": "pysindy.docs.Youtube.generate_data",
        "peekOfCode": "dt = 0.01\nt_train = np.arange(0, 10, dt)\nx0_train = [1, 2]\nx_train = odeint(f, x0_train, t_train)\nwith open(\"data.npy\", \"wb\") as file:\n    np.save(file, x_train)",
        "detail": "pysindy.docs.Youtube.generate_data",
        "documentation": {}
    },
    {
        "label": "t_train",
        "kind": 5,
        "importPath": "pysindy.docs.Youtube.generate_data",
        "description": "pysindy.docs.Youtube.generate_data",
        "peekOfCode": "t_train = np.arange(0, 10, dt)\nx0_train = [1, 2]\nx_train = odeint(f, x0_train, t_train)\nwith open(\"data.npy\", \"wb\") as file:\n    np.save(file, x_train)",
        "detail": "pysindy.docs.Youtube.generate_data",
        "documentation": {}
    },
    {
        "label": "x0_train",
        "kind": 5,
        "importPath": "pysindy.docs.Youtube.generate_data",
        "description": "pysindy.docs.Youtube.generate_data",
        "peekOfCode": "x0_train = [1, 2]\nx_train = odeint(f, x0_train, t_train)\nwith open(\"data.npy\", \"wb\") as file:\n    np.save(file, x_train)",
        "detail": "pysindy.docs.Youtube.generate_data",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.docs.Youtube.generate_data",
        "description": "pysindy.docs.Youtube.generate_data",
        "peekOfCode": "x_train = odeint(f, x0_train, t_train)\nwith open(\"data.npy\", \"wb\") as file:\n    np.save(file, x_train)",
        "detail": "pysindy.docs.Youtube.generate_data",
        "documentation": {}
    },
    {
        "label": "PysindyExample",
        "kind": 6,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "class PysindyExample(SphinxDirective):\n    required_arguments = 0\n    optional_arguments = 0\n    option_spec = {\"key\": str, \"title\": str}\n    has_content = True\n    def run(self) -> list[nodes.Node]:\n        key = self.options[\"key\"]\n        example_config = _load_ext_config((here / \"../examples\").resolve())\n        try:\n            this_example = [ex for ex in example_config if ex[\"name\"] == key][0]",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "parse_keys_section",
        "kind": 2,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "def parse_keys_section(self, section):\n    return self._format_fields(\"Keys\", self._consume_fields())\nGoogleDocstring._parse_keys_section = parse_keys_section\ndef parse_attributes_section(self, section):\n    return self._format_fields(\"Attributes\", self._consume_fields())\nGoogleDocstring._parse_attributes_section = parse_attributes_section\ndef parse_class_attributes_section(self, section):\n    return self._format_fields(\"Class Attributes\", self._consume_fields())\nGoogleDocstring._parse_class_attributes_section = parse_class_attributes_section",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "parse_attributes_section",
        "kind": 2,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "def parse_attributes_section(self, section):\n    return self._format_fields(\"Attributes\", self._consume_fields())\nGoogleDocstring._parse_attributes_section = parse_attributes_section\ndef parse_class_attributes_section(self, section):\n    return self._format_fields(\"Class Attributes\", self._consume_fields())\nGoogleDocstring._parse_class_attributes_section = parse_class_attributes_section\ndef patched_parse(self):\n    \"\"\"\n    we now patch the parse method to guarantee that the the above methods are\n    assigned to the _section dict",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "parse_class_attributes_section",
        "kind": 2,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "def parse_class_attributes_section(self, section):\n    return self._format_fields(\"Class Attributes\", self._consume_fields())\nGoogleDocstring._parse_class_attributes_section = parse_class_attributes_section\ndef patched_parse(self):\n    \"\"\"\n    we now patch the parse method to guarantee that the the above methods are\n    assigned to the _section dict\n    \"\"\"\n    self._sections[\"keys\"] = self._parse_keys_section\n    self._sections[\"class attributes\"] = self._parse_class_attributes_section",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "patched_parse",
        "kind": 2,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "def patched_parse(self):\n    \"\"\"\n    we now patch the parse method to guarantee that the the above methods are\n    assigned to the _section dict\n    \"\"\"\n    self._sections[\"keys\"] = self._parse_keys_section\n    self._sections[\"class attributes\"] = self._parse_class_attributes_section\n    self._unpatched_parse()\nGoogleDocstring._unpatched_parse = GoogleDocstring._parse\nGoogleDocstring._parse = patched_parse",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "def setup(app: Sphinx):\n    \"\"\"Our sphinx extension for copying from examples/ to docs/examples\n    Since nbsphinx does not handle glob/regex paths, we need to\n    manually copy documentation source files from examples.  See issue\n    # 230.\n    \"\"\"\n    doc_examples = here / \"examples\"\n    if not doc_examples.exists():\n        (here / \"examples\").mkdir()\n    example_source = (here / \"../examples\").resolve()",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "fetch_notebook_list",
        "kind": 2,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "def fetch_notebook_list(base: str) -> list[tuple[str, str]]:\n    \"\"\"Gets the list of example notebooks from a repo's index.html\n    Each entry is a tuple of the title name of a link and the address\n    \"\"\"\n    index = requests.get(base + \"index.rst\")\n    if index.status_code != 200:\n        raise RuntimeError(\"Unable to locate external example directory\")\n    text = str(index.content, encoding=\"utf-8\")\n    link_line = r\"^\\s+(.*)[^\\S\\r\\n]+(\\S+.ipynb)\"\n    T = TypeVar(\"T\")",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "copy_nb",
        "kind": 2,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "def copy_nb(base: str, relpath: str, repo: str) -> str:\n    \"\"\"Create a local copy of external file, modifying relative reference\"\"\"\n    example_dir = Path(__file__).parent / \"examples\"\n    repo_local_dir = example_dir / repo\n    repo_local_dir.mkdir(exist_ok=True)\n    page = requests.get(base + relpath)\n    if page.status_code != 200:\n        raise RuntimeError(f\"Unable to locate external notebook at {base + relpath}\")\n    filename = repo_local_dir / relpath.rsplit(\"/\", 1)[1]\n    with open(filename, \"wb\") as f:",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "author = \"dynamicslab\"\nproject = \"pysindy\"  # package name\n# no need to edit below this line\ncopyright = f\"2020, {author}\"\nmodule = importlib.import_module(project)\nversion = release = getattr(module, \"__version__\")\nmaster_doc = \"index\"\nextensions = [\n    \"nbsphinx\",\n    \"sphinxcontrib.apidoc\",",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "project = \"pysindy\"  # package name\n# no need to edit below this line\ncopyright = f\"2020, {author}\"\nmodule = importlib.import_module(project)\nversion = release = getattr(module, \"__version__\")\nmaster_doc = \"index\"\nextensions = [\n    \"nbsphinx\",\n    \"sphinxcontrib.apidoc\",\n    \"sphinx.ext.autodoc\",",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "copyright = f\"2020, {author}\"\nmodule = importlib.import_module(project)\nversion = release = getattr(module, \"__version__\")\nmaster_doc = \"index\"\nextensions = [\n    \"nbsphinx\",\n    \"sphinxcontrib.apidoc\",\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.todo\",\n    \"sphinx.ext.viewcode\",",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "module = importlib.import_module(project)\nversion = release = getattr(module, \"__version__\")\nmaster_doc = \"index\"\nextensions = [\n    \"nbsphinx\",\n    \"sphinxcontrib.apidoc\",\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.todo\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.autosummary\",",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "version = release = getattr(module, \"__version__\")\nmaster_doc = \"index\"\nextensions = [\n    \"nbsphinx\",\n    \"sphinxcontrib.apidoc\",\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.todo\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.napoleon\",",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "master_doc = \"index\"\nextensions = [\n    \"nbsphinx\",\n    \"sphinxcontrib.apidoc\",\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.todo\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.mathjax\",",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "extensions = [\n    \"nbsphinx\",\n    \"sphinxcontrib.apidoc\",\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.todo\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.mathjax\",\n    \"sphinx.ext.intersphinx\",",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "nb_execution_mode",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "nb_execution_mode = \"off\"\napidoc_module_dir = f\"../{project}\"\napidoc_excluded_paths = [\"tests\"]\napidoc_toc_file = False\nautodoc_default_options = {\"members\": True}\nautodoc_member_order = \"bysource\"\nautoclass_content = \"init\"\nlanguage = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "apidoc_module_dir",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "apidoc_module_dir = f\"../{project}\"\napidoc_excluded_paths = [\"tests\"]\napidoc_toc_file = False\nautodoc_default_options = {\"members\": True}\nautodoc_member_order = \"bysource\"\nautoclass_content = \"init\"\nlanguage = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "apidoc_excluded_paths",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "apidoc_excluded_paths = [\"tests\"]\napidoc_toc_file = False\nautodoc_default_options = {\"members\": True}\nautodoc_member_order = \"bysource\"\nautoclass_content = \"init\"\nlanguage = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "apidoc_toc_file",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "apidoc_toc_file = False\nautodoc_default_options = {\"members\": True}\nautodoc_member_order = \"bysource\"\nautoclass_content = \"init\"\nlanguage = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True\nadd_function_parentheses = False",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_default_options",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "autodoc_default_options = {\"members\": True}\nautodoc_member_order = \"bysource\"\nautoclass_content = \"init\"\nlanguage = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True\nadd_function_parentheses = False\ntodo_include_todos = True",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_member_order",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "autodoc_member_order = \"bysource\"\nautoclass_content = \"init\"\nlanguage = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True\nadd_function_parentheses = False\ntodo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "autoclass_content",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "autoclass_content = \"init\"\nlanguage = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True\nadd_function_parentheses = False\ntodo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "language = \"en\"\nhere = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True\nadd_function_parentheses = False\ntodo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False\nhtml_show_sphinx = False",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "here = Path(__file__).parent.resolve()\nexclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True\nadd_function_parentheses = False\ntodo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False\nhtml_show_sphinx = False\nhtml_show_copyright = True",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "exclude_patterns = [\"build\", \"_build\", \"Youtube\"]\n# pygments_style = \"sphinx\"\nadd_module_names = True\nadd_function_parentheses = False\ntodo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False\nhtml_show_sphinx = False\nhtml_show_copyright = True\ndefault_role = \"any\"",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "add_module_names",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "add_module_names = True\nadd_function_parentheses = False\ntodo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False\nhtml_show_sphinx = False\nhtml_show_copyright = True\ndefault_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "add_function_parentheses",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "add_function_parentheses = False\ntodo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False\nhtml_show_sphinx = False\nhtml_show_copyright = True\ndefault_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "todo_include_todos",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "todo_include_todos = True\nhtml_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False\nhtml_show_sphinx = False\nhtml_show_copyright = True\ndefault_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "html_theme = \"sphinx_rtd_theme\"\nhtml_show_sourcelink = False\nhtml_show_sphinx = False\nhtml_show_copyright = True\ndefault_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),\n}",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_show_sourcelink",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "html_show_sourcelink = False\nhtml_show_sphinx = False\nhtml_show_copyright = True\ndefault_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),\n}\n# -- Extensions to the  Napoleon GoogleDocstring class ---------------------",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_show_sphinx",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "html_show_sphinx = False\nhtml_show_copyright = True\ndefault_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),\n}\n# -- Extensions to the  Napoleon GoogleDocstring class ---------------------\n# michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_show_copyright",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "html_show_copyright = True\ndefault_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),\n}\n# -- Extensions to the  Napoleon GoogleDocstring class ---------------------\n# michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring  # noqa: E402",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "default_role",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "default_role = \"any\"\nhtml_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),\n}\n# -- Extensions to the  Napoleon GoogleDocstring class ---------------------\n# michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring  # noqa: E402\ndef parse_keys_section(self, section):",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_sourcelink_suffix",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "html_sourcelink_suffix = \"\"\nintersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),\n}\n# -- Extensions to the  Napoleon GoogleDocstring class ---------------------\n# michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring  # noqa: E402\ndef parse_keys_section(self, section):\n    return self._format_fields(\"Keys\", self._consume_fields())",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "intersphinx_mapping",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "intersphinx_mapping = {\n    \"derivative\": (\"https://derivative.readthedocs.io/en/latest/\", None),\n    \"sklearn\": (\"https://scikit-learn.org/stable/\", None),\n}\n# -- Extensions to the  Napoleon GoogleDocstring class ---------------------\n# michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring  # noqa: E402\ndef parse_keys_section(self, section):\n    return self._format_fields(\"Keys\", self._consume_fields())\nGoogleDocstring._parse_keys_section = parse_keys_section",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "GoogleDocstring._parse_keys_section",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "GoogleDocstring._parse_keys_section = parse_keys_section\ndef parse_attributes_section(self, section):\n    return self._format_fields(\"Attributes\", self._consume_fields())\nGoogleDocstring._parse_attributes_section = parse_attributes_section\ndef parse_class_attributes_section(self, section):\n    return self._format_fields(\"Class Attributes\", self._consume_fields())\nGoogleDocstring._parse_class_attributes_section = parse_class_attributes_section\ndef patched_parse(self):\n    \"\"\"\n    we now patch the parse method to guarantee that the the above methods are",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "GoogleDocstring._parse_attributes_section",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "GoogleDocstring._parse_attributes_section = parse_attributes_section\ndef parse_class_attributes_section(self, section):\n    return self._format_fields(\"Class Attributes\", self._consume_fields())\nGoogleDocstring._parse_class_attributes_section = parse_class_attributes_section\ndef patched_parse(self):\n    \"\"\"\n    we now patch the parse method to guarantee that the the above methods are\n    assigned to the _section dict\n    \"\"\"\n    self._sections[\"keys\"] = self._parse_keys_section",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "GoogleDocstring._parse_class_attributes_section",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "GoogleDocstring._parse_class_attributes_section = parse_class_attributes_section\ndef patched_parse(self):\n    \"\"\"\n    we now patch the parse method to guarantee that the the above methods are\n    assigned to the _section dict\n    \"\"\"\n    self._sections[\"keys\"] = self._parse_keys_section\n    self._sections[\"class attributes\"] = self._parse_class_attributes_section\n    self._unpatched_parse()\nGoogleDocstring._unpatched_parse = GoogleDocstring._parse",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "GoogleDocstring._unpatched_parse",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "GoogleDocstring._unpatched_parse = GoogleDocstring._parse\nGoogleDocstring._parse = patched_parse\ndef setup(app: Sphinx):\n    \"\"\"Our sphinx extension for copying from examples/ to docs/examples\n    Since nbsphinx does not handle glob/regex paths, we need to\n    manually copy documentation source files from examples.  See issue\n    # 230.\n    \"\"\"\n    doc_examples = here / \"examples\"\n    if not doc_examples.exists():",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "GoogleDocstring._parse",
        "kind": 5,
        "importPath": "pysindy.docs.conf",
        "description": "pysindy.docs.conf",
        "peekOfCode": "GoogleDocstring._parse = patched_parse\ndef setup(app: Sphinx):\n    \"\"\"Our sphinx extension for copying from examples/ to docs/examples\n    Since nbsphinx does not handle glob/regex paths, we need to\n    manually copy documentation source files from examples.  See issue\n    # 230.\n    \"\"\"\n    doc_examples = here / \"examples\"\n    if not doc_examples.exists():\n        (here / \"examples\").mkdir()",
        "detail": "pysindy.docs.conf",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "t1 = time.time()\n# Arneodo does not have the Lyapunov spectrum calculated so omit it.\n# HindmarshRose and AtmosphericRegime seem to be poorly sampled\n# by the dt and dominant time scales used in the database, so we omit them.\nsystems_list = [\n    \"Aizawa\",\n    \"Bouali2\",\n    \"GenesioTesi\",\n    \"HyperBao\",\n    \"HyperCai\",",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "systems_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "systems_list = [\n    \"Aizawa\",\n    \"Bouali2\",\n    \"GenesioTesi\",\n    \"HyperBao\",\n    \"HyperCai\",\n    \"HyperJha\",\n    \"HyperLorenz\",\n    \"HyperLu\",\n    \"HyperPang\",",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "alphabetical_sort",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "alphabetical_sort = np.argsort(systems_list)\nsystems_list = np.array(systems_list)[alphabetical_sort]\n# attributes list\nattributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "systems_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "systems_list = np.array(systems_list)[alphabetical_sort]\n# attributes list\nattributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",\n    \"period\",",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "attributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",\n    \"period\",\n    \"unbounded_indices\",\n]",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "all_properties",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "all_properties = dict()\nfor i, equation_name in enumerate(systems_list):\n    eq = getattr(flows, equation_name)()\n    attr_vals = [getattr(eq, item, None) for item in attributes]\n    all_properties[equation_name] = dict(zip(attributes, attr_vals))\n    t1 = time.time()\n# Arneodo does not have the Lyapunov spectrum calculated so omit it.\n# HindmarshRose and AtmosphericRegime seem to be poorly sampled\n# by the dt and dominant time scales used in the database, so we omit them.\nsystems_list = [",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "systems_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "systems_list = [\n    \"Aizawa\",\n    \"Bouali2\",\n    \"GenesioTesi\",\n    \"HyperBao\",\n    \"HyperCai\",\n    \"HyperJha\",\n    \"HyperLorenz\",\n    \"HyperLu\",\n    \"HyperPang\",",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "alphabetical_sort",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "alphabetical_sort = np.argsort(systems_list)\nsystems_list = np.array(systems_list)[alphabetical_sort]\n# attributes list\nattributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "systems_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "systems_list = np.array(systems_list)[alphabetical_sort]\n# attributes list\nattributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",\n    \"period\",",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "attributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",\n    \"period\",\n    \"unbounded_indices\",\n]",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "all_properties",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "all_properties = dict()\nfor i, equation_name in enumerate(systems_list):\n    eq = getattr(flows, equation_name)()\n    attr_vals = [getattr(eq, item, None) for item in attributes]\n    all_properties[equation_name] = dict(zip(attributes, attr_vals))\n# Get training and testing trajectories for all the experimental systems\nn = 1000  # Trajectories with 1000 points\npts_per_period = 100  # sample them with 100 points per period\nn_trajectories = 5  # generate 5 trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "n = 1000  # Trajectories with 1000 points\npts_per_period = 100  # sample them with 100 points per period\nn_trajectories = 5  # generate 5 trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(\n    systems_list,\n    all_properties,\n    n=n,\n    pts_per_period=pts_per_period,\n    n_trajectories=n_trajectories,\n)",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "pts_per_period",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "pts_per_period = 100  # sample them with 100 points per period\nn_trajectories = 5  # generate 5 trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(\n    systems_list,\n    all_properties,\n    n=n,\n    pts_per_period=pts_per_period,\n    n_trajectories=n_trajectories,\n)\nt2 = time.time()",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "n_trajectories",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "n_trajectories = 5  # generate 5 trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(\n    systems_list,\n    all_properties,\n    n=n,\n    pts_per_period=pts_per_period,\n    n_trajectories=n_trajectories,\n)\nt2 = time.time()\nprint(\"Took \", t2 - t1, \" seconds to load the systems\")",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "t2 = time.time()\nprint(\"Took \", t2 - t1, \" seconds to load the systems\")\nprint(\"# of training trajectories = \", n_trajectories)\nprint(\"# of points per period = \", pts_per_period)\nprint(\"# of points per trajectory = \", n)\nnum_attractors = len(systems_list)\n# Calculate some dynamical properties\nlyap_list = []\ndimension_list = []\nparam_list = []",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "num_attractors",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "num_attractors = len(systems_list)\n# Calculate some dynamical properties\nlyap_list = []\ndimension_list = []\nparam_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "lyap_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "lyap_list = []\ndimension_list = []\nparam_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "dimension_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "dimension_list = []\nparam_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "param_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "param_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales\n    scale_list_avg.append(",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "scale_list_avg",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "scale_list_avg = []\nscale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales\n    scale_list_avg.append(\n        all_properties[system][\"period\"] / all_properties[system][\"dt\"]\n    )",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "scale_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "scale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales\n    scale_list_avg.append(\n        all_properties[system][\"period\"] / all_properties[system][\"dt\"]\n    )\n# Get the true coefficients for each system",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "true_coefficients",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "true_coefficients = make_dysts_true_coefficients(\n    systems_list, all_sols_train, dimension_list, param_list\n)\n# Compute all the different nonlinear terms from the true coefficients\nnonlinearities = nonlinear_terms_from_coefficients(true_coefficients)\n# Compute various dynamical properties\ncount = 0\nfor i, system in enumerate(systems_list):\n    sorted_spectrum = np.sort(\n        (np.array(all_properties[system][\"lyapunov_spectrum_estimated\"]))",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "nonlinearities",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "nonlinearities = nonlinear_terms_from_coefficients(true_coefficients)\n# Compute various dynamical properties\ncount = 0\nfor i, system in enumerate(systems_list):\n    sorted_spectrum = np.sort(\n        (np.array(all_properties[system][\"lyapunov_spectrum_estimated\"]))\n    )\n    lambda_max = sorted_spectrum[-1]\n    lambda_min = sorted_spectrum[0]\n    if np.all(",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "count = 0\nfor i, system in enumerate(systems_list):\n    sorted_spectrum = np.sort(\n        (np.array(all_properties[system][\"lyapunov_spectrum_estimated\"]))\n    )\n    lambda_max = sorted_spectrum[-1]\n    lambda_min = sorted_spectrum[0]\n    if np.all(\n        np.array(all_properties[system][\"lyapunov_spectrum_estimated\"][0:2]) > 0.0\n    ):",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "medl_list",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "medl_list = compute_medl(systems_list, param_list)\n# Shorten some of the dynamical system names to make nicer plots\nsystems_list_cleaned = []\nfor i, system in enumerate(systems_list):\n    if system == \"GuckenheimerHolmes\":\n        systems_list_cleaned.append(\"GuckenHolmes\")\n    elif system == \"NuclearQuadrupole\":\n        systems_list_cleaned.append(\"NuclearQuad\")\n    elif system == \"RabinovichFabrikant\":\n        systems_list_cleaned.append(\"RabFabrikant\")",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "systems_list_cleaned",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "systems_list_cleaned = []\nfor i, system in enumerate(systems_list):\n    if system == \"GuckenheimerHolmes\":\n        systems_list_cleaned.append(\"GuckenHolmes\")\n    elif system == \"NuclearQuadrupole\":\n        systems_list_cleaned.append(\"NuclearQuad\")\n    elif system == \"RabinovichFabrikant\":\n        systems_list_cleaned.append(\"RabFabrikant\")\n    elif system == \"KawczynskiStrizhak\":\n        systems_list_cleaned.append(\"KawcStrizhak\")",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "medl_levels",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "medl_levels = np.logspace(1, 3, 40)\nlyap_levels = np.logspace(-2, 2, 40)\nscale_levels = np.logspace(2, 5, 40)\n# if using the weak form, this makes the Pareto curve based on the \"strong\"\n# or regular RMSE error instead of the RMSE error of the weak formulation.\nstrong_rmse = False\n# List of algorithms and noise levels to sweep through, MIOSR requires\n# a Gurobipy license (free license available via pip), and the academic\n# license (free, but requires making an account on Gurobi) is required\n# for doing the large-scale runs here.",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "lyap_levels",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "lyap_levels = np.logspace(-2, 2, 40)\nscale_levels = np.logspace(2, 5, 40)\n# if using the weak form, this makes the Pareto curve based on the \"strong\"\n# or regular RMSE error instead of the RMSE error of the weak formulation.\nstrong_rmse = False\n# List of algorithms and noise levels to sweep through, MIOSR requires\n# a Gurobipy license (free license available via pip), and the academic\n# license (free, but requires making an account on Gurobi) is required\n# for doing the large-scale runs here.\nalgorithms = [\"SR3\", r\"SR3 ($\\nu = 0.1$)\", \"Lasso\"]",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "scale_levels",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "scale_levels = np.logspace(2, 5, 40)\n# if using the weak form, this makes the Pareto curve based on the \"strong\"\n# or regular RMSE error instead of the RMSE error of the weak formulation.\nstrong_rmse = False\n# List of algorithms and noise levels to sweep through, MIOSR requires\n# a Gurobipy license (free license available via pip), and the academic\n# license (free, but requires making an account on Gurobi) is required\n# for doing the large-scale runs here.\nalgorithms = [\"SR3\", r\"SR3 ($\\nu = 0.1$)\", \"Lasso\"]\n# algorithms = [\"STLSQ\"]",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "strong_rmse",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "strong_rmse = False\n# List of algorithms and noise levels to sweep through, MIOSR requires\n# a Gurobipy license (free license available via pip), and the academic\n# license (free, but requires making an account on Gurobi) is required\n# for doing the large-scale runs here.\nalgorithms = [\"SR3\", r\"SR3 ($\\nu = 0.1$)\", \"Lasso\"]\n# algorithms = [\"STLSQ\"]\nnoise_levels = [0.0, 0.1, 1.0]\nweak_form_flags = [True]\nfor weak_form in weak_form_flags:",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "algorithms",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "algorithms = [\"SR3\", r\"SR3 ($\\nu = 0.1$)\", \"Lasso\"]\n# algorithms = [\"STLSQ\"]\nnoise_levels = [0.0, 0.1, 1.0]\nweak_form_flags = [True]\nfor weak_form in weak_form_flags:\n    # if weak_form = True, need to reorder the coefficients because the\n    # weak form uses a library with different term ordering\n    # if weak_form:\n    #    true_coefficients = weakform_reorder_coefficients(\n    #        systems_list, dimension_list, true_coefficients",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "noise_levels",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "noise_levels = [0.0, 0.1, 1.0]\nweak_form_flags = [True]\nfor weak_form in weak_form_flags:\n    # if weak_form = True, need to reorder the coefficients because the\n    # weak form uses a library with different term ordering\n    # if weak_form:\n    #    true_coefficients = weakform_reorder_coefficients(\n    #        systems_list, dimension_list, true_coefficients\n    #    )\n    for algorithm in algorithms:",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "weak_form_flags",
        "kind": 5,
        "importPath": "pysindy.examples.16_noise_robustness.run_all",
        "description": "pysindy.examples.16_noise_robustness.run_all",
        "peekOfCode": "weak_form_flags = [True]\nfor weak_form in weak_form_flags:\n    # if weak_form = True, need to reorder the coefficients because the\n    # weak form uses a library with different term ordering\n    # if weak_form:\n    #    true_coefficients = weakform_reorder_coefficients(\n    #        systems_list, dimension_list, true_coefficients\n    #    )\n    for algorithm in algorithms:\n        for noise_level in noise_levels:",
        "detail": "pysindy.examples.16_noise_robustness.run_all",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def load_data(\n    systems_list,\n    all_properties,\n    n=200,\n    pts_per_period=20,\n    random_bump=False,\n    include_transients=False,\n    n_trajectories=20,\n):\n    \"\"\"",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "make_test_trajectories",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def make_test_trajectories(\n    systems_list,\n    all_properties,\n    n=200,\n    pts_per_period=20,\n    random_bump=False,\n    include_transients=False,\n    n_trajectories=20,\n):\n    \"\"\"",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "normalized_RMSE",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def normalized_RMSE(x_dot_true, x_dot_pred):\n    \"\"\"\n    Compute the normalized RMSE error between the Xdot from the real data\n    and the Xdot from a SINDy model. Usually done only for a set of\n    testing trajectories.\n    Parameters\n    ----------\n    x_dot_true : 2D numpy array of floats,\n                 shape (num_sample_points, state_size)\n        True x_dot trajectory(s).",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "AIC_c",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def AIC_c(x_dot_true, x_dot_pred, xi_pred):\n    \"\"\"\n    Compute the finite-sample-corrected AIC criteria, as in\n    Mangan & Brunton 2017.\n    Parameters\n    ----------\n    x_dot_true : 2D numpy array of floats,\n                 shape (num_sample_points, state_size)\n        True x_dot trajectory(s).\n    x_dot_pred : 2D numpy array of floats,",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "total_coefficient_error_normalized",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def total_coefficient_error_normalized(xi_true, xi_pred):\n    \"\"\"\n    Compute the TOTAL normalized coefficient error between the true\n    coefficients of the underlying equations (assuming they are known)\n    and the coefficients identified by the SINDy model.\n    Parameters\n    ----------\n    xi_true : 2D numpy array of floats, shape (state_size, n_features)\n        True equation coefficients.\n    xi_pred : 2D numpy array of floats, shape (state_size, n_features)",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "coefficient_errors",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def coefficient_errors(xi_true, xi_pred):\n    \"\"\"\n    Compute the INDIVIDUAL normalized coefficient errors between the true\n    coefficients of the underlying equations (assuming they are known)\n    and the coefficients identified by the SINDy model.\n    Parameters\n    ----------\n    xi_true : 2D numpy array of floats, shape (state_size, n_features)\n        True equation coefficients.\n    xi_pred : 2D numpy array of floats, shape (state_size, n_features)",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "success_rate",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def success_rate(xi_true, xi_pred):\n    \"\"\"\n    Compute the success or recovery rate, i.e. 0 or 1 is returned for each\n    identified coefficient that matches the correct coefficient to some\n    error tolerance threshold.\n    Parameters\n    ----------\n    xi_true : 2D numpy array of floats, shape (state_size, n_features)\n        True equation coefficients.\n    xi_pred : 2D numpy array of floats, shape (state_size, n_features)",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "Pareto_scan_ensembling",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def Pareto_scan_ensembling(\n    systems_list,\n    dimension_list,\n    true_coefficients,\n    all_sols_train,\n    all_t_train,\n    all_sols_test,\n    all_t_test,\n    normalize_columns=False,\n    noise_level=0,",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "hyperparameter_scan_stlsq",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def hyperparameter_scan_stlsq(\n    x_train,\n    x_test,\n    t_train,\n    t_test,\n    x_dot_test,\n    mats,\n    ode_lib,\n    initial_hyperparam,\n    alpha=1e-5,",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "hyperparameter_scan_lasso",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def hyperparameter_scan_lasso(\n    x_train,\n    x_test,\n    t_train,\n    t_test,\n    x_dot_test,\n    mats,\n    ode_lib,\n    initial_hyperparam,\n    tol_iter=300,",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "hyperparameter_scan_sr3",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def hyperparameter_scan_sr3(\n    x_train,\n    x_test,\n    t_train,\n    t_test,\n    x_dot_test,\n    mats,\n    ode_lib,\n    initial_hyperparam,\n    tol_iter=300,",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "hyperparameter_scan_miosr",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def hyperparameter_scan_miosr(\n    x_train,\n    x_test,\n    t_train,\n    t_test,\n    x_dot_test,\n    mats,\n    ode_lib,\n    alpha=1e-5,\n    normalize_columns=True,",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "weakform_reorder_coefficients",
        "kind": 2,
        "importPath": "pysindy.examples.16_noise_robustness.utils",
        "description": "pysindy.examples.16_noise_robustness.utils",
        "peekOfCode": "def weakform_reorder_coefficients(systems_list, dimension_list, true_coefficients):\n    \"\"\"\n    This function reorders the true model coefficients if using the weak\n    formulation, in order to compare with the weak formulation of the SINDy\n    library, which is in a different order than the PolynomialLibrary\n    with degree = 4.\n    \"\"\"\n    # reordering to use if system is 3D\n    reorder1 = np.array(\n        [",
        "detail": "pysindy.examples.16_noise_robustness.utils",
        "documentation": {}
    },
    {
        "label": "r_func",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "def r_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(\n        rcoeff[np.newaxis, :]\n        * epsilons[:, np.newaxis] ** np.arange(len(rcoeff))[np.newaxis, :],\n        axis=1,\n    )\ndef b3_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b3_func",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "def b3_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(\n        b3coeff[np.newaxis, :]\n        * epsilons[:, np.newaxis] ** np.arange(len(b3coeff))[np.newaxis, :],\n        axis=1,\n    )\ndef b5_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b5_func",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "def b5_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(\n        b5coeff[np.newaxis, :]\n        * epsilons[:, np.newaxis] ** np.arange(len(b5coeff))[np.newaxis, :],\n        axis=1,\n    )\nepsilons = np.arange(0, 3, 0.1)\ninds = np.intersect1d(\n    np.where(r_func(epsilons) < 0)[0], np.where(b3_func(epsilons) > 0)[0]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "sh_fit",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "def sh_fit(t, u, epsilon):\n    uxx = np.real(ps.SpectralDerivative(d=2, axis=0)._differentiate(u, L / nx))\n    uxxxx = np.real(ps.SpectralDerivative(d=4, axis=0)._differentiate(u, L / nx))\n    return (\n        +uxx_func_fit([epsilon])[0] * uxx\n        + uxxxx_func_fit([epsilon])[0] * uxxxx\n        + (r_func_fit([epsilon])[0] - 1) * u\n        + b3_func_fit([epsilon])[0] * u**3\n        - b5_func_fit([epsilon])[0] * u**5\n    )",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "colors = [\n    \"#ff7f0e\",\n    \"#2ca02c\",\n    \"#1f77b4\",\n    \"#d62728\",\n    \"#9467bd\",\n    \"#8c564b\",\n    \"#e377c2\",\n    \"#7f7f7f\",\n    \"#bcbd22\",",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "num = 1000\nN = 1000\nN_drop = 500\nr0 = 3.5\nrs = r0 + np.arange(num) / num * (4 - r0)\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "N = 1000\nN_drop = 500\nr0 = 3.5\nrs = r0 + np.arange(num) / num * (4 - r0)\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "N_drop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "N_drop = 500\nr0 = 3.5\nrs = r0 + np.arange(num) / num * (4 - r0)\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "r0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "r0 = 3.5\nrs = r0 + np.arange(num) / num * (4 - r0)\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "rs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "rs = r0 + np.arange(num) / num * (4 - r0)\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)\n    xss = xss + [xs]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xss",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)\n    xss = xss + [xs]\nplt.figure(figsize=(4, 4), dpi=100)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "N = 1000\nN_drop = 500\nrs = [3.6, 3.7, 3.8, 3.9]\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "N_drop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "N_drop = 500\nrs = [3.6, 3.7, 3.8, 3.9]\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "rs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "rs = [3.6, 3.7, 3.8, 3.9]\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)\n    xss = xss + [np.array(xs)]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xss",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)\n    xss = xss + [np.array(xs)]\n# Create a SINDyCP library, with a polynomial degree 3 feature library and a polynomial degree 1 parameter library. The library terms in a SINDyCP library consists of products of the features in the feature library and the parameter library. We input specify the parameter values for each trajectory using the control input, which must be the same shape as the input data.",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.PolynomialLibrary(degree=3, include_bias=True)\nparameter_lib = ps.PolynomialLibrary(degree=1, include_bias=True)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.PolynomialLibrary(degree=1, include_bias=True)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True\n)\n# model.fit(xss, u=[np.ones(N) * rs[ind] for ind in range(len(rs))], multiple_trajectories=True)\nmodel.fit(xss, u=rs, multiple_trajectories=True)\nmodel.print()\n# ### Fit a parameterized Lorenz model\n# The Lorenz equations\n# $$ \\dot{x} = \\sigma (y - x),$$",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True\n)\n# model.fit(xss, u=[np.ones(N) * rs[ind] for ind in range(len(rs))], multiple_trajectories=True)\nmodel.fit(xss, u=rs, multiple_trajectories=True)\nmodel.print()\n# ### Fit a parameterized Lorenz model\n# The Lorenz equations\n# $$ \\dot{x} = \\sigma (y - x),$$\n# $$ \\dot{y} = x(\\rho - z) - y, $$",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "num_trajectories",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "num_trajectories = 5\nscalesigma = 1\nscalerho = 1\nscalebeta = 1\ndt = 0.002\nnp.random.seed(100)\nsigmas = 10 + scalesigma * (np.random.random(num_trajectories) - 0.5)\nrhos = 28 * np.ones(num_trajectories) + scalerho * (\n    np.random.random(num_trajectories) - 0.5\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scalesigma",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scalesigma = 1\nscalerho = 1\nscalebeta = 1\ndt = 0.002\nnp.random.seed(100)\nsigmas = 10 + scalesigma * (np.random.random(num_trajectories) - 0.5)\nrhos = 28 * np.ones(num_trajectories) + scalerho * (\n    np.random.random(num_trajectories) - 0.5\n)\nbetas = 2.66667 * np.ones(num_trajectories) + scalebeta * (",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scalerho",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scalerho = 1\nscalebeta = 1\ndt = 0.002\nnp.random.seed(100)\nsigmas = 10 + scalesigma * (np.random.random(num_trajectories) - 0.5)\nrhos = 28 * np.ones(num_trajectories) + scalerho * (\n    np.random.random(num_trajectories) - 0.5\n)\nbetas = 2.66667 * np.ones(num_trajectories) + scalebeta * (\n    np.random.random(num_trajectories) - 0.5",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scalebeta",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scalebeta = 1\ndt = 0.002\nnp.random.seed(100)\nsigmas = 10 + scalesigma * (np.random.random(num_trajectories) - 0.5)\nrhos = 28 * np.ones(num_trajectories) + scalerho * (\n    np.random.random(num_trajectories) - 0.5\n)\nbetas = 2.66667 * np.ones(num_trajectories) + scalebeta * (\n    np.random.random(num_trajectories) - 0.5\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "dt = 0.002\nnp.random.seed(100)\nsigmas = 10 + scalesigma * (np.random.random(num_trajectories) - 0.5)\nrhos = 28 * np.ones(num_trajectories) + scalerho * (\n    np.random.random(num_trajectories) - 0.5\n)\nbetas = 2.66667 * np.ones(num_trajectories) + scalebeta * (\n    np.random.random(num_trajectories) - 0.5\n)\nx_trains, t_trains = utils.get_lorenz_trajectories(sigmas, rhos, betas, dt)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "sigmas",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "sigmas = 10 + scalesigma * (np.random.random(num_trajectories) - 0.5)\nrhos = 28 * np.ones(num_trajectories) + scalerho * (\n    np.random.random(num_trajectories) - 0.5\n)\nbetas = 2.66667 * np.ones(num_trajectories) + scalebeta * (\n    np.random.random(num_trajectories) - 0.5\n)\nx_trains, t_trains = utils.get_lorenz_trajectories(sigmas, rhos, betas, dt)\nfig = plt.figure(figsize=(4, 4))\nax = plt.axes(projection=\"3d\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "rhos",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "rhos = 28 * np.ones(num_trajectories) + scalerho * (\n    np.random.random(num_trajectories) - 0.5\n)\nbetas = 2.66667 * np.ones(num_trajectories) + scalebeta * (\n    np.random.random(num_trajectories) - 0.5\n)\nx_trains, t_trains = utils.get_lorenz_trajectories(sigmas, rhos, betas, dt)\nfig = plt.figure(figsize=(4, 4))\nax = plt.axes(projection=\"3d\")\nfor i in range(len(x_trains)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "betas",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "betas = 2.66667 * np.ones(num_trajectories) + scalebeta * (\n    np.random.random(num_trajectories) - 0.5\n)\nx_trains, t_trains = utils.get_lorenz_trajectories(sigmas, rhos, betas, dt)\nfig = plt.figure(figsize=(4, 4))\nax = plt.axes(projection=\"3d\")\nfor i in range(len(x_trains)):\n    ax.plot(x_trains[i][:, 0], x_trains[i][:, 1], x_trains[i][:, 2])\nax.set_xlabel(\"$x$\")\nax.set_ylabel(\"$y$\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "fig = plt.figure(figsize=(4, 4))\nax = plt.axes(projection=\"3d\")\nfor i in range(len(x_trains)):\n    ax.plot(x_trains[i][:, 0], x_trains[i][:, 1], x_trains[i][:, 2])\nax.set_xlabel(\"$x$\")\nax.set_ylabel(\"$y$\")\nax.set_zlabel(\"$z$\")\nplt.savefig(\"lorenz.pdf\")\nplt.show()\n# Fitting any one trajectory gives the equation corresponding to a specific set of parameter values. Can we discover the parameterized equations given all the trajectories?",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "ax = plt.axes(projection=\"3d\")\nfor i in range(len(x_trains)):\n    ax.plot(x_trains[i][:, 0], x_trains[i][:, 1], x_trains[i][:, 2])\nax.set_xlabel(\"$x$\")\nax.set_ylabel(\"$y$\")\nax.set_zlabel(\"$z$\")\nplt.savefig(\"lorenz.pdf\")\nplt.show()\n# Fitting any one trajectory gives the equation corresponding to a specific set of parameter values. Can we discover the parameterized equations given all the trajectories?\n# In[6]:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.PolynomialLibrary()\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains[-1], t=dt)\nmodel.print()\nprint([sigmas[-1], rhos[-1], betas[-1]])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains[-1], t=dt)\nmodel.print()\nprint([sigmas[-1], rhos[-1], betas[-1]])\nprint(lib.get_feature_names([\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"]))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains[-1], t=dt)\nmodel.print()\nprint([sigmas[-1], rhos[-1], betas[-1]])\nprint(lib.get_feature_names([\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"]))\n# We use the control input of ps.model to specify the parameter values, and fit a SINDy model with multiple trajectories.",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "u_trains",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "u_trains = [[sigmas[i], rhos[i], betas[i]] for i in range(len(sigmas))]\nlib = ps.PolynomialLibrary()\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains, u=u_trains, t=dt, multiple_trajectories=True)\nmodel.print()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.PolynomialLibrary()\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains, u=u_trains, t=dt, multiple_trajectories=True)\nmodel.print()\nprint(lib.get_feature_names([\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"]))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains, u=u_trains, t=dt, multiple_trajectories=True)\nmodel.print()\nprint(lib.get_feature_names([\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"]))\n# The ParameterizedLibrary enables different libraries to be applied to the control input and input features. In this case, the result is the same, but different libraries are required for the PDE case, as shown below.",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains, u=u_trains, t=dt, multiple_trajectories=True)\nmodel.print()\nprint(lib.get_feature_names([\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"]))\n# The ParameterizedLibrary enables different libraries to be applied to the control input and input features. In this case, the result is the same, but different libraries are required for the PDE case, as shown below.\n# In[8]:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_library",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_library = ps.PolynomialLibrary(degree=2)\nparameter_library = ps.PolynomialLibrary(degree=1)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_library,\n    parameter_library=parameter_library,\n    num_parameters=3,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_library",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_library = ps.PolynomialLibrary(degree=1)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_library,\n    parameter_library=parameter_library,\n    num_parameters=3,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    feature_library=feature_library,\n    parameter_library=parameter_library,\n    num_parameters=3,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains, u=u_trains, t=dt, multiple_trajectories=True)\nmodel.print()\nprint(lib.get_feature_names([\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"]))\n# In[46]:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(\n    feature_library=lib,\n    optimizer=opt,\n    feature_names=[\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"],\n)\nmodel.fit(x_trains, u=u_trains, t=dt, multiple_trajectories=True)\nmodel.print()\nprint(lib.get_feature_names([\"x\", \"y\", \"z\", \"sigma\", \"rho\", \"beta\"]))\n# In[46]:\nif __name__ == \"testing\":",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "nx",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "nx = 128\nny = 128\nL = 16\nt1 = 2e2\nt3 = 1.9e2\ndt = 1e-1\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "ny",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "ny = 128\nL = 16\nt1 = 2e2\nt3 = 1.9e2\ndt = 1e-1\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx\nspatiotemporal_grid = np.zeros((nx, ny, nt, 3))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "L = 16\nt1 = 2e2\nt3 = 1.9e2\ndt = 1e-1\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx\nspatiotemporal_grid = np.zeros((nx, ny, nt, 3))\nspatiotemporal_grid[:, :, :, :2] = spatial_grid[:, :, np.newaxis, :]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "t1 = 2e2\nt3 = 1.9e2\ndt = 1e-1\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx\nspatiotemporal_grid = np.zeros((nx, ny, nt, 3))\nspatiotemporal_grid[:, :, :, :2] = spatial_grid[:, :, np.newaxis, :]\nspatiotemporal_grid[:, :, :, 2] = dt * np.arange(nt)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "t3 = 1.9e2\ndt = 1e-1\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx\nspatiotemporal_grid = np.zeros((nx, ny, nt, 3))\nspatiotemporal_grid[:, :, :, :2] = spatial_grid[:, :, np.newaxis, :]\nspatiotemporal_grid[:, :, :, 2] = dt * np.arange(nt)\n# In[10]:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "dt = 1e-1\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx\nspatiotemporal_grid = np.zeros((nx, ny, nt, 3))\nspatiotemporal_grid[:, :, :, :2] = spatial_grid[:, :, np.newaxis, :]\nspatiotemporal_grid[:, :, :, 2] = dt * np.arange(nt)\n# In[10]:\nbs = [2.0, 2.0, 0.5, 1.0]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "nt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "nt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx\nspatiotemporal_grid = np.zeros((nx, ny, nt, 3))\nspatiotemporal_grid[:, :, :, :2] = spatial_grid[:, :, np.newaxis, :]\nspatiotemporal_grid[:, :, :, 2] = dt * np.arange(nt)\n# In[10]:\nbs = [2.0, 2.0, 0.5, 1.0]\ncs = [1.0, 0.75, 0.5, 0.75]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "spatial_grid",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "spatial_grid = np.zeros((nx, ny, 2))\nspatial_grid[:, :, 0] = (np.arange(nx) - nx // 2)[:, np.newaxis] * 2 * np.pi * L / nx\nspatial_grid[:, :, 1] = (np.arange(nx) - nx // 2)[np.newaxis, :] * 2 * np.pi * L / nx\nspatiotemporal_grid = np.zeros((nx, ny, nt, 3))\nspatiotemporal_grid[:, :, :, :2] = spatial_grid[:, :, np.newaxis, :]\nspatiotemporal_grid[:, :, :, 2] = dt * np.arange(nt)\n# In[10]:\nbs = [2.0, 2.0, 0.5, 1.0]\ncs = [1.0, 0.75, 0.5, 0.75]\nscales = [1e-1, 1e-1, 1e-1, 1e0]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "spatiotemporal_grid",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "spatiotemporal_grid = np.zeros((nx, ny, nt, 3))\nspatiotemporal_grid[:, :, :, :2] = spatial_grid[:, :, np.newaxis, :]\nspatiotemporal_grid[:, :, :, 2] = dt * np.arange(nt)\n# In[10]:\nbs = [2.0, 2.0, 0.5, 1.0]\ncs = [1.0, 0.75, 0.5, 0.75]\nscales = [1e-1, 1e-1, 1e-1, 1e0]\nscales2 = [1e-2, 1e-2, 1e0, 1e-2]\nus = [[bs[i], cs[i]] for i in range(len(bs))]\nif np.all([os.path.exists(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs = [2.0, 2.0, 0.5, 1.0]\ncs = [1.0, 0.75, 0.5, 0.75]\nscales = [1e-1, 1e-1, 1e-1, 1e0]\nscales2 = [1e-2, 1e-2, 1e0, 1e-2]\nus = [[bs[i], cs[i]] for i in range(len(bs))]\nif np.all([os.path.exists(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]):\n    xs = [np.load(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]\nelse:\n    xs = []\n    for i in range(len(bs)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "cs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "cs = [1.0, 0.75, 0.5, 0.75]\nscales = [1e-1, 1e-1, 1e-1, 1e0]\nscales2 = [1e-2, 1e-2, 1e0, 1e-2]\nus = [[bs[i], cs[i]] for i in range(len(bs))]\nif np.all([os.path.exists(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]):\n    xs = [np.load(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]\nelse:\n    xs = []\n    for i in range(len(bs)):\n        b = bs[i]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scales",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scales = [1e-1, 1e-1, 1e-1, 1e0]\nscales2 = [1e-2, 1e-2, 1e0, 1e-2]\nus = [[bs[i], cs[i]] for i in range(len(bs))]\nif np.all([os.path.exists(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]):\n    xs = [np.load(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]\nelse:\n    xs = []\n    for i in range(len(bs)):\n        b = bs[i]\n        c = cs[i]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scales2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scales2 = [1e-2, 1e-2, 1e0, 1e-2]\nus = [[bs[i], cs[i]] for i in range(len(bs))]\nif np.all([os.path.exists(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]):\n    xs = [np.load(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]\nelse:\n    xs = []\n    for i in range(len(bs)):\n        b = bs[i]\n        c = cs[i]\n        scale0 = scales[i]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "us",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "us = [[bs[i], cs[i]] for i in range(len(bs))]\nif np.all([os.path.exists(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]):\n    xs = [np.load(\"data/cgle/cgle_x\" + str(i) + \".npy\") for i in range(4)]\nelse:\n    xs = []\n    for i in range(len(bs)):\n        b = bs[i]\n        c = cs[i]\n        scale0 = scales[i]\n        scale2 = scales2[i]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "cbar",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "cbar = plt.colorbar(\n    pl,\n    ax=axs[:, 1],\n    orientation=\"vertical\",\n    ticks=[-1.25, -0.75, 0.00, 0.75, 1.25],\n    label=\"$X$\",\n    shrink=0.6,\n)\nplt.savefig(\"cgle.pdf\")\nplt.show()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nlib = ps.PDELibrary(\n    library_functions=[\n        lambda x: x,\n        lambda x: x**3,\n        lambda x, y: x**2 * y,\n        lambda x, y: y**2 * x,\n    ],\n    derivative_order=2,\n    spatial_grid=spatial_grid,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.PDELibrary(\n    library_functions=[\n        lambda x: x,\n        lambda x: x**3,\n        lambda x, y: x**2 * y,\n        lambda x, y: y**2 * x,\n    ],\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    include_interaction=False,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, alpha=1e-3)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Y\"])\nmodel.fit(xs[-1], t=dt)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\n# Try a SINDy model with multiple trajectories using the ParameterizedLibrary. Use a PDELibrary for the feature_library with second-order derivatives and library functions that include the relevant cubic term. Use a PDELibrary for the parameter_library with zeroth-order derivatives and linear library functions. The fit is very good!\n# In[13]:\nstart = timeit.default_timer()\nlibrary_functions = [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Y\"])\nmodel.fit(xs[-1], t=dt)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\n# Try a SINDy model with multiple trajectories using the ParameterizedLibrary. Use a PDELibrary for the feature_library with second-order derivatives and library functions that include the relevant cubic term. Use a PDELibrary for the parameter_library with zeroth-order derivatives and linear library functions. The fit is very good!\n# In[13]:\nstart = timeit.default_timer()\nlibrary_functions = [\n    lambda x: x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\n# Try a SINDy model with multiple trajectories using the ParameterizedLibrary. Use a PDELibrary for the feature_library with second-order derivatives and library functions that include the relevant cubic term. Use a PDELibrary for the parameter_library with zeroth-order derivatives and linear library functions. The fit is very good!\n# In[13]:\nstart = timeit.default_timer()\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,\n    lambda x: x + x + x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [\n    lambda x: x,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,\n    lambda x, y: x + y + y,\n]\nfeature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    include_interaction=False,\n    function_names=function_names,\n)\nlibrary_functions = [lambda x: x]\nfunction_names = [lambda x: x]\nparameter_lib = ps.PDELibrary(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: x]\nfunction_names = [lambda x: x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,\n    num_parameters=2,\n    num_features=2,\n)\nopt = ps.STLSQ(threshold=5e-1, alpha=1e-3, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=5e-1, alpha=1e-3, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# Modifying PDELibrary to accept spectral derivatives improves the fit a bit\n# In[14]:\nstart = timeit.default_timer()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# Modifying PDELibrary to accept spectral derivatives improves the fit a bit\n# In[14]:\nstart = timeit.default_timer()\nlibrary_functions = [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# Modifying PDELibrary to accept spectral derivatives improves the fit a bit\n# In[14]:\nstart = timeit.default_timer()\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,\n    lambda x: x + x + x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [\n    lambda x: x,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,\n    lambda x, y: x + y + y,\n]\nfeature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    include_interaction=False,\n    function_names=function_names,\n    differentiation_method=ps.SpectralDerivative,\n)\nlibrary_functions = [lambda x: x]\nfunction_names = [lambda x: x]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: x]\nfunction_names = [lambda x: x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,\n    num_parameters=2,\n    num_features=2,\n)\nopt = ps.STLSQ(threshold=1e-1, alpha=1e-3, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, alpha=1e-3, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# If we ensure the same domain cells are used in the feature library and the parameter library (by reseeding np.random), the WeakLibrary can be used with the ParameterLibrary. (In this case, the parameters need to be constants, so that the tensor product of two WeakLibrary corresponds to the correct weak features.) The fit is perfect and super fast!\n# In[15]:\nstart = timeit.default_timer()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# If we ensure the same domain cells are used in the feature library and the parameter library (by reseeding np.random), the WeakLibrary can be used with the ParameterLibrary. (In this case, the parameters need to be constants, so that the tensor product of two WeakLibrary corresponds to the correct weak features.) The fit is perfect and super fast!\n# In[15]:\nstart = timeit.default_timer()\nnp.random.seed(100)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# If we ensure the same domain cells are used in the feature library and the parameter library (by reseeding np.random), the WeakLibrary can be used with the ParameterLibrary. (In this case, the parameters need to be constants, so that the tensor product of two WeakLibrary corresponds to the correct weak features.) The fit is perfect and super fast!\n# In[15]:\nstart = timeit.default_timer()\nnp.random.seed(100)\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**3,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nnp.random.seed(100)\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [\n    lambda x: x,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [\n    lambda x: x,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,\n    lambda x, y: x + y + y,\n]\nfeature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatiotemporal_grid=spatiotemporal_grid,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,\n    K=500,\n    H_xt=[L * 2 * np.pi / 10, L * 2 * np.pi / 10, (t1 - t3) / 10],\n)\nnp.random.seed(100)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: x]\nfunction_names = [lambda x: x]\nparameter_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    spatiotemporal_grid=spatiotemporal_grid,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n    K=500,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x]\nparameter_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    spatiotemporal_grid=spatiotemporal_grid,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n    K=500,\n    H_xt=[L * 2 * np.pi / 10, L * 2 * np.pi / 10, (t1 - t3) / 10],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    spatiotemporal_grid=spatiotemporal_grid,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n    K=500,\n    H_xt=[L * 2 * np.pi / 10, L * 2 * np.pi / 10, (t1 - t3) / 10],\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,\n    num_parameters=2,\n    num_features=2,\n)\nopt = ps.STLSQ(threshold=1e-1, alpha=1e-3, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, alpha=1e-3, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# ### Oregenator model for BZ chemical reaction\n# We consider the coupled reaction diffusion equations\n#",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"x\", \"y\", \"b\", \"c\"])\nmodel.fit(xs, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# ### Oregenator model for BZ chemical reaction\n# We consider the coupled reaction diffusion equations\n#\n# $\\dot{C}_X = k_1 C_A C_H^2 C_Y-k_2C_HC_XC_Y+k_3C_AC_HC_X-2k_4C_X^2  + D_X \\nabla^2 C_X$",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"x\", \"y\", \"b\", \"c\"]))\n# ### Oregenator model for BZ chemical reaction\n# We consider the coupled reaction diffusion equations\n#\n# $\\dot{C}_X = k_1 C_A C_H^2 C_Y-k_2C_HC_XC_Y+k_3C_AC_HC_X-2k_4C_X^2  + D_X \\nabla^2 C_X$\n#\n# $\\dot{C}_Y = -k_1C_AC_H^2C_Y-k_2C_HC_XC_Y + \\nu k_5 C_B C_Z + D_Y \\nabla^2 C_Y$\n#",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs3 = np.linspace(0.84, 0.98, 8)\nXs = []\nYs = []\nZs = []\nfor b in bs3:\n    t1 = 1e2 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs = Xs + [X]\n    Ys = Ys + [Y]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Xs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Xs = []\nYs = []\nZs = []\nfor b in bs3:\n    t1 = 1e2 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs = Xs + [X]\n    Ys = Ys + [Y]\n    Zs = Zs + [Z]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Ys",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Ys = []\nZs = []\nfor b in bs3:\n    t1 = 1e2 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs = Xs + [X]\n    Ys = Ys + [Y]\n    Zs = Zs + [Z]\n# discard initial transients",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Zs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Zs = []\nfor b in bs3:\n    t1 = 1e2 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs = Xs + [X]\n    Ys = Ys + [Y]\n    Zs = Zs + [Z]\n# discard initial transients\nplt.figure(figsize=(4, 4))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "x = np.load(\"data/oregonator/canard_0.npy\")\nplt.imshow(x[:, :, -1, 0])\nplt.clim(2e-6, 8e-6)\nplt.xticks([])\nplt.yticks([])\nplt.savefig(\"fig2c.pdf\")\nplt.show()\nplt.figure(figsize=(3, 4))\nx = np.load(\"data/oregonator/canard_1.npy\")\nplt.imshow(x[:, :, -1, 0])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "x = np.load(\"data/oregonator/canard_1.npy\")\nplt.imshow(x[:, :, -1, 0])\nplt.clim(2e-6, 8e-6)\nplt.xticks([])\nplt.yticks([])\nplt.savefig(\"fig2d.pdf\")\nplt.show()\n# utils.animate_oregonator()\n# Do a SINDyCP fit on unprocessed decaying trajectories to localize the Hopf point\n# In[13]:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs = np.concatenate([np.linspace(1.05, 1.1, 6), np.linspace(0.95, 0.99, 5)])\nb0 = 0.95\nL = 1 / np.abs(1 - b0) ** 0.5  # Domain size in X and Y directions\nspatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\nt1 = 2e1 / np.abs(1 - b0)  # Domain size in t directions\ndt = 5.94804 / 10\nn = 128\nxs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "b0 = 0.95\nL = 1 / np.abs(1 - b0) ** 0.5  # Domain size in X and Y directions\nspatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\nt1 = 2e1 / np.abs(1 - b0)  # Domain size in t directions\ndt = 5.94804 / 10\nn = 128\nxs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]\nxs_train = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "L = 1 / np.abs(1 - b0) ** 0.5  # Domain size in X and Y directions\nspatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\nt1 = 2e1 / np.abs(1 - b0)  # Domain size in t directions\ndt = 5.94804 / 10\nn = 128\nxs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]\nxs_train = []\nxs_test = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "spatial_grid",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "spatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\nt1 = 2e1 / np.abs(1 - b0)  # Domain size in t directions\ndt = 5.94804 / 10\nn = 128\nxs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]\nxs_train = []\nxs_test = []\nscales = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "t1 = 2e1 / np.abs(1 - b0)  # Domain size in t directions\ndt = 5.94804 / 10\nn = 128\nxs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]\nxs_train = []\nxs_test = []\nscales = []\nus = (0.786642 * bs).tolist()\nx0s = []\nNt = 200",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "dt = 5.94804 / 10\nn = 128\nxs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]\nxs_train = []\nxs_test = []\nscales = []\nus = (0.786642 * bs).tolist()\nx0s = []\nNt = 200\nfor i in range(len(bs)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "n = 128\nxs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]\nxs_train = []\nxs_test = []\nscales = []\nus = (0.786642 * bs).tolist()\nx0s = []\nNt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs = [np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\") for i in range(len(bs))]\nxs_train = []\nxs_test = []\nscales = []\nus = (0.786642 * bs).tolist()\nx0s = []\nNt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))\n    x0s = x0s + [x0]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train = []\nxs_test = []\nscales = []\nus = (0.786642 * bs).tolist()\nx0s = []\nNt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))\n    x0s = x0s + [x0]\n    scale = x0",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test = []\nscales = []\nus = (0.786642 * bs).tolist()\nx0s = []\nNt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))\n    x0s = x0s + [x0]\n    scale = x0\n    xs_train = xs_train + [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scales",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scales = []\nus = (0.786642 * bs).tolist()\nx0s = []\nNt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))\n    x0s = x0s + [x0]\n    scale = x0\n    xs_train = xs_train + [\n        (xs[i][:, :, Nt : 2 * Nt, [0, 2]] - x0[[0, 2]]) / scale[[0, 2]]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "us",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "us = (0.786642 * bs).tolist()\nx0s = []\nNt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))\n    x0s = x0s + [x0]\n    scale = x0\n    xs_train = xs_train + [\n        (xs[i][:, :, Nt : 2 * Nt, [0, 2]] - x0[[0, 2]]) / scale[[0, 2]]\n    ]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "x0s",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "x0s = []\nNt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))\n    x0s = x0s + [x0]\n    scale = x0\n    xs_train = xs_train + [\n        (xs[i][:, :, Nt : 2 * Nt, [0, 2]] - x0[[0, 2]]) / scale[[0, 2]]\n    ]\n    xs_test = xs_train + [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Nt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Nt = 200\nfor i in range(len(bs)):\n    x0 = np.mean(xs[i][:, :, -100:], axis=(0, 1, 2))\n    x0s = x0s + [x0]\n    scale = x0\n    xs_train = xs_train + [\n        (xs[i][:, :, Nt : 2 * Nt, [0, 2]] - x0[[0, 2]]) / scale[[0, 2]]\n    ]\n    xs_test = xs_train + [\n        (xs[i][:, :, 2 * Nt : 3 * Nt, [0, 2]] - x0[[0, 2]]) / scale[[0, 2]]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [\n    lambda x: x,\n]\nfunction_names = [\n    lambda x: x,\n]\nfeature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [\n    lambda x: x,\n]\nfeature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    include_interaction=False,\n    include_bias=True,\n    function_names=function_names,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    include_interaction=False,\n    include_bias=True,\n    function_names=function_names,\n    differentiation_method=ps.SpectralDerivative,\n    multiindices=[],\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: x]\nfunction_names = [lambda x: x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,\n    num_parameters=1,\n    num_features=2,\n)\nopt = ps.STLSQ(threshold=1e-2, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Z\", \"C_B\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-2, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Z\", \"C_B\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Z\", \"C_B\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,\n            multioutput=\"raw_values\",",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,\n            multioutput=\"raw_values\",\n            multiple_trajectories=False,\n        )",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs2 = np.flip(np.linspace(0.92, 1.15, 1000))\nlambdas, J = utils.get_linear_eigenvalues(model, 0.786642 * bs2, printcoefs=True)\nplt.plot(0.786642 * bs2, np.real(lambdas)[:, 0])\nplt.plot(0.786642 * bs2, 0 * np.real(lambdas)[:, 0], c=\"black\", ls=\":\")\nplt.xlabel(r\"$C_B$\")\nplt.ylabel(r\"$Re(\\lambda)$\")\nplt.xlim(0.73, 0.88)\nplt.tight_layout()\nplt.savefig(\"figs3.pdf\")\nplt.show()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs = np.concatenate([np.linspace(1.05, 1.1, 6), np.linspace(0.95, 0.99, 5)])\nn = 128\nxs_train = []\nxs_test = []\nscales = []\nus = (1 - bs).tolist()\nx0s = []\nNt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "n = 128\nxs_train = []\nxs_test = []\nscales = []\nus = (1 - bs).tolist()\nx0s = []\nNt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")\n    Nt = 10",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train = []\nxs_test = []\nscales = []\nus = (1 - bs).tolist()\nx0s = []\nNt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")\n    Nt = 10\n    x0 = np.mean(x[:, :, -Nt:, [0, 2]], axis=(0, 1, 2))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test = []\nscales = []\nus = (1 - bs).tolist()\nx0s = []\nNt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")\n    Nt = 10\n    x0 = np.mean(x[:, :, -Nt:, [0, 2]], axis=(0, 1, 2))\n    U = (x[:, :, Nt:, [0, 2]] - x0) / x0",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scales",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scales = []\nus = (1 - bs).tolist()\nx0s = []\nNt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")\n    Nt = 10\n    x0 = np.mean(x[:, :, -Nt:, [0, 2]], axis=(0, 1, 2))\n    U = (x[:, :, Nt:, [0, 2]] - x0) / x0\n    nt = U.shape[2] // 10 * 10",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "us",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "us = (1 - bs).tolist()\nx0s = []\nNt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")\n    Nt = 10\n    x0 = np.mean(x[:, :, -Nt:, [0, 2]], axis=(0, 1, 2))\n    U = (x[:, :, Nt:, [0, 2]] - x0) / x0\n    nt = U.shape[2] // 10 * 10\n    A = np.mean(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "x0s",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "x0s = []\nNt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")\n    Nt = 10\n    x0 = np.mean(x[:, :, -Nt:, [0, 2]], axis=(0, 1, 2))\n    U = (x[:, :, Nt:, [0, 2]] - x0) / x0\n    nt = U.shape[2] // 10 * 10\n    A = np.mean(\n        (",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Nt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Nt = xs[0].shape[2] // 5 // 10 * 10\nfor i in range(len(bs)):\n    x = np.load(\"data/oregonator/oregonator2_\" + str(i) + \".npy\")\n    Nt = 10\n    x0 = np.mean(x[:, :, -Nt:, [0, 2]], axis=(0, 1, 2))\n    U = (x[:, :, Nt:, [0, 2]] - x0) / x0\n    nt = U.shape[2] // 10 * 10\n    A = np.mean(\n        (\n            (U[:, :, :, 0] + 1j * U[:, :, :, 1])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "L = 2e2  # Domain size in X and Y directions\nspatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\ndt = 1e-1\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "spatial_grid",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "spatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\ndt = 1e-1\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "dt = 1e-1\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [\n    lambda x: x,\n    lambda x: x + x,\n    lambda x, y: x + y,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,\n    lambda x, y: x + y + y,\n]\nfeature_lib = ps.PDELibrary(\n    library_functions=library_functions,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    include_interaction=False,\n    include_bias=True,\n    function_names=function_names,\n    differentiation_method=ps.SpectralDerivative,\n)\nlibrary_functions = [lambda x: np.abs(x) ** 0.5, lambda x: x]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: np.abs(x) ** 0.5, lambda x: x]\nfunction_names = [lambda x: x, lambda x: x + x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x, lambda x: x + x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,\n    num_parameters=1,\n    num_features=2,\n)\nopt = ps.STLSQ(threshold=1e-1, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Z\", \"mu\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Z\", \"mu\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Z\", \"mu\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nmodel.fit(xs_train[:6], u=us[:6], t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,\n            multioutput=\"raw_values\",",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,\n            multioutput=\"raw_values\",\n            multiple_trajectories=False,\n        )",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs2 = np.linspace(0.9, 1.1, 1000)\nalphas, betas = utils.get_normal_form_parameters(model, 1 - bs2, printcoefs=True)\nplt.subplots(2, 2, figsize=(10, 6))\nplt.subplot(2, 2, 1)\nfor x in xs_train[:6]:\n    plt.plot(5.94804 * np.arange(x.shape[2]), np.mean(x[:, :, :, 0], axis=(0, 1)))\nplt.ylabel(r\"$\\langle X \\rangle$\")\nlocs, labels = plt.xticks()\nplt.xticks(locs, [])\nplt.xlim(0, 650 * 5.94804 / 10)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs2 = np.linspace(0.875, 1.125, 1000)\nalphas, betas = utils.get_normal_form_parameters(model, 1 - bs2)\nplt.plot((1 - bs2), np.sign(1 - bs2) * (betas / (0.17272)), label=r\"$b/b_0$\")\nplt.plot((1 - bs2), np.sign(1 - bs2) * (alphas / (2.37882)), label=r\"$c/c_0$\")\nplt.ylim(0, 3)\n# plt.yscale('log')\nplt.legend()\nplt.ylabel(\"Normal-form\\nparameters\")\nplt.xlabel(r\"$\\mu$\")\nplt.xlim(-0.125, 0.125)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs = np.linspace(0.88, 0.98, 6)\nn = 128  # Number of spatial points in each direction\nxs_train = []\nxs_test = []\nscales = []\nfor j in range(len(bs)):\n    A = np.load(\"data/oregonator/oregonator_\" + str(j) + \".npy\")\n    scale = np.mean(np.abs(A) ** 2) ** 0.5\n    scales = scales + [scale]\n    xsi = np.array([np.real(A) / scale, np.imag(A) / scale]).transpose([1, 2, 3, 0])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "n = 128  # Number of spatial points in each direction\nxs_train = []\nxs_test = []\nscales = []\nfor j in range(len(bs)):\n    A = np.load(\"data/oregonator/oregonator_\" + str(j) + \".npy\")\n    scale = np.mean(np.abs(A) ** 2) ** 0.5\n    scales = scales + [scale]\n    xsi = np.array([np.real(A) / scale, np.imag(A) / scale]).transpose([1, 2, 3, 0])\n    xs_train = xs_train + [xsi[:, :, :250]]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train = []\nxs_test = []\nscales = []\nfor j in range(len(bs)):\n    A = np.load(\"data/oregonator/oregonator_\" + str(j) + \".npy\")\n    scale = np.mean(np.abs(A) ** 2) ** 0.5\n    scales = scales + [scale]\n    xsi = np.array([np.real(A) / scale, np.imag(A) / scale]).transpose([1, 2, 3, 0])\n    xs_train = xs_train + [xsi[:, :, :250]]\n    xs_test = xs_test + [xsi[:, :, 250:]]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test = []\nscales = []\nfor j in range(len(bs)):\n    A = np.load(\"data/oregonator/oregonator_\" + str(j) + \".npy\")\n    scale = np.mean(np.abs(A) ** 2) ** 0.5\n    scales = scales + [scale]\n    xsi = np.array([np.real(A) / scale, np.imag(A) / scale]).transpose([1, 2, 3, 0])\n    xs_train = xs_train + [xsi[:, :, :250]]\n    xs_test = xs_test + [xsi[:, :, 250:]]\nus = (1 - bs).tolist()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scales",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scales = []\nfor j in range(len(bs)):\n    A = np.load(\"data/oregonator/oregonator_\" + str(j) + \".npy\")\n    scale = np.mean(np.abs(A) ** 2) ** 0.5\n    scales = scales + [scale]\n    xsi = np.array([np.real(A) / scale, np.imag(A) / scale]).transpose([1, 2, 3, 0])\n    xs_train = xs_train + [xsi[:, :, :250]]\n    xs_test = xs_test + [xsi[:, :, 250:]]\nus = (1 - bs).tolist()\nL = 2e2  # Domain size in X and Y directions",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "us",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "us = (1 - bs).tolist()\nL = 2e2  # Domain size in X and Y directions\nspatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\ndt = 1e-1\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "L = 2e2  # Domain size in X and Y directions\nspatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\ndt = 1e-1\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "spatial_grid",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "spatial_grid = np.zeros((n, n, 2))\nspatial_grid[:, :, 0] = L / n * np.arange(n)[:, np.newaxis]\nspatial_grid[:, :, 1] = L / n * np.arange(n)[np.newaxis, :]\ndt = 1e-1\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "dt = 1e-1\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x, y: x * y,\n    lambda x: x**3,\n    lambda x, y: x**2 * y,\n    lambda x, y: y**2 * x,\n]\nfunction_names = [\n    lambda x: x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [\n    lambda x: x,\n    lambda x: x + x,\n    lambda x, y: x + y,\n    lambda x: x + x + x,\n    lambda x, y: x + x + y,\n    lambda x, y: x + y + y,\n]\nfeature_lib0 = ps.PDELibrary(\n    library_functions=library_functions,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib0 = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    include_interaction=False,\n    include_bias=True,\n    function_names=function_names,\n    differentiation_method=ps.SpectralDerivative,\n)\nopt0 = ps.STLSQ(threshold=1e-1, alpha=1e-12, normalize_columns=False)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt0 = ps.STLSQ(threshold=1e-1, alpha=1e-12, normalize_columns=False)\nmodel0 = ps.SINDy(\n    feature_library=feature_lib0, optimizer=opt0, feature_names=[\"X\", \"Y\"]\n)\nstart = timeit.default_timer()\nmodel0.fit(xs_train[-1], t=dt, multiple_trajectories=False)\nmodel0.print()\nstop = timeit.default_timer()\nprint(stop - start)\nutils.get_single_normal_form_parameters(model0, printcoefs=True)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model0 = ps.SINDy(\n    feature_library=feature_lib0, optimizer=opt0, feature_names=[\"X\", \"Y\"]\n)\nstart = timeit.default_timer()\nmodel0.fit(xs_train[-1], t=dt, multiple_trajectories=False)\nmodel0.print()\nstop = timeit.default_timer()\nprint(stop - start)\nutils.get_single_normal_form_parameters(model0, printcoefs=True)\nscores0 = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nmodel0.fit(xs_train[-1], t=dt, multiple_trajectories=False)\nmodel0.print()\nstop = timeit.default_timer()\nprint(stop - start)\nutils.get_single_normal_form_parameters(model0, printcoefs=True)\nscores0 = []\nfor i in range(len(us)):\n    scores0 = scores0 + [\n        model0.score(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nutils.get_single_normal_form_parameters(model0, printcoefs=True)\nscores0 = []\nfor i in range(len(us)):\n    scores0 = scores0 + [\n        model0.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scores0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scores0 = []\nfor i in range(len(us)):\n    scores0 = scores0 + [\n        model0.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,\n            multioutput=\"raw_values\",\n            multiple_trajectories=False,\n        )",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=2,\n    spatial_grid=spatial_grid,\n    temporal_grid=dt * np.arange(500),\n    include_interaction=False,\n    implicit_terms=True,\n    include_bias=True,\n    function_names=function_names,\n    differentiation_method=ps.SpectralDerivative,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: np.abs(x) ** 0.5, lambda x: x]\nfunction_names = [lambda x: x, lambda x: x + x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x, lambda x: x + x]\nparameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.PDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n)\nlib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,\n    num_parameters=1,\n    num_features=2,\n)\nopt = ps.STLSQ(threshold=1e-1, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Y\", \"mu\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train, u=us, t=dt, multiple_trajectories=True)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Y\", \"mu\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"X\", \"Y\", \"mu\"])\nstart = timeit.default_timer()\nmodel.fit(xs_train, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nmodel.fit(xs_train, u=us, t=dt, multiple_trajectories=True)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nscores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,\n            multioutput=\"raw_values\",",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scores = []\nfor i in range(len(us)):\n    scores = scores + [\n        model.score(\n            xs_test[i],\n            u=us[i],\n            t=dt,\n            multioutput=\"raw_values\",\n            multiple_trajectories=False,\n        )",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs2 = np.linspace(0.82, 0.995, 1000)\nalphas, betas = utils.get_normal_form_parameters(model, 1 - bs2, printcoefs=True)\nplt.subplots(2, 1, figsize=(3, 4))\nplt.subplot(2, 1, 1)\nplt.scatter((1 - bs) ** 0.5, 1 - np.mean(scores, axis=1), c=colors[3])\nplt.scatter((1 - bs) ** 0.5, 1 - np.mean(scores0, axis=1), c=colors[4])\nplt.ylabel(\"$1-R^2$\")\nplt.gca().set_xticks([0.1, 0.2, 0.3, 0.4])\nplt.gca().set_xticklabels([])\nplt.xlim((1 - bs2[-1]) ** 0.5, (1 - bs2[0]) ** 0.5)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "bs3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "bs3 = np.linspace(0.82, 0.98, 18)\nXs2 = []\nYs2 = []\nZs2 = []\nfor b in bs3:\n    t1 = 1e3 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs2 = Xs2 + [X]\n    Ys2 = Ys2 + [Y]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Xs2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Xs2 = []\nYs2 = []\nZs2 = []\nfor b in bs3:\n    t1 = 1e3 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs2 = Xs2 + [X]\n    Ys2 = Ys2 + [Y]\n    Zs2 = Zs2 + [Z]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Ys2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Ys2 = []\nZs2 = []\nfor b in bs3:\n    t1 = 1e3 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs2 = Xs2 + [X]\n    Ys2 = Ys2 + [Y]\n    Zs2 = Zs2 + [Z]\nslope, intercept, r_value, p_value, std_err = linregress((1 - bs) ** 0.5, scales)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Zs2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Zs2 = []\nfor b in bs3:\n    t1 = 1e3 / (1 - b)  # Domain size in t directions\n    dt = 5.94804 / 100\n    X, Y, Z = utils.get_homogeneous_oregonator_trajectory(b, t1, dt)\n    Xs2 = Xs2 + [X]\n    Ys2 = Ys2 + [Y]\n    Zs2 = Zs2 + [Z]\nslope, intercept, r_value, p_value, std_err = linregress((1 - bs) ** 0.5, scales)\nscales3 = intercept + slope * (1 - bs3) ** 0.5",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scales3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scales3 = intercept + slope * (1 - bs3) ** 0.5\nXs = []\nYs = []\nfor b in bs3:\n    t1 = 2e1  # Domain size in t directions\n    dt = 1e-2\n    X, Y = utils.get_homogeneous_oregonator_trajectory_fit(model, b, t1, dt)\n    Xs = Xs + [X]\n    Ys = Ys + [Y]\namps = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Xs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Xs = []\nYs = []\nfor b in bs3:\n    t1 = 2e1  # Domain size in t directions\n    dt = 1e-2\n    X, Y = utils.get_homogeneous_oregonator_trajectory_fit(model, b, t1, dt)\n    Xs = Xs + [X]\n    Ys = Ys + [Y]\namps = []\namps2 = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "Ys",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "Ys = []\nfor b in bs3:\n    t1 = 2e1  # Domain size in t directions\n    dt = 1e-2\n    X, Y = utils.get_homogeneous_oregonator_trajectory_fit(model, b, t1, dt)\n    Xs = Xs + [X]\n    Ys = Ys + [Y]\namps = []\namps2 = []\nfor i in range(0, len(bs3)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "amps",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "amps = []\namps2 = []\nfor i in range(0, len(bs3)):\n    X = Xs[i]\n    Y = Ys[i]\n    nt = X.shape[0]\n    period = int(np.median(np.diff(find_peaks(X[nt // 2 :])[0]))) + 1\n    amps = amps + [\n        np.mean((scales3[i] * X[-period:]) ** 2 + (scales3[i] * Y[-period:]) ** 2)\n    ]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "amps2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "amps2 = []\nfor i in range(0, len(bs3)):\n    X = Xs[i]\n    Y = Ys[i]\n    nt = X.shape[0]\n    period = int(np.median(np.diff(find_peaks(X[nt // 2 :])[0]))) + 1\n    amps = amps + [\n        np.mean((scales3[i] * X[-period:]) ** 2 + (scales3[i] * Y[-period:]) ** 2)\n    ]\nfor i in range(0, len(bs3)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scores0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scores0 = np.load(\"data/cgle/cgle_scores0.npy\")\nweak_scores0 = np.load(\"data/cgle/cgle_weak_scores0.npy\")\nscores1 = np.load(\"data/cgle/cgle_scores1.npy\")\nweak_scores1 = np.load(\"data/cgle/cgle_weak_scores1.npy\")\nplt.scatter(\n    scores0[:, 0],\n    1 - scores0[:, 1],\n    label=\"Differential SINDyCP\",\n    color=colors[2],\n    marker=\"+\",",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "weak_scores0",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "weak_scores0 = np.load(\"data/cgle/cgle_weak_scores0.npy\")\nscores1 = np.load(\"data/cgle/cgle_scores1.npy\")\nweak_scores1 = np.load(\"data/cgle/cgle_weak_scores1.npy\")\nplt.scatter(\n    scores0[:, 0],\n    1 - scores0[:, 1],\n    label=\"Differential SINDyCP\",\n    color=colors[2],\n    marker=\"+\",\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scores1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scores1 = np.load(\"data/cgle/cgle_scores1.npy\")\nweak_scores1 = np.load(\"data/cgle/cgle_weak_scores1.npy\")\nplt.scatter(\n    scores0[:, 0],\n    1 - scores0[:, 1],\n    label=\"Differential SINDyCP\",\n    color=colors[2],\n    marker=\"+\",\n)\nplt.scatter(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "weak_scores1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "weak_scores1 = np.load(\"data/cgle/cgle_weak_scores1.npy\")\nplt.scatter(\n    scores0[:, 0],\n    1 - scores0[:, 1],\n    label=\"Differential SINDyCP\",\n    color=colors[2],\n    marker=\"+\",\n)\nplt.scatter(\n    weak_scores0[:, 0], 1 - weak_scores0[:, 1], label=\"Weak SINDyCP\", color=colors[2]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "nums = [2, 3, 4, 5]\nscores2 = np.load(\"data/cgle/cgle_scores2.npy\")\nweak_scores2 = np.load(\"data/cgle/cgle_weak_scores2.npy\")\nfor i in range(len(scores2)):\n    samples = scores2[i, :, 0]\n    scores = scores2[i, :, 1]\n    plt.scatter(samples, 1 - scores, marker=\"+\", c=colors[i])\nfor i in range(len(weak_scores2)):\n    samples = weak_scores2[i, :, 0]\n    scores = weak_scores2[i, :, 1]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "scores2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "scores2 = np.load(\"data/cgle/cgle_scores2.npy\")\nweak_scores2 = np.load(\"data/cgle/cgle_weak_scores2.npy\")\nfor i in range(len(scores2)):\n    samples = scores2[i, :, 0]\n    scores = scores2[i, :, 1]\n    plt.scatter(samples, 1 - scores, marker=\"+\", c=colors[i])\nfor i in range(len(weak_scores2)):\n    samples = weak_scores2[i, :, 0]\n    scores = weak_scores2[i, :, 1]\n    plt.scatter(samples, 1 - scores, label=r\"$n_t=\" + str(nums[i]) + \"$\", c=colors[i])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "weak_scores2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "weak_scores2 = np.load(\"data/cgle/cgle_weak_scores2.npy\")\nfor i in range(len(scores2)):\n    samples = scores2[i, :, 0]\n    scores = scores2[i, :, 1]\n    plt.scatter(samples, 1 - scores, marker=\"+\", c=colors[i])\nfor i in range(len(weak_scores2)):\n    samples = weak_scores2[i, :, 0]\n    scores = weak_scores2[i, :, 1]\n    plt.scatter(samples, 1 - scores, label=r\"$n_t=\" + str(nums[i]) + \"$\", c=colors[i])\nplt.ylim(10**-15, 10)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "ax1 = ax[0]\nax2 = ax[1]\nh1, l1 = ax1.get_legend_handles_labels()\nh2, l2 = ax2.get_legend_handles_labels()\nax1.legend(h1, l1, bbox_to_anchor=(0, 1.6, 2.2, -0.15), loc=9, ncol=4)\nax2.legend(h2, l2, bbox_to_anchor=(-1.1, 1.4, 2.2, -0.15), loc=9, ncol=4)\nplt.savefig(\"fig3.pdf\")\nplt.show()\n# ### Swift Hohenberg\n# We next consider the Swift Hohenber equation",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "ax2 = ax[1]\nh1, l1 = ax1.get_legend_handles_labels()\nh2, l2 = ax2.get_legend_handles_labels()\nax1.legend(h1, l1, bbox_to_anchor=(0, 1.6, 2.2, -0.15), loc=9, ncol=4)\nax2.legend(h2, l2, bbox_to_anchor=(-1.1, 1.4, 2.2, -0.15), loc=9, ncol=4)\nplt.savefig(\"fig3.pdf\")\nplt.show()\n# ### Swift Hohenberg\n# We next consider the Swift Hohenber equation\n#",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "nx",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "nx = 256\nN = nx\nL = 2 * np.pi * 32\nt1 = 5\nt3 = 0\ndt = 0.02\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "N = nx\nL = 2 * np.pi * 32\nt1 = 5\nt3 = 0\ndt = 0.02\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "L = 2 * np.pi * 32\nt1 = 5\nt3 = 0\ndt = 0.02\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]\nspatiotemporal_grid[:, :, 1] = dt * np.arange(int(t1 / dt))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "t1 = 5\nt3 = 0\ndt = 0.02\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]\nspatiotemporal_grid[:, :, 1] = dt * np.arange(int(t1 / dt))\n# Randomly generate a relationship between the normal-form parameters $(r, b_3, b_5)$ and an experimental control parameter $\\varepsilon$",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "t3 = 0\ndt = 0.02\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]\nspatiotemporal_grid[:, :, 1] = dt * np.arange(int(t1 / dt))\n# Randomly generate a relationship between the normal-form parameters $(r, b_3, b_5)$ and an experimental control parameter $\\varepsilon$\n# In[32]:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "dt = 0.02\nnt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]\nspatiotemporal_grid[:, :, 1] = dt * np.arange(int(t1 / dt))\n# Randomly generate a relationship between the normal-form parameters $(r, b_3, b_5)$ and an experimental control parameter $\\varepsilon$\n# In[32]:\nnp.random.seed(66)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "nt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "nt = int((t1 - t3) / dt)\nspatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]\nspatiotemporal_grid[:, :, 1] = dt * np.arange(int(t1 / dt))\n# Randomly generate a relationship between the normal-form parameters $(r, b_3, b_5)$ and an experimental control parameter $\\varepsilon$\n# In[32]:\nnp.random.seed(66)\norder = 3",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "spatial_grid",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "spatial_grid = np.zeros((nx, 1))\nspatial_grid[:, 0] = (np.arange(nx) - nx // 2) * L / nx\nspatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]\nspatiotemporal_grid[:, :, 1] = dt * np.arange(int(t1 / dt))\n# Randomly generate a relationship between the normal-form parameters $(r, b_3, b_5)$ and an experimental control parameter $\\varepsilon$\n# In[32]:\nnp.random.seed(66)\norder = 3\nrcoeff = 2 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "spatiotemporal_grid",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "spatiotemporal_grid = np.zeros((nx, int(t1 / dt), 2))\nspatiotemporal_grid[:, :, :1] = spatial_grid[:, np.newaxis, :]\nspatiotemporal_grid[:, :, 1] = dt * np.arange(int(t1 / dt))\n# Randomly generate a relationship between the normal-form parameters $(r, b_3, b_5)$ and an experimental control parameter $\\varepsilon$\n# In[32]:\nnp.random.seed(66)\norder = 3\nrcoeff = 2 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)\nb3coeff = 10 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)\nb5coeff = 1 * (np.random.random(size=order)) / 10 ** np.arange(order)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "order = 3\nrcoeff = 2 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)\nb3coeff = 10 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)\nb5coeff = 1 * (np.random.random(size=order)) / 10 ** np.arange(order)\ndef r_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(\n        rcoeff[np.newaxis, :]\n        * epsilons[:, np.newaxis] ** np.arange(len(rcoeff))[np.newaxis, :],\n        axis=1,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "rcoeff",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "rcoeff = 2 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)\nb3coeff = 10 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)\nb5coeff = 1 * (np.random.random(size=order)) / 10 ** np.arange(order)\ndef r_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(\n        rcoeff[np.newaxis, :]\n        * epsilons[:, np.newaxis] ** np.arange(len(rcoeff))[np.newaxis, :],\n        axis=1,\n    )",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b3coeff",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "b3coeff = 10 * (np.random.random(size=order) - 0.5) / 10 ** np.arange(order)\nb5coeff = 1 * (np.random.random(size=order)) / 10 ** np.arange(order)\ndef r_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(\n        rcoeff[np.newaxis, :]\n        * epsilons[:, np.newaxis] ** np.arange(len(rcoeff))[np.newaxis, :],\n        axis=1,\n    )\ndef b3_func(epsilons):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b5coeff",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "b5coeff = 1 * (np.random.random(size=order)) / 10 ** np.arange(order)\ndef r_func(epsilons):\n    epsilons = np.asarray(epsilons)\n    return np.sum(\n        rcoeff[np.newaxis, :]\n        * epsilons[:, np.newaxis] ** np.arange(len(rcoeff))[np.newaxis, :],\n        axis=1,\n    )\ndef b3_func(epsilons):\n    epsilons = np.asarray(epsilons)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "epsilons",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "epsilons = np.arange(0, 3, 0.1)\ninds = np.intersect1d(\n    np.where(r_func(epsilons) < 0)[0], np.where(b3_func(epsilons) > 0)[0]\n)\n# Generate the high-$\\varepsilon$ and low-$\\varepsilon$ training and testing data\n# In[33]:\nnum_trajectories = 5\nnp.random.seed(100)\nepsilons_train = 1 + 2 * (np.random.random(size=num_trajectories))\nrs = r_func(epsilons_train)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "inds",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "inds = np.intersect1d(\n    np.where(r_func(epsilons) < 0)[0], np.where(b3_func(epsilons) > 0)[0]\n)\n# Generate the high-$\\varepsilon$ and low-$\\varepsilon$ training and testing data\n# In[33]:\nnum_trajectories = 5\nnp.random.seed(100)\nepsilons_train = 1 + 2 * (np.random.random(size=num_trajectories))\nrs = r_func(epsilons_train)\nb3s = b3_func(epsilons_train)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "num_trajectories",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "num_trajectories = 5\nnp.random.seed(100)\nepsilons_train = 1 + 2 * (np.random.random(size=num_trajectories))\nrs = r_func(epsilons_train)\nb3s = b3_func(epsilons_train)\nb5s = b5_func(epsilons_train)\nk = 2\nxs_train = []\nxs_test = []\nfor i in range(len(rs)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "epsilons_train",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "epsilons_train = 1 + 2 * (np.random.random(size=num_trajectories))\nrs = r_func(epsilons_train)\nb3s = b3_func(epsilons_train)\nb5s = b5_func(epsilons_train)\nk = 2\nxs_train = []\nxs_test = []\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "rs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "rs = r_func(epsilons_train)\nb3s = b3_func(epsilons_train)\nb5s = b5_func(epsilons_train)\nk = 2\nxs_train = []\nxs_test = []\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train = xs_train + [us]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b3s",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "b3s = b3_func(epsilons_train)\nb5s = b5_func(epsilons_train)\nk = 2\nxs_train = []\nxs_test = []\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train = xs_train + [us]\nfor i in range(len(rs)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b5s",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "b5s = b5_func(epsilons_train)\nk = 2\nxs_train = []\nxs_test = []\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train = xs_train + [us]\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "k = 2\nxs_train = []\nxs_test = []\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train = xs_train + [us]\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train = []\nxs_test = []\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train = xs_train + [us]\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_test = xs_test + [us]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test = []\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train = xs_train + [us]\nfor i in range(len(rs)):\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_test = xs_test + [us]\nnum_trajectories = 5",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "num_trajectories",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "num_trajectories = 5\nnp.random.seed(100)\nepsilons_train2 = -1 + 2 * (np.random.random(size=num_trajectories))\ntrajectories = 100\nrs = r_func(epsilons_train2)\nb3s = b3_func(epsilons_train2)\nb5s = b5_func(epsilons_train2)\nk = 2\nxs_train2 = []\nxs_test2 = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "epsilons_train2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "epsilons_train2 = -1 + 2 * (np.random.random(size=num_trajectories))\ntrajectories = 100\nrs = r_func(epsilons_train2)\nb3s = b3_func(epsilons_train2)\nb5s = b5_func(epsilons_train2)\nk = 2\nxs_train2 = []\nxs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "trajectories",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "trajectories = 100\nrs = r_func(epsilons_train2)\nb3s = b3_func(epsilons_train2)\nb5s = b5_func(epsilons_train2)\nk = 2\nxs_train2 = []\nxs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "rs",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "rs = r_func(epsilons_train2)\nb3s = b3_func(epsilons_train2)\nb5s = b5_func(epsilons_train2)\nk = 2\nxs_train2 = []\nxs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b3s",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "b3s = b3_func(epsilons_train2)\nb5s = b5_func(epsilons_train2)\nk = 2\nxs_train2 = []\nxs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "b5s",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "b5s = b5_func(epsilons_train2)\nk = 2\nxs_train2 = []\nxs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train2 = xs_train2 + [us]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "k = 2\nxs_train2 = []\nxs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train2 = xs_train2 + [us]\nfor i in range(len(rs)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train2 = []\nxs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train2 = xs_train2 + [us]\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test2 = []\nseeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train2 = xs_train2 + [us]\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "seeds",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "seeds = np.arange(num_trajectories)\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)\n    xs_train2 = xs_train2 + [us]\nfor i in range(len(rs)):\n    np.random.seed(seeds[i])\n    u0 = utils.get_sh_ic(1.0, spatial_grid)\n    us = utils.get_sh_trajectory(u0, rs[i], b3s[i], b5s[i], t1, dt, spatial_grid)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "noise_scale",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "noise_scale = 0.05\nnp.random.seed(1)\nxs_train_noisy = [\n    xs_train[i] + noise_scale * np.random.normal(size=xs_train[i].shape)\n    for i in range(len(xs_train))\n]\nxs_test_noisy = [\n    xs_test[i] + noise_scale * np.random.normal(size=xs_test[i].shape)\n    for i in range(len(xs_test))\n]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train_noisy",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train_noisy = [\n    xs_train[i] + noise_scale * np.random.normal(size=xs_train[i].shape)\n    for i in range(len(xs_train))\n]\nxs_test_noisy = [\n    xs_test[i] + noise_scale * np.random.normal(size=xs_test[i].shape)\n    for i in range(len(xs_test))\n]\nnoise_scale = 0.01\nnp.random.seed(1)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test_noisy",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test_noisy = [\n    xs_test[i] + noise_scale * np.random.normal(size=xs_test[i].shape)\n    for i in range(len(xs_test))\n]\nnoise_scale = 0.01\nnp.random.seed(1)\nxs_train_noisy2 = [\n    xs_train[i] + noise_scale * np.random.normal(size=xs_train[i].shape)\n    for i in range(len(xs_train))\n]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "noise_scale",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "noise_scale = 0.01\nnp.random.seed(1)\nxs_train_noisy2 = [\n    xs_train[i] + noise_scale * np.random.normal(size=xs_train[i].shape)\n    for i in range(len(xs_train))\n]\nxs_test_noisy2 = [\n    xs_test[i] + noise_scale * np.random.normal(size=xs_test[i].shape)\n    for i in range(len(xs_test))\n]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train_noisy2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train_noisy2 = [\n    xs_train[i] + noise_scale * np.random.normal(size=xs_train[i].shape)\n    for i in range(len(xs_train))\n]\nxs_test_noisy2 = [\n    xs_test[i] + noise_scale * np.random.normal(size=xs_test[i].shape)\n    for i in range(len(xs_test))\n]\nfig, ax = plt.subplots(2, 5, figsize=(12, 5))\nfor i in range(len(xs_train)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test_noisy2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test_noisy2 = [\n    xs_test[i] + noise_scale * np.random.normal(size=xs_test[i].shape)\n    for i in range(len(xs_test))\n]\nfig, ax = plt.subplots(2, 5, figsize=(12, 5))\nfor i in range(len(xs_train)):\n    plt.subplot(2, 5, i + 1)\n    plt.imshow(\n        ps.FiniteDifference(d=1, axis=1)._differentiate(xs_train_noisy[i], t=dt),\n        aspect=xs_train[0].shape[1] / xs_train[0].shape[0],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "cb",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "cb = plt.colorbar(ax=ax[:][:], fraction=0.015)\ncb.set_label(r\"$\\dot{u}$\", rotation=\"horizontal\", loc=\"top\")\nplt.savefig(\"figs5.pdf\")\nplt.show()\n# In[35]:\nstart = timeit.default_timer()\nlibrary_functions = [lambda x: x, lambda x: x**3, lambda x: x**5]\nfunction_names = [lambda x: x, lambda x: x + x + x, lambda x: x + x + x + x + x]\nseed = 100\nK = 1000",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nlibrary_functions = [lambda x: x, lambda x: x**3, lambda x: x**5]\nfunction_names = [lambda x: x, lambda x: x + x + x, lambda x: x + x + x + x + x]\nseed = 100\nK = 1000\nH_xt = [L / 32, t1 / 5]\nnp.random.seed(seed)\nfeature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=4,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: x, lambda x: x**3, lambda x: x**5]\nfunction_names = [lambda x: x, lambda x: x + x + x, lambda x: x + x + x + x + x]\nseed = 100\nK = 1000\nH_xt = [L / 32, t1 / 5]\nnp.random.seed(seed)\nfeature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=4,\n    spatiotemporal_grid=spatiotemporal_grid,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x, lambda x: x + x + x, lambda x: x + x + x + x + x]\nseed = 100\nK = 1000\nH_xt = [L / 32, t1 / 5]\nnp.random.seed(seed)\nfeature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=4,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "seed = 100\nK = 1000\nH_xt = [L / 32, t1 / 5]\nnp.random.seed(seed)\nfeature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=4,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "K = 1000\nH_xt = [L / 32, t1 / 5]\nnp.random.seed(seed)\nfeature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=4,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,\n    multiindices=[[2], [4]],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "H_xt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "H_xt = [L / 32, t1 / 5]\nnp.random.seed(seed)\nfeature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=4,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,\n    multiindices=[[2], [4]],\n    K=K,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "feature_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=4,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,\n    multiindices=[[2], [4]],\n    K=K,\n    H_xt=H_xt,\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: x, lambda x: x**2]\nfunction_names = [lambda x: x, lambda x: x + \"^2\"]\nnp.random.seed(seed)\nparameter_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x, lambda x: x + \"^2\"]\nnp.random.seed(seed)\nparameter_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n    K=K,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "parameter_lib = ps.WeakPDELibrary(\n    library_functions=library_functions,\n    derivative_order=0,\n    spatiotemporal_grid=spatiotemporal_grid,\n    include_interaction=False,\n    function_names=function_names,\n    include_bias=True,\n    K=K,\n    H_xt=H_xt,\n)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    parameter_library=parameter_lib,\n    feature_library=feature_lib,\n    num_parameters=1,\n    num_features=1,\n)\nopt = ps.STLSQ(threshold=1e-3, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"u\", \"epsilon\"])\nmodel.fit(\n    xs_train_noisy,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-3, alpha=1e-12, normalize_columns=False)\nmodel = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"u\", \"epsilon\"])\nmodel.fit(\n    xs_train_noisy,\n    u=epsilons_train.tolist(),\n    t=dt,\n    multiple_trajectories=True,\n)\nmodel.print()\nstop = timeit.default_timer()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "model = ps.SINDy(feature_library=lib, optimizer=opt, feature_names=[\"u\", \"epsilon\"])\nmodel.fit(\n    xs_train_noisy,\n    u=epsilons_train.tolist(),\n    t=dt,\n    multiple_trajectories=True,\n)\nmodel.print()\nstop = timeit.default_timer()\nprint(stop - start)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"u\", \"epsilon\"]))\nutils.get_sh_coefficients(model, print_coeffs=True)\nprint(\n    model.score(\n        xs_test_noisy, u=epsilons_train.tolist(), t=dt, multiple_trajectories=True\n    )\n)\nprint()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"u\", \"epsilon\"]))\n(\n    r_func_fit,\n    b3_func_fit,\n    b5_func_fit,\n    uxx_func_fit,\n    uxxxx_func_fit,\n) = utils.get_sh_coefficients(model, print_coeffs=True)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": ")",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": ") = utils.get_sh_coefficients(model, print_coeffs=True)\nprint(\n    model.score(\n        xs_test_noisy2, u=epsilons_train.tolist(), t=dt, multiple_trajectories=True\n    )\n)\n# Fit the low-$\\varepsilon$ data with weak SINDyCP with noise intensity $\\sigma=0.05$ and $\\sigma=0.01$\n# In[36]:\nnoise_scale = 0.05\nnp.random.seed(1)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "noise_scale",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "noise_scale = 0.05\nnp.random.seed(1)\nxs_train_noisy3 = [\n    xs_train2[i] + noise_scale * np.random.normal(size=xs_train2[i].shape)\n    for i in range(len(xs_train2))\n]\nxs_test_noisy3 = [\n    xs_test2[i] + noise_scale * np.random.normal(size=xs_test2[i].shape)\n    for i in range(len(xs_test2))\n]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train_noisy3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train_noisy3 = [\n    xs_train2[i] + noise_scale * np.random.normal(size=xs_train2[i].shape)\n    for i in range(len(xs_train2))\n]\nxs_test_noisy3 = [\n    xs_test2[i] + noise_scale * np.random.normal(size=xs_test2[i].shape)\n    for i in range(len(xs_test2))\n]\nnoise_scale = 0.01\nnp.random.seed(1)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test_noisy3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test_noisy3 = [\n    xs_test2[i] + noise_scale * np.random.normal(size=xs_test2[i].shape)\n    for i in range(len(xs_test2))\n]\nnoise_scale = 0.01\nnp.random.seed(1)\nxs_train_noisy4 = [\n    xs_train2[i] + noise_scale * np.random.normal(size=xs_train2[i].shape)\n    for i in range(len(xs_train2))\n]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "noise_scale",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "noise_scale = 0.01\nnp.random.seed(1)\nxs_train_noisy4 = [\n    xs_train2[i] + noise_scale * np.random.normal(size=xs_train2[i].shape)\n    for i in range(len(xs_train2))\n]\nxs_test_noisy4 = [\n    xs_test2[i] + noise_scale * np.random.normal(size=xs_test2[i].shape)\n    for i in range(len(xs_test2))\n]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_train_noisy4",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_train_noisy4 = [\n    xs_train2[i] + noise_scale * np.random.normal(size=xs_train2[i].shape)\n    for i in range(len(xs_train2))\n]\nxs_test_noisy4 = [\n    xs_test2[i] + noise_scale * np.random.normal(size=xs_test2[i].shape)\n    for i in range(len(xs_test2))\n]\nfig, ax = plt.subplots(2, 5, figsize=(12, 5))\nfor i in range(len(xs_train)):",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test_noisy4",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test_noisy4 = [\n    xs_test2[i] + noise_scale * np.random.normal(size=xs_test2[i].shape)\n    for i in range(len(xs_test2))\n]\nfig, ax = plt.subplots(2, 5, figsize=(12, 5))\nfor i in range(len(xs_train)):\n    plt.subplot(2, 5, i + 1)\n    plt.imshow(\n        ps.FiniteDifference(d=1, axis=1)._differentiate(xs_train_noisy3[i], t=dt),\n        aspect=xs_train2[0].shape[1] / xs_train2[0].shape[0],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "cb",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "cb = plt.colorbar(ax=ax[:][:], fraction=0.015)\ncb.set_label(r\"$\\dot{u}$\", rotation=\"horizontal\", loc=\"top\")\nplt.savefig(\"figs6.pdf\")\nplt.show()\n# In[37]:\nstart = timeit.default_timer()\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x: x**3,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nlibrary_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x: x**3,\n    lambda x: x**4,\n    lambda x: x**5,\n]\nfunction_names = [\n    lambda x: x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [\n    lambda x: x,\n    lambda x: x**2,\n    lambda x: x**3,\n    lambda x: x**4,\n    lambda x: x**5,\n]\nfunction_names = [\n    lambda x: x,\n    lambda x: x + x,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [\n    lambda x: x,\n    lambda x: x + x,\n    lambda x: x + x + x,\n    lambda x: x + x + x + x,\n    lambda x: x + x + x + x + x,\n]\nlibrary_functions = [lambda x: x, lambda x: x**3, lambda x: x**5]\nfunction_names = [lambda x: x, lambda x: x + x + x, lambda x: x + x + x + x + x]\nmodel.fit(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "library_functions = [lambda x: x, lambda x: x**3, lambda x: x**5]\nfunction_names = [lambda x: x, lambda x: x + x + x, lambda x: x + x + x + x + x]\nmodel.fit(\n    xs_train_noisy3,\n    u=epsilons_train2.tolist(),\n    t=dt,\n    multiple_trajectories=True,\n    unbias=True,\n)\nmodel.print()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "function_names",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "function_names = [lambda x: x, lambda x: x + x + x, lambda x: x + x + x + x + x]\nmodel.fit(\n    xs_train_noisy3,\n    u=epsilons_train2.tolist(),\n    t=dt,\n    multiple_trajectories=True,\n    unbias=True,\n)\nmodel.print()\nstop = timeit.default_timer()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"u\", \"epsilon\"]))\nutils.get_sh_coefficients(model, print_coeffs=True)\nprint(\n    model.score(\n        xs_test_noisy3, u=epsilons_train2.tolist(), t=dt, multiple_trajectories=True\n    )\n)\nprint()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\nprint(lib.get_feature_names([\"u\", \"epsilon\"]))\nutils.get_sh_coefficients(model, print_coeffs=True)\nprint(\n    model.score(\n        xs_test_noisy4, u=epsilons_train2.tolist(), t=dt, multiple_trajectories=True\n    )\n)\n# Plot the normal form parameters and continuation results",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "epsilons",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "epsilons = np.arange(-1, 3, 0.1)\nmn = np.min([r_func(epsilons), b3_func(epsilons), b5_func(epsilons)])\nmx = np.max([r_func(epsilons), b3_func(epsilons), b5_func(epsilons)])\nfor epsilon in epsilons_train:\n    plt.plot([epsilon, epsilon], [mx, mn], ls=\":\", c=\"red\")\nplt.plot([0, 0], [mx, mn], ls=\":\", c=\"black\")\nline1 = plt.plot(epsilons, r_func(epsilons), label=\"$d$\")\nline2 = plt.plot(epsilons, b3_func(epsilons), label=\"$e$\")\nline3 = plt.plot(epsilons, b5_func(epsilons), label=\"$f$\")\nplt.plot(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "mn",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "mn = np.min([r_func(epsilons), b3_func(epsilons), b5_func(epsilons)])\nmx = np.max([r_func(epsilons), b3_func(epsilons), b5_func(epsilons)])\nfor epsilon in epsilons_train:\n    plt.plot([epsilon, epsilon], [mx, mn], ls=\":\", c=\"red\")\nplt.plot([0, 0], [mx, mn], ls=\":\", c=\"black\")\nline1 = plt.plot(epsilons, r_func(epsilons), label=\"$d$\")\nline2 = plt.plot(epsilons, b3_func(epsilons), label=\"$e$\")\nline3 = plt.plot(epsilons, b5_func(epsilons), label=\"$f$\")\nplt.plot(\n    epsilons,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "mx",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "mx = np.max([r_func(epsilons), b3_func(epsilons), b5_func(epsilons)])\nfor epsilon in epsilons_train:\n    plt.plot([epsilon, epsilon], [mx, mn], ls=\":\", c=\"red\")\nplt.plot([0, 0], [mx, mn], ls=\":\", c=\"black\")\nline1 = plt.plot(epsilons, r_func(epsilons), label=\"$d$\")\nline2 = plt.plot(epsilons, b3_func(epsilons), label=\"$e$\")\nline3 = plt.plot(epsilons, b5_func(epsilons), label=\"$f$\")\nplt.plot(\n    epsilons,\n    1 - (r_func_fit(epsilons) - 1) / uxxxx_func_fit(epsilons),",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "line1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "line1 = plt.plot(epsilons, r_func(epsilons), label=\"$d$\")\nline2 = plt.plot(epsilons, b3_func(epsilons), label=\"$e$\")\nline3 = plt.plot(epsilons, b5_func(epsilons), label=\"$f$\")\nplt.plot(\n    epsilons,\n    1 - (r_func_fit(epsilons) - 1) / uxxxx_func_fit(epsilons),\n    c=line1[0].get_color(),\n    ls=\"--\",\n)\nplt.plot(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "line2",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "line2 = plt.plot(epsilons, b3_func(epsilons), label=\"$e$\")\nline3 = plt.plot(epsilons, b5_func(epsilons), label=\"$f$\")\nplt.plot(\n    epsilons,\n    1 - (r_func_fit(epsilons) - 1) / uxxxx_func_fit(epsilons),\n    c=line1[0].get_color(),\n    ls=\"--\",\n)\nplt.plot(\n    epsilons,",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "line3",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "line3 = plt.plot(epsilons, b5_func(epsilons), label=\"$f$\")\nplt.plot(\n    epsilons,\n    1 - (r_func_fit(epsilons) - 1) / uxxxx_func_fit(epsilons),\n    c=line1[0].get_color(),\n    ls=\"--\",\n)\nplt.plot(\n    epsilons,\n    -b3_func_fit(epsilons) / uxxxx_func_fit(epsilons),",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "nx",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "nx = 256\nL = 2 * np.pi * 16\nt1 = 50\nN = nx\ndt = 1\nepsilon = 0.0\nk = 2\nxs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "L = 2 * np.pi * 16\nt1 = 50\nN = nx\ndt = 1\nepsilon = 0.0\nk = 2\nxs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "t1 = 50\nN = nx\ndt = 1\nepsilon = 0.0\nk = 2\nxs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "N = nx\ndt = 1\nepsilon = 0.0\nk = 2\nxs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)\n    ks = np.arange(-20, 21) / L",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "dt = 1\nepsilon = 0.0\nk = 2\nxs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)\n    ks = np.arange(-20, 21) / L\n    u0 = np.zeros((nx), dtype=np.complex128)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "epsilon",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "epsilon = 0.0\nk = 2\nxs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)\n    ks = np.arange(-20, 21) / L\n    u0 = np.zeros((nx), dtype=np.complex128)\n    scale0 = 0.5",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "k = 2\nxs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)\n    ks = np.arange(-20, 21) / L\n    u0 = np.zeros((nx), dtype=np.complex128)\n    scale0 = 0.5\n    for kx in ks:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "xs_test",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "xs_test = []\nseeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)\n    ks = np.arange(-20, 21) / L\n    u0 = np.zeros((nx), dtype=np.complex128)\n    scale0 = 0.5\n    for kx in ks:\n        scale = scale0 / (1 + np.abs(L * kx) ** 0.5)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "seeds",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "seeds = [1, 5]\nstart = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)\n    ks = np.arange(-20, 21) / L\n    u0 = np.zeros((nx), dtype=np.complex128)\n    scale0 = 0.5\n    for kx in ks:\n        scale = scale0 / (1 + np.abs(L * kx) ** 0.5)\n        u0 += (",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "start = timeit.default_timer()\nfor i in seeds:\n    np.random.seed(i)\n    ks = np.arange(-20, 21) / L\n    u0 = np.zeros((nx), dtype=np.complex128)\n    scale0 = 0.5\n    for kx in ks:\n        scale = scale0 / (1 + np.abs(L * kx) ** 0.5)\n        u0 += (\n            scale",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "stop = timeit.default_timer()\nprint(stop - start)\n# In[40]:\nplt.subplots(2, 1, figsize=(4, 6))\nplt.subplot(2, 1, 1)\nu = xs_test[0][:, -1]\nux = ps.SpectralDerivative(d=1, axis=0)._differentiate(u, L / nx)\nu = np.roll(u, nx // 2 - np.argmax(ux) + 1)\nplt.plot(u, c=colors[5])\nplt.ylim(-1.6, 1.6)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "u = xs_test[0][:, -1]\nux = ps.SpectralDerivative(d=1, axis=0)._differentiate(u, L / nx)\nu = np.roll(u, nx // 2 - np.argmax(ux) + 1)\nplt.plot(u, c=colors[5])\nplt.ylim(-1.6, 1.6)\nplt.ylabel(\"$u$\")\nplt.gca().set_xticks([0, 128, 256])\nplt.gca().set_xticklabels([])\nplt.subplot(2, 1, 2)\nu = xs_test[1][:, -1]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "ux",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "ux = ps.SpectralDerivative(d=1, axis=0)._differentiate(u, L / nx)\nu = np.roll(u, nx // 2 - np.argmax(ux) + 1)\nplt.plot(u, c=colors[5])\nplt.ylim(-1.6, 1.6)\nplt.ylabel(\"$u$\")\nplt.gca().set_xticks([0, 128, 256])\nplt.gca().set_xticklabels([])\nplt.subplot(2, 1, 2)\nu = xs_test[1][:, -1]\nu = np.roll(u, nx // 2 - np.argmin(u) + 1)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "u = np.roll(u, nx // 2 - np.argmax(ux) + 1)\nplt.plot(u, c=colors[5])\nplt.ylim(-1.6, 1.6)\nplt.ylabel(\"$u$\")\nplt.gca().set_xticks([0, 128, 256])\nplt.gca().set_xticklabels([])\nplt.subplot(2, 1, 2)\nu = xs_test[1][:, -1]\nu = np.roll(u, nx // 2 - np.argmin(u) + 1)\nplt.plot(u, c=colors[6])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "u = xs_test[1][:, -1]\nu = np.roll(u, nx // 2 - np.argmin(u) + 1)\nplt.plot(u, c=colors[6])\nplt.ylim(-1.6, 1.6)\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$u$\")\nplt.gca().set_xticks([0, 128, 256])\nplt.gca().set_xticklabels([\"$-L/2$\", \"$0$\", \"$L/2$\"])\nplt.savefig(\"fig4b.pdf\")\n# Compare the snaking bifurcations for the fits and the actual equations",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "u = np.roll(u, nx // 2 - np.argmin(u) + 1)\nplt.plot(u, c=colors[6])\nplt.ylim(-1.6, 1.6)\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$u$\")\nplt.gca().set_xticks([0, 128, 256])\nplt.gca().set_xticklabels([\"$-L/2$\", \"$0$\", \"$L/2$\"])\nplt.savefig(\"fig4b.pdf\")\n# Compare the snaking bifurcations for the fits and the actual equations\n# In[41]:",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lab = True\nfor branch in stable:\n    if lab:\n        plt.plot(branch[0], branch[1], c=colors[1], label=r\"$\\sigma=0.01$\")\n        lab = False\n    else:\n        plt.plot(branch[0], branch[1], c=colors[1])\nfor branch in unstable:\n    plt.plot(branch[0], branch[1], ls=\":\", c=colors[1])\nunstable, stable = utils.get_auto_branches(\"data/auto/even2\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lab = True\nfor branch in stable:\n    if lab:\n        plt.plot(branch[0], branch[1], c=colors[2], label=r\"$\\sigma=0.05$\")\n        lab = False\n    else:\n        plt.plot(branch[0], branch[1], c=colors[2])\nfor branch in unstable:\n    plt.plot(branch[0], branch[1], ls=\":\", c=colors[2])\nunstable, stable = utils.get_auto_branches(\"data/auto/even4\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lab = True\nfor branch in stable:\n    if lab:\n        plt.plot(branch[0], branch[1], c=colors[1], label=r\"$\\sigma=0.01$\")\n        lab = False\n    else:\n        plt.plot(branch[0], branch[1], c=colors[1])\nfor branch in unstable:\n    plt.plot(branch[0], branch[1], ls=\":\", c=colors[1])\nunstable, stable = utils.get_auto_branches(\"data/auto/even3\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.example",
        "description": "pysindy.examples.17_parameterized_pattern_formation.example",
        "peekOfCode": "lab = True\nfor branch in stable:\n    if lab:\n        plt.plot(branch[0], branch[1], c=colors[2], label=r\"$\\sigma=0.05$\")\n        lab = False\n    else:\n        plt.plot(branch[0], branch[1], c=colors[2])\nfor branch in unstable:\n    plt.plot(branch[0], branch[1], ls=\":\", c=colors[2])\nunstable, stable = utils.get_auto_branches(\"data/auto/even5\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.example",
        "documentation": {}
    },
    {
        "label": "get_lorenz_trajectories",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_lorenz_trajectories(sigmas, rhos, betas, dt):\n    \"\"\"\n    Generate a set of trajectories for the Lorenz ODEs.\n    Parameters:\n        sigmas: List of the sigma values.\n        rhos: List of the rho values.\n        betas: List of the beta values.\n        dt: time step.\n    \"\"\"\n    x_trains = []",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_cgle_ic",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_cgle_ic(scale0, scale2, spatial_grid):\n    \"\"\"\n    Generate an initial condition for the CGLE.\n    Parameters:\n        scale0: scale of the random component.\n        scale2: scale of the plane-wave component.\n        spatial_grid: Spatial grid (assumed to be uniform).\n    \"\"\"\n    nx = spatial_grid.shape[0]\n    ny = spatial_grid.shape[1]",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_cgle_trajectory",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_cgle_trajectory(b, c, x0, t1, t3, dt, spatial_grid):\n    \"\"\"\n    Generate an trajectory for the CGLE.\n    Parameters:\n        b: diffusive CGLE parameter.\n        c: nonlinear CGLE parameter.\n        x0: initial condition\n        t1: total integration time\n        t3: time to start recording states\n        dt: time step",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "save_cgle_test_trajectories",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def save_cgle_test_trajectories():\n    \"\"\"\n    Save test trajectories with  b=2,1.5 and c=1.5,1.0 if not present.\n    \"\"\"\n    nx = 128\n    ny = 128\n    L = 16\n    t1 = 2e2\n    t3 = 1.9e2\n    dt = 1e-1",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "save_cgle_random_trajectories",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def save_cgle_random_trajectories():\n    \"\"\"\n    Save training CGLE trajectories with random values of b and c if not present.\n    \"\"\"\n    nx = 128\n    ny = 128\n    L = 16\n    t1 = 2e2\n    t3 = 1.9e2\n    dt = 1e-1",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "cgle_noise_sweeps",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def cgle_noise_sweeps():\n    \"\"\"\n    Run the differential SINDyCP fit with varying noise intensities and save the data.\n    \"\"\"\n    num = 10\n    noisemin = -5\n    noisemax = -1\n    intensities = 10 ** (noisemin + np.arange(num) / (num - 1) * (noisemax - noisemin))\n    nx = 128\n    ny = 128",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "cgle_weak_noise_sweeps",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def cgle_weak_noise_sweeps():\n    \"\"\"\n    Run the weak SINDyCP fit with varying noise intensities and save the data.\n    \"\"\"\n    num = 10\n    noisemin = -5\n    noisemax = -1\n    intensities = 10 ** (noisemin + np.arange(num) / (num - 1) * (noisemax - noisemin))\n    nx = 128\n    ny = 128",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_oregonator_ic",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_oregonator_ic(scale0, scale2, spatial_grid):\n    \"\"\"\n    Generate an initial condition for the oregonator model.\n    Parameters:\n        scale0: scale of the random component.\n        scale1: scale of the plane wave component.\n        spatial grid: Spatial grid, assumed to be uniform.\n    \"\"\"\n    n = spatial_grid.shape[0]\n    ks = np.arange(-3, 4)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_oregonator_trajectory",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_oregonator_trajectory(u0, b, t1, dt, spatial_grid):\n    \"\"\"\n    Generate a trajectory for the Oregonator PDEs.\n    Parameters:\n        u0: Initial condition.\n        b: Parameter value for the control concentration.\n        t1: Total integration time.\n        dt: time step.\n        spatial_grid: Spatial grid, assumed to be uniform\n    \"\"\"",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "generate_oregonator_trajectories",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def generate_oregonator_trajectories():\n    # Generate amplitudes for the main SINDyCP fit\n    bs = np.linspace(0.88, 0.98, 6)\n    n = 128  # Number of spatial points in each direction\n    Nt = 1000  # Number of temporal interpolation points\n    spatial_grid = np.zeros((n, n, 2))\n    spatial_grid[:, :, 0] = 1.0 / n * np.arange(n)[:, np.newaxis]\n    spatial_grid[:, :, 1] = 1.0 / n * np.arange(n)[np.newaxis, :]\n    X0, Y0, Z0 = get_oregonator_ic(2e-1, 0, spatial_grid)\n    u0 = np.concatenate([X0.ravel(), Y0.ravel(), Z0.ravel()])",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_homogeneous_oregonator_trajectory",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_homogeneous_oregonator_trajectory(b, t1, dt):\n    \"\"\"\n    Generate a trajectory for the homogeneous Oregonator ODEs.\n    Parameters:\n        b: Parameter value for the control concentration.\n        t1: Total integration time.\n        dt: time step.\n    \"\"\"\n    nt = int(np.round(t1 / dt))\n    t = dt * np.arange(nt)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_homogeneous_oregonator_trajectory_fit",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_homogeneous_oregonator_trajectory_fit(model, b, t1, dt):\n    lib = model.feature_library\n    Xts = np.where(\n        [\n            feat.split(\" \")[1] == \"X_t\"\n            for feat in lib.get_feature_names([\"X\", \"Y\", \"mu\"])\n        ]\n    )[0]\n    Yts = np.where(\n        [",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_normal_form_parameters",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_normal_form_parameters(model, us, printcoefs=False):\n    \"\"\"\n    Calculate the nonlinear transformation to compute the normal form parameters.\n    Parameters:\n        model: A fit SINDy model for the Oregonator model with a ParameterizedLibrary.\n        bs: Values of the b parameter to calculate the normal-form parameters\n    \"\"\"\n    lib = model.feature_library\n    opt = model.optimizer\n    Xts = np.where(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_linear_eigenvalues",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_linear_eigenvalues(model, bs, printcoefs=False):\n    \"\"\"\n    Calculate the nonlinear transformation to compute the normal form parameters.\n    Parameters:\n        model: A fit SINDy model for the Oregonator model with a ParameterizedLibrary.\n        bs: Values of the b parameter to calculate the normal-form parameters\n    \"\"\"\n    lib = model.feature_library\n    opt = model.optimizer\n    Xs = np.where(",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "animate_oregonator",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def animate_oregonator():\n    \"\"\"\n    Save an animation for the oregonator model\n    \"\"\"\n    if not os.path.exists(\"animation\"):\n        os.mkdir(\"animation\")\n    bs = np.linspace(0.88, 0.98, 6)\n    xs = [np.load(\"data/oregonator/canard_\" + str(0) + \".npy\")]\n    xs = xs + [\n        np.load(\"data/oregonator/oregonator_\" + str(i) + \".npy\")",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "animate_clge",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def animate_clge(xs, us):\n    \"\"\"\n    Save an animation for the cgle model\n    \"\"\"\n    if not os.path.exists(\"animation\"):\n        os.mkdir(\"animation\")\n    bs = [us[i][0] for i in range(4)]\n    cs = [us[i][1] for i in range(4)]\n    nx = 128\n    ny = 128",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_sh_ic",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_sh_ic(scale0, spatial_grid):\n    \"\"\"\n    Generate an initial condition for the Swift Hohenberg equation.\n    Parameters:\n        scale0: scale of the random component.\n        spatial_grid: Spatial grid (assumed to be uniform).\n    \"\"\"\n    nx = spatial_grid.shape[0]\n    ks = np.arange(-20, 21)\n    u0 = np.zeros((nx), dtype=np.complex128)",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_sh_trajectory",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_sh_trajectory(u0, r, b3, b5, t1, dt, spatial_grid):\n    \"\"\"\n    Generate an trajectory for the Swift Hohenberg equation.\n    Parameters:\n        u0: initial condition\n        r: linear parameter.\n        b3: cubic parameter.\n        b5: quintic parameter\n        t1: total integration time\n        dt: time step",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_sh_coefficients",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_sh_coefficients(model, print_coeffs=False):\n    opt = model.optimizer\n    uxxcoeff_fit = np.array(\n        [\n            opt.coef_[\n                0, np.where(np.array(model.get_feature_names()) == \"1 u_11\")[0][0]\n            ],\n            opt.coef_[\n                0, np.where(np.array(model.get_feature_names()) == \"epsilon u_11\")[0][0]\n            ],",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_single_normal_form_parameters",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_single_normal_form_parameters(model, printcoefs=False):\n    \"\"\"\n    Calculate the nonlinear transformation to compute the normal form parameters.\n    Parameters:\n        model: A fit SINDy model for the Oregonator model with a ParameterizedLibrary.\n        bs: Values of the b parameter to calculate the normal-form parameters\n    \"\"\"\n    opt = model.optimizer\n    Xs = np.where(np.array(model.feature_library.get_feature_names([\"X\", \"Y\"])) == \"X\")[\n        0",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "get_auto_branches",
        "kind": 2,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "def get_auto_branches(filebase):\n    i = 0\n    unstable = []\n    while os.path.exists(filebase + \"/unstable_\" + str(i) + \".npy\"):\n        unstable.append(np.load(filebase + \"/unstable_\" + str(i) + \".npy\"))\n        i = i + 1\n    i = 0\n    stable = []\n    while os.path.exists(filebase + \"/stable_\" + str(i) + \".npy\"):\n        stable.append(np.load(filebase + \"/stable_\" + str(i) + \".npy\"))",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "integrator_keywords = {}\nintegrator_keywords[\"rtol\"] = 1e-12\nintegrator_keywords[\"method\"] = \"RK45\"\nintegrator_keywords[\"atol\"] = 1e-12\ndef get_lorenz_trajectories(sigmas, rhos, betas, dt):\n    \"\"\"\n    Generate a set of trajectories for the Lorenz ODEs.\n    Parameters:\n        sigmas: List of the sigma values.\n        rhos: List of the rho values.",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"rtol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "integrator_keywords[\"rtol\"] = 1e-12\nintegrator_keywords[\"method\"] = \"RK45\"\nintegrator_keywords[\"atol\"] = 1e-12\ndef get_lorenz_trajectories(sigmas, rhos, betas, dt):\n    \"\"\"\n    Generate a set of trajectories for the Lorenz ODEs.\n    Parameters:\n        sigmas: List of the sigma values.\n        rhos: List of the rho values.\n        betas: List of the beta values.",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"method\"]",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "integrator_keywords[\"method\"] = \"RK45\"\nintegrator_keywords[\"atol\"] = 1e-12\ndef get_lorenz_trajectories(sigmas, rhos, betas, dt):\n    \"\"\"\n    Generate a set of trajectories for the Lorenz ODEs.\n    Parameters:\n        sigmas: List of the sigma values.\n        rhos: List of the rho values.\n        betas: List of the beta values.\n        dt: time step.",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"atol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "description": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "peekOfCode": "integrator_keywords[\"atol\"] = 1e-12\ndef get_lorenz_trajectories(sigmas, rhos, betas, dt):\n    \"\"\"\n    Generate a set of trajectories for the Lorenz ODEs.\n    Parameters:\n        sigmas: List of the sigma values.\n        rhos: List of the rho values.\n        betas: List of the beta values.\n        dt: time step.\n    \"\"\"",
        "detail": "pysindy.examples.17_parameterized_pattern_formation.utils",
        "documentation": {}
    },
    {
        "label": "PredatorPreyModel",
        "kind": 6,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "class PredatorPreyModel:\n    def __init__(self, a=1.0, b=0.3, c=0.2, d=1.0):\n        # internalise the model parameters.\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\n    def dydx(self, t, y):\n        # Lotka-Volterra Model model, see e.g. https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations.}\n        return np.array(",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "surrogate_dydt",
        "kind": 2,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "def surrogate_dydt(t, y):\n    _y = y[np.newaxis, :]\n    return sindy.predict(x=_y)\n# solve using the Bayesian SINDy equations.\nsurrogate_sol = solve_ivp(surrogate_dydt, t_span=t_span, y0=y0, max_step=max_step)\n# In[10]:\n# plot the surrogate solution.\nplt.figure(figsize=(12, 4))\nplt.plot(surrogate_sol.t, surrogate_sol.y[0, :], label=\"Prey\")\nplt.scatter(t, P)",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "t_span = [0, 30]\ny0 = np.array([10, 5])\nmax_step = 0.1\n# initialise the model and solve.\nmy_model = PredatorPreyModel()\nsol = my_model.solve(t_span=t_span, y0=y0, max_step=max_step)\n# In[5]:\n# the noise level.\nnoise = 0.1\n# extract the timesteps and perturb the solution with noise.",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "y0",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "y0 = np.array([10, 5])\nmax_step = 0.1\n# initialise the model and solve.\nmy_model = PredatorPreyModel()\nsol = my_model.solve(t_span=t_span, y0=y0, max_step=max_step)\n# In[5]:\n# the noise level.\nnoise = 0.1\n# extract the timesteps and perturb the solution with noise.\nt = sol.t",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "max_step",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "max_step = 0.1\n# initialise the model and solve.\nmy_model = PredatorPreyModel()\nsol = my_model.solve(t_span=t_span, y0=y0, max_step=max_step)\n# In[5]:\n# the noise level.\nnoise = 0.1\n# extract the timesteps and perturb the solution with noise.\nt = sol.t\nP = sol.y[0, :] + np.random.normal(scale=noise, size=sol.t.size)",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "my_model",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "my_model = PredatorPreyModel()\nsol = my_model.solve(t_span=t_span, y0=y0, max_step=max_step)\n# In[5]:\n# the noise level.\nnoise = 0.1\n# extract the timesteps and perturb the solution with noise.\nt = sol.t\nP = sol.y[0, :] + np.random.normal(scale=noise, size=sol.t.size)\nQ = sol.y[1, :] + np.random.normal(scale=noise, size=sol.t.size)\n# In[6]:",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "sol",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "sol = my_model.solve(t_span=t_span, y0=y0, max_step=max_step)\n# In[5]:\n# the noise level.\nnoise = 0.1\n# extract the timesteps and perturb the solution with noise.\nt = sol.t\nP = sol.y[0, :] + np.random.normal(scale=noise, size=sol.t.size)\nQ = sol.y[1, :] + np.random.normal(scale=noise, size=sol.t.size)\n# In[6]:\n# plot the solution.",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "noise",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "noise = 0.1\n# extract the timesteps and perturb the solution with noise.\nt = sol.t\nP = sol.y[0, :] + np.random.normal(scale=noise, size=sol.t.size)\nQ = sol.y[1, :] + np.random.normal(scale=noise, size=sol.t.size)\n# In[6]:\n# plot the solution.\nplt.figure(figsize=(12, 4))\nplt.plot(sol.t, sol.y[0, :], label=\"Prey\")\nplt.scatter(t, P)",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "t = sol.t\nP = sol.y[0, :] + np.random.normal(scale=noise, size=sol.t.size)\nQ = sol.y[1, :] + np.random.normal(scale=noise, size=sol.t.size)\n# In[6]:\n# plot the solution.\nplt.figure(figsize=(12, 4))\nplt.plot(sol.t, sol.y[0, :], label=\"Prey\")\nplt.scatter(t, P)\nplt.plot(sol.t, sol.y[1, :], label=\"Predators\")\nplt.scatter(t, Q)",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "P = sol.y[0, :] + np.random.normal(scale=noise, size=sol.t.size)\nQ = sol.y[1, :] + np.random.normal(scale=noise, size=sol.t.size)\n# In[6]:\n# plot the solution.\nplt.figure(figsize=(12, 4))\nplt.plot(sol.t, sol.y[0, :], label=\"Prey\")\nplt.scatter(t, P)\nplt.plot(sol.t, sol.y[1, :], label=\"Predators\")\nplt.scatter(t, Q)\nplt.legend()",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "Q = sol.y[1, :] + np.random.normal(scale=noise, size=sol.t.size)\n# In[6]:\n# plot the solution.\nplt.figure(figsize=(12, 4))\nplt.plot(sol.t, sol.y[0, :], label=\"Prey\")\nplt.scatter(t, P)\nplt.plot(sol.t, sol.y[1, :], label=\"Predators\")\nplt.scatter(t, Q)\nplt.legend()\nplt.show()",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "sampling_seed",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "sampling_seed = 123\nif __name__ == \"testing\":\n    num_warmup = 10\n    num_samples = 100\n    num_chains = 1\nelse:\n    num_warmup = 500\n    num_samples = 2000\n    num_chains = 2\n# In[8]:",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "optimizer = ps.optimizers.SBR(\n    num_warmup=num_warmup,\n    num_samples=num_samples,\n    mcmc_kwargs={\"seed\": sampling_seed, \"num_chains\": num_chains},\n)\n# use the standard polynomial features.\nfeature_library = ps.feature_library.polynomial_library.PolynomialLibrary(\n    include_interaction=True\n)\n# initialise SINDy and fit to the data.",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "feature_library",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "feature_library = ps.feature_library.polynomial_library.PolynomialLibrary(\n    include_interaction=True\n)\n# initialise SINDy and fit to the data.\nsindy = ps.SINDy(optimizer, feature_library, feature_names=[\"P\", \"Q\"])\nsindy.fit(np.c_[P, Q], t=t)\n# In[9]:\n# set up a new differential equation that uses the Bayesian SINDy predictions.\ndef surrogate_dydt(t, y):\n    _y = y[np.newaxis, :]",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "sindy",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "sindy = ps.SINDy(optimizer, feature_library, feature_names=[\"P\", \"Q\"])\nsindy.fit(np.c_[P, Q], t=t)\n# In[9]:\n# set up a new differential equation that uses the Bayesian SINDy predictions.\ndef surrogate_dydt(t, y):\n    _y = y[np.newaxis, :]\n    return sindy.predict(x=_y)\n# solve using the Bayesian SINDy equations.\nsurrogate_sol = solve_ivp(surrogate_dydt, t_span=t_span, y0=y0, max_step=max_step)\n# In[10]:",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "surrogate_sol",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "surrogate_sol = solve_ivp(surrogate_dydt, t_span=t_span, y0=y0, max_step=max_step)\n# In[10]:\n# plot the surrogate solution.\nplt.figure(figsize=(12, 4))\nplt.plot(surrogate_sol.t, surrogate_sol.y[0, :], label=\"Prey\")\nplt.scatter(t, P)\nplt.plot(surrogate_sol.t, surrogate_sol.y[1, :], label=\"Predators\")\nplt.scatter(t, Q)\nplt.legend()\nplt.show()",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "samples",
        "kind": 5,
        "importPath": "pysindy.examples.19_bayesian_sindy.example",
        "description": "pysindy.examples.19_bayesian_sindy.example",
        "peekOfCode": "samples = az.from_numpyro(sindy.optimizer.mcmc_)\n# have a look at the summray.\naz.summary(samples)\n# In[13]:\n# plot the traces.\naz.plot_trace(samples, divergences=False)\nplt.tight_layout()\nplt.plot()\n# In[ ]:\n# In[ ]:",
        "detail": "pysindy.examples.19_bayesian_sindy.example",
        "documentation": {}
    },
    {
        "label": "ignore_specific_warnings",
        "kind": 2,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "def ignore_specific_warnings():\n    filters = copy(warnings.filters)\n    warnings.filterwarnings(\"ignore\", category=ConvergenceWarning)\n    warnings.filterwarnings(\"ignore\", category=LinAlgWarning)\n    warnings.filterwarnings(\"ignore\", category=UserWarning)\n    yield\n    warnings.filters = filters\nif __name__ == \"testing\":\n    import sys\n    import os",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "def f(x):\n    return 3.6 * x * (1 - x)\nif __name__ != \"testing\":\n    n_steps = 1000\nelse:\n    n_steps = 10\neps = 0.001  # Noise level\nx_train_map = np.zeros((n_steps))\nx_train_map[0] = 0.5\nfor i in range(1, n_steps):",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u_fun",
        "kind": 2,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "def u_fun(t):\n    return np.column_stack([np.sin(2 * t), t**2])\n# Generate measurement data\ndt = 0.002\nt_train = np.arange(0, t_end_train, dt)\nt_train_span = (t_train[0], t_train[-1])\nx0_train = [-8, 8, 27]\nx_train = solve_ivp(\n    lorenz_control,\n    t_train_span,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "data = (Path() / \"../data\").resolve()\n@contextmanager\ndef ignore_specific_warnings():\n    filters = copy(warnings.filters)\n    warnings.filterwarnings(\"ignore\", category=ConvergenceWarning)\n    warnings.filterwarnings(\"ignore\", category=LinAlgWarning)\n    warnings.filterwarnings(\"ignore\", category=UserWarning)\n    yield\n    warnings.filters = filters\nif __name__ == \"testing\":",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "integrator_keywords = {}\nintegrator_keywords[\"rtol\"] = 1e-12\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-12\n# %% [markdown]\n# ## Basic usage\n# We will fit a SINDy model to the famous Lorenz system:\n# $$ \\dot{x} = \\sigma (y - x),$$\n# $$ \\dot{y} = x(\\rho - z) - y, $$\n# $$ \\dot{z} = x y - \\beta z. $$",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"rtol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "integrator_keywords[\"rtol\"] = 1e-12\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-12\n# %% [markdown]\n# ## Basic usage\n# We will fit a SINDy model to the famous Lorenz system:\n# $$ \\dot{x} = \\sigma (y - x),$$\n# $$ \\dot{y} = x(\\rho - z) - y, $$\n# $$ \\dot{z} = x y - \\beta z. $$\n#",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"method\"]",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "integrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-12\n# %% [markdown]\n# ## Basic usage\n# We will fit a SINDy model to the famous Lorenz system:\n# $$ \\dot{x} = \\sigma (y - x),$$\n# $$ \\dot{y} = x(\\rho - z) - y, $$\n# $$ \\dot{z} = x y - \\beta z. $$\n#\n# ### Train the model",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"atol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "integrator_keywords[\"atol\"] = 1e-12\n# %% [markdown]\n# ## Basic usage\n# We will fit a SINDy model to the famous Lorenz system:\n# $$ \\dot{x} = \\sigma (y - x),$$\n# $$ \\dot{y} = x(\\rho - z) - y, $$\n# $$ \\dot{z} = x y - \\beta z. $$\n#\n# ### Train the model\n# In[4]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "dt = 0.002\nt_train = np.arange(0, t_end_train, dt)\nx0_train = [-8, 8, 27]\nt_train_span = (t_train[0], t_train[-1])\nx_train = solve_ivp(\n    lorenz, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n).y.T\n# In[5]:\n# Instantiate and fit the SINDy model\nmodel = ps.SINDy()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_train = np.arange(0, t_end_train, dt)\nx0_train = [-8, 8, 27]\nt_train_span = (t_train[0], t_train[-1])\nx_train = solve_ivp(\n    lorenz, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n).y.T\n# In[5]:\n# Instantiate and fit the SINDy model\nmodel = ps.SINDy()\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x0_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x0_train = [-8, 8, 27]\nt_train_span = (t_train[0], t_train[-1])\nx_train = solve_ivp(\n    lorenz, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n).y.T\n# In[5]:\n# Instantiate and fit the SINDy model\nmodel = ps.SINDy()\nmodel.fit(x_train, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_train_span",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_train_span = (t_train[0], t_train[-1])\nx_train = solve_ivp(\n    lorenz, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n).y.T\n# In[5]:\n# Instantiate and fit the SINDy model\nmodel = ps.SINDy()\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_train = solve_ivp(\n    lorenz, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n).y.T\n# In[5]:\n# Instantiate and fit the SINDy model\nmodel = ps.SINDy()\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Assess results on a test trajectory",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Assess results on a test trajectory\n# In[6]:\n# Evolve the Lorenz equations in time using a different initial condition\nt_test = np.arange(0, t_end_test, dt)\nx0_test = np.array([8, 7, 15])\nt_test_span = (t_test[0], t_test[-1])",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_test = np.arange(0, t_end_test, dt)\nx0_test = np.array([8, 7, 15])\nt_test_span = (t_test[0], t_test[-1])\nx_test = solve_ivp(\n    lorenz, t_test_span, x0_test, t_eval=t_test, **integrator_keywords\n).y.T\n# Compare SINDy-predicted derivatives with finite difference derivatives\nprint(\"Model score: %f\" % model.score(x_test, t=dt))\n# %% [markdown]\n# ### Predict derivatives with learned model",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x0_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x0_test = np.array([8, 7, 15])\nt_test_span = (t_test[0], t_test[-1])\nx_test = solve_ivp(\n    lorenz, t_test_span, x0_test, t_eval=t_test, **integrator_keywords\n).y.T\n# Compare SINDy-predicted derivatives with finite difference derivatives\nprint(\"Model score: %f\" % model.score(x_test, t=dt))\n# %% [markdown]\n# ### Predict derivatives with learned model\n# In[7]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_test_span",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_test_span = (t_test[0], t_test[-1])\nx_test = solve_ivp(\n    lorenz, t_test_span, x0_test, t_eval=t_test, **integrator_keywords\n).y.T\n# Compare SINDy-predicted derivatives with finite difference derivatives\nprint(\"Model score: %f\" % model.score(x_test, t=dt))\n# %% [markdown]\n# ### Predict derivatives with learned model\n# In[7]:\n# Predict derivatives using the learned model",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_test = solve_ivp(\n    lorenz, t_test_span, x0_test, t_eval=t_test, **integrator_keywords\n).y.T\n# Compare SINDy-predicted derivatives with finite difference derivatives\nprint(\"Model score: %f\" % model.score(x_test, t=dt))\n# %% [markdown]\n# ### Predict derivatives with learned model\n# In[7]:\n# Predict derivatives using the learned model\nx_dot_test_predicted = model.predict(x_test)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_test_predicted",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_test_predicted = model.predict(x_test)\n# Compute derivatives with a finite difference method, for comparison\nx_dot_test_computed = model.differentiate(x_test, t=dt)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_dot_test_computed[:, i], \"k\", label=\"numerical derivative\")\n    axs[i].plot(t_test, x_dot_test_predicted[:, i], \"r--\", label=\"model prediction\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=r\"$\\dot x_{}$\".format(i))\nfig.show()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_test_computed",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_test_computed = model.differentiate(x_test, t=dt)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_dot_test_computed[:, i], \"k\", label=\"numerical derivative\")\n    axs[i].plot(t_test, x_dot_test_predicted[:, i], \"r--\", label=\"model prediction\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=r\"$\\dot x_{}$\".format(i))\nfig.show()\n# %% [markdown]\n# ### Simulate forward in time",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_test_sim",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_test_sim = model.simulate(x0_test, t_test)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_test[:, i], \"k\", label=\"true simulation\")\n    axs[i].plot(t_test, x_test_sim[:, i], \"r--\", label=\"model simulation\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=\"$x_{}$\".format(i))\nfig = plt.figure(figsize=(10, 4.5))\nax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"k\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fig = plt.figure(figsize=(10, 4.5))\nax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"k\")\nax1.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"true simulation\")\nax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test_sim[:, 0], x_test_sim[:, 1], x_test_sim[:, 2], \"r--\")\nax2.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation\")\nfig.show()\n# %% [markdown]\n# ## Different forms of input data",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"k\")\nax1.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"true simulation\")\nax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test_sim[:, 0], x_test_sim[:, 1], x_test_sim[:, 2], \"r--\")\nax2.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation\")\nfig.show()\n# %% [markdown]\n# ## Different forms of input data\n#",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test_sim[:, 0], x_test_sim[:, 1], x_test_sim[:, 2], \"r--\")\nax2.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation\")\nfig.show()\n# %% [markdown]\n# ## Different forms of input data\n#\n# Here we explore different types of input data accepted by the the `SINDy` class.\n# ### Single trajectory, pass in collection times\n# In[9]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train, t=t_train)\nmodel.print()\n# %% [markdown]\n# ### Single trajectory, set default timestep\n# Since we used a uniform timestep when defining `t_train` we can tell set a default timestep to be used whenever `t` isn't passed in.\n# In[10]:\nmodel = ps.SINDy(t_default=dt)\nmodel.fit(x_train)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(t_default=dt)\nmodel.fit(x_train)\nmodel.print()\n# %% [markdown]\n# ### Single trajectory, pass in pre-computed derivatives\n# In[11]:\nx_dot_true = np.zeros(x_train.shape)\nfor i in range(t_train.size):\n    x_dot_true[i] = lorenz(t_train[i], x_train[i])\nmodel = ps.SINDy()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_true",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_true = np.zeros(x_train.shape)\nfor i in range(t_train.size):\n    x_dot_true[i] = lorenz(t_train[i], x_train[i])\nmodel = ps.SINDy()\nmodel.fit(x_train, t=t_train, x_dot=x_dot_true)\nmodel.print()\n# %% [markdown]\n# ### Multiple trajectories\n# We use the Lorenz equations to evolve multiple different initial conditions forward in time, passing all the trajectories into a single `SINDy` object. Note that `x_train_multi` is a list of 2D numpy arrays.\n# In[12]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train, t=t_train, x_dot=x_dot_true)\nmodel.print()\n# %% [markdown]\n# ### Multiple trajectories\n# We use the Lorenz equations to evolve multiple different initial conditions forward in time, passing all the trajectories into a single `SINDy` object. Note that `x_train_multi` is a list of 2D numpy arrays.\n# In[12]:\nif __name__ != \"testing\":\n    n_trajectories = 20\n    sample_range = (500, 1500)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x0s",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x0s = np.array([36, 48, 41]) * (np.random.rand(n_trajectories, 3) - 0.5) + np.array(\n    [0, 0, 25]\n)\nx_train_multi = []\nfor i in range(n_trajectories):\n    x_train_multi.append(\n        solve_ivp(\n            lorenz, t_train_span, x0s[i], t_eval=t_train, **integrator_keywords\n        ).y.T\n    )",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_train_multi",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_train_multi = []\nfor i in range(n_trajectories):\n    x_train_multi.append(\n        solve_ivp(\n            lorenz, t_train_span, x0s[i], t_eval=t_train, **integrator_keywords\n        ).y.T\n    )\nmodel = ps.SINDy()\nmodel.fit(x_train_multi, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train_multi, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Multiple trajectories, different lengths of time\n# This example is similar to the previous one, but each trajectory consists of a different number of measurements.\n# In[13]:\nx0s = np.array([36, 48, 41]) * (np.random.rand(n_trajectories, 3) - 0.5) + np.array(\n    [0, 0, 25]\n)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x0s",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x0s = np.array([36, 48, 41]) * (np.random.rand(n_trajectories, 3) - 0.5) + np.array(\n    [0, 0, 25]\n)\nx_train_multi = []\nt_train_multi = []\nfor i in range(n_trajectories):\n    n_samples = np.random.randint(*sample_range)\n    t = np.arange(0, n_samples * dt, dt)\n    t_span = (t[0], t[-1])\n    x_train_multi.append(",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_train_multi",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_train_multi = []\nt_train_multi = []\nfor i in range(n_trajectories):\n    n_samples = np.random.randint(*sample_range)\n    t = np.arange(0, n_samples * dt, dt)\n    t_span = (t[0], t[-1])\n    x_train_multi.append(\n        solve_ivp(lorenz, t_span, x0s[i], t_eval=t, **integrator_keywords).y.T\n    )\n    t_train_multi.append(t)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_train_multi",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_train_multi = []\nfor i in range(n_trajectories):\n    n_samples = np.random.randint(*sample_range)\n    t = np.arange(0, n_samples * dt, dt)\n    t_span = (t[0], t[-1])\n    x_train_multi.append(\n        solve_ivp(lorenz, t_span, x0s[i], t_eval=t, **integrator_keywords).y.T\n    )\n    t_train_multi.append(t)\nmodel = ps.SINDy()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train_multi, t=t_train_multi)\nmodel.print()\n# %% [markdown]\n# ### Discrete time dynamical system (map)\n# In[14]:\ndef f(x):\n    return 3.6 * x * (1 - x)\nif __name__ != \"testing\":\n    n_steps = 1000",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "eps",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "eps = 0.001  # Noise level\nx_train_map = np.zeros((n_steps))\nx_train_map[0] = 0.5\nfor i in range(1, n_steps):\n    x_train_map[i] = f(x_train_map[i - 1]) + eps * np.random.randn()\nmodel = ps.SINDy(discrete_time=True)\nmodel.fit(x_train_map)\nmodel.print()\n# %% [markdown]\n# ### Pandas DataFrame",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_train_map",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_train_map = np.zeros((n_steps))\nx_train_map[0] = 0.5\nfor i in range(1, n_steps):\n    x_train_map[i] = f(x_train_map[i - 1]) + eps * np.random.randn()\nmodel = ps.SINDy(discrete_time=True)\nmodel.fit(x_train_map)\nmodel.print()\n# %% [markdown]\n# ### Pandas DataFrame\n# In[15]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_train_map[0]",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_train_map[0] = 0.5\nfor i in range(1, n_steps):\n    x_train_map[i] = f(x_train_map[i - 1]) + eps * np.random.randn()\nmodel = ps.SINDy(discrete_time=True)\nmodel.fit(x_train_map)\nmodel.print()\n# %% [markdown]\n# ### Pandas DataFrame\n# In[15]:\nimport pandas as pd",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(discrete_time=True)\nmodel.fit(x_train_map)\nmodel.print()\n# %% [markdown]\n# ### Pandas DataFrame\n# In[15]:\nimport pandas as pd\n# Create a dataframe with entries corresponding to measurements and\n# indexed by the time at which the measurements were taken\ndf = pd.DataFrame(data=x_train, columns=[\"x\", \"y\", \"z\"], index=t_train)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "df = pd.DataFrame(data=x_train, columns=[\"x\", \"y\", \"z\"], index=t_train)\n# The column names can be used as feature names\nmodel = ps.SINDy(feature_names=df.columns)\n# Everything needs to be converted to numpy arrays to be passed in\nmodel.fit(df.values, t=df.index.values)\nmodel.print()\n# %% [markdown]\n# ## Optimization options\n# In this section we provide examples of different parameters accepted by the built-in sparse regression optimizers `STLSQ`, `SR3`, `ConstrainedSR3`, `MIOSR`, `SSR`, and `FROLS`. The `Trapping` optimizer is not straightforward to use; please check out Example 8 for some examples. We also show how to use a scikit-learn sparse regressor with PySINDy.\n# ### STLSQ - change parameters",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_names=df.columns)\n# Everything needs to be converted to numpy arrays to be passed in\nmodel.fit(df.values, t=df.index.values)\nmodel.print()\n# %% [markdown]\n# ## Optimization options\n# In this section we provide examples of different parameters accepted by the built-in sparse regression optimizers `STLSQ`, `SR3`, `ConstrainedSR3`, `MIOSR`, `SSR`, and `FROLS`. The `Trapping` optimizer is not straightforward to use; please check out Example 8 for some examples. We also show how to use a scikit-learn sparse regressor with PySINDy.\n# ### STLSQ - change parameters\n# In[16]:\nstlsq_optimizer = ps.STLSQ(threshold=0.01, alpha=0.5)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "stlsq_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "stlsq_optimizer = ps.STLSQ(threshold=0.01, alpha=0.5)\nmodel = ps.SINDy(optimizer=stlsq_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### STLSQ - verbose (print out optimization terms at each iteration)\n# The same verbose option is available with all the other optimizers. For optimizers that use the CVXPY\n# package, there is additional boolean flag, verbose_cvxpy, that decides whether or not CVXPY solves will also be verbose.\n# In[17]:\nstlsq_optimizer = ps.STLSQ(threshold=0.01, alpha=0.5, verbose=True)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=stlsq_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### STLSQ - verbose (print out optimization terms at each iteration)\n# The same verbose option is available with all the other optimizers. For optimizers that use the CVXPY\n# package, there is additional boolean flag, verbose_cvxpy, that decides whether or not CVXPY solves will also be verbose.\n# In[17]:\nstlsq_optimizer = ps.STLSQ(threshold=0.01, alpha=0.5, verbose=True)\nmodel = ps.SINDy(optimizer=stlsq_optimizer)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "stlsq_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "stlsq_optimizer = ps.STLSQ(threshold=0.01, alpha=0.5, verbose=True)\nmodel = ps.SINDy(optimizer=stlsq_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### SR3\n# In[18]:\nsr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l1\")\nmodel = ps.SINDy(optimizer=sr3_optimizer)\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=stlsq_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### SR3\n# In[18]:\nsr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l1\")\nmodel = ps.SINDy(optimizer=sr3_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l1\")\nmodel = ps.SINDy(optimizer=sr3_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### SR3 - with trimming\n# `SR3` is capable of automatically trimming outliers from training data. Specifying the parameter `trimming_fraction` tells the method what fraction of samples should be trimmed.\n# In[19]:\ncorrupted_inds = np.random.randint(0, len(x_train), size=len(x_train) // 30)\nx_train_corrupted = x_train.copy()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=sr3_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### SR3 - with trimming\n# `SR3` is capable of automatically trimming outliers from training data. Specifying the parameter `trimming_fraction` tells the method what fraction of samples should be trimmed.\n# In[19]:\ncorrupted_inds = np.random.randint(0, len(x_train), size=len(x_train) // 30)\nx_train_corrupted = x_train.copy()\nx_train_corrupted[corrupted_inds] += np.random.standard_normal((len(corrupted_inds), 3))",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "corrupted_inds",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "corrupted_inds = np.random.randint(0, len(x_train), size=len(x_train) // 30)\nx_train_corrupted = x_train.copy()\nx_train_corrupted[corrupted_inds] += np.random.standard_normal((len(corrupted_inds), 3))\n# Without trimming\nsr3_optimizer = ps.SR3()\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train_corrupted, t=dt)\nprint(\"Without trimming\")\nmodel.print()\n# With trimming",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_train_corrupted",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_train_corrupted = x_train.copy()\nx_train_corrupted[corrupted_inds] += np.random.standard_normal((len(corrupted_inds), 3))\n# Without trimming\nsr3_optimizer = ps.SR3()\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train_corrupted, t=dt)\nprint(\"Without trimming\")\nmodel.print()\n# With trimming\nsr3_optimizer = ps.SR3(trimming_fraction=0.1)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3()\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train_corrupted, t=dt)\nprint(\"Without trimming\")\nmodel.print()\n# With trimming\nsr3_optimizer = ps.SR3(trimming_fraction=0.1)\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train_corrupted, t=dt)\nprint(\"\\nWith trimming\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3(trimming_fraction=0.1)\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train_corrupted, t=dt)\nprint(\"\\nWith trimming\")\nmodel.print()\n# %% [markdown]\n# ### SR3 regularizers\n# The default regularizer with SR3 is the L0 norm, but L1 and L2 are allowed. Note that the pure L2 option is notably less sparse than the other options.\n# In[20]:\nweight = ps.SR3.calculate_l0_weight(0.1, 1)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "weight = ps.SR3.calculate_l0_weight(0.1, 1)\nsr3_optimizer = ps.SR3(reg_weight_lam=weight, regularizer=\"l0\")\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"L0 regularizer: \")\nmodel.print()\nsr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l1\")\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"L1 regularizer: \")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3(reg_weight_lam=weight, regularizer=\"l0\")\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"L0 regularizer: \")\nmodel.print()\nsr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l1\")\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"L1 regularizer: \")\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l1\")\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"L1 regularizer: \")\nmodel.print()\nsr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l2\")\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"L2 regularizer: \")\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l2\")\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"L2 regularizer: \")\nmodel.print()\n# %% [markdown]\n# ### SR3 - with variable thresholding\n# `SR3` and its variants (ConstrainedSR3, TrappingSR3, SINDyPI) can use a matrix of thresholds to set different thresholds for different terms.\n# In[21]:\n# Without thresholds matrix",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "weight = ps.SR3.calculate_l0_weight(0.1, 1)\nsr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l0\")\nprint(\"Threshold = 0.1 for all terms\")\nmodel.print()\n# With thresholds matrix\nweights = 2 * np.ones((3, 10))\nweights[4:, :] = ps.SR3.calculate_l0_weight(0.1, 1)\nsr3_optimizer = ps.SR3(regularizer=\"weighted_l0\", reg_weight_lam=weights)\nmodel = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"Threshold = 0.1 for quadratic terms, else threshold = 1\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3(reg_weight_lam=0.1, regularizer=\"l0\")\nprint(\"Threshold = 0.1 for all terms\")\nmodel.print()\n# With thresholds matrix\nweights = 2 * np.ones((3, 10))\nweights[4:, :] = ps.SR3.calculate_l0_weight(0.1, 1)\nsr3_optimizer = ps.SR3(regularizer=\"weighted_l0\", reg_weight_lam=weights)\nmodel = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"Threshold = 0.1 for quadratic terms, else threshold = 1\")\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "print(\"Threshold",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "print(\"Threshold = 0.1 for all terms\")\nmodel.print()\n# With thresholds matrix\nweights = 2 * np.ones((3, 10))\nweights[4:, :] = ps.SR3.calculate_l0_weight(0.1, 1)\nsr3_optimizer = ps.SR3(regularizer=\"weighted_l0\", reg_weight_lam=weights)\nmodel = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"Threshold = 0.1 for quadratic terms, else threshold = 1\")\nmodel.print()\n# %% [markdown]",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "weights",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "weights = 2 * np.ones((3, 10))\nweights[4:, :] = ps.SR3.calculate_l0_weight(0.1, 1)\nsr3_optimizer = ps.SR3(regularizer=\"weighted_l0\", reg_weight_lam=weights)\nmodel = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"Threshold = 0.1 for quadratic terms, else threshold = 1\")\nmodel.print()\n# %% [markdown]\n# It can be seen that the x1 term in the second equation correctly gets truncated with these thresholds.\n#\n# ### ConstrainedSR3",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "sr3_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "sr3_optimizer = ps.SR3(regularizer=\"weighted_l0\", reg_weight_lam=weights)\nmodel = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"Threshold = 0.1 for quadratic terms, else threshold = 1\")\nmodel.print()\n# %% [markdown]\n# It can be seen that the x1 term in the second equation correctly gets truncated with these thresholds.\n#\n# ### ConstrainedSR3\n# We can impose linear equality and inequality constraints on the coefficients in the `SINDy` model using the `ConstrainedSR3` class. Below we constrain the x0 coefficient in the second equation to be exactly 28 and the x0 and x1 coefficients in the first equations to be negatives of one another. See this [notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/7_plasma_examples.ipynb) for examples.\n# In[22]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=sr3_optimizer).fit(x_train, t=dt)\nprint(\"Threshold = 0.1 for quadratic terms, else threshold = 1\")\nmodel.print()\n# %% [markdown]\n# It can be seen that the x1 term in the second equation correctly gets truncated with these thresholds.\n#\n# ### ConstrainedSR3\n# We can impose linear equality and inequality constraints on the coefficients in the `SINDy` model using the `ConstrainedSR3` class. Below we constrain the x0 coefficient in the second equation to be exactly 28 and the x0 and x1 coefficients in the first equations to be negatives of one another. See this [notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/7_plasma_examples.ipynb) for examples.\n# In[22]:\n# Figure out how many library features there will be",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "print(\"Threshold",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "print(\"Threshold = 0.1 for quadratic terms, else threshold = 1\")\nmodel.print()\n# %% [markdown]\n# It can be seen that the x1 term in the second equation correctly gets truncated with these thresholds.\n#\n# ### ConstrainedSR3\n# We can impose linear equality and inequality constraints on the coefficients in the `SINDy` model using the `ConstrainedSR3` class. Below we constrain the x0 coefficient in the second equation to be exactly 28 and the x0 and x1 coefficients in the first equations to be negatives of one another. See this [notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/7_plasma_examples.ipynb) for examples.\n# In[22]:\n# Figure out how many library features there will be\nlibrary = ps.PolynomialLibrary()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "library = ps.PolynomialLibrary()\nlibrary.fit([ps.AxesArray(x_train, {\"ax_sample\": 0, \"ax_coord\": 1})])\nn_features = library.n_output_features_\nprint(f\"Features ({n_features}):\", library.get_feature_names())\n# In[23]:\n# Set constraints\nn_targets = x_train.shape[1]\nconstraint_rhs = np.array([0, 28])\n# One row per constraint, one column per coefficient\nconstraint_lhs = np.zeros((2, n_targets * n_features))",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "n_features",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "n_features = library.n_output_features_\nprint(f\"Features ({n_features}):\", library.get_feature_names())\n# In[23]:\n# Set constraints\nn_targets = x_train.shape[1]\nconstraint_rhs = np.array([0, 28])\n# One row per constraint, one column per coefficient\nconstraint_lhs = np.zeros((2, n_targets * n_features))\n# 1 * (x0 coefficient) + 1 * (x1 coefficient) = 0\nconstraint_lhs[0, 1] = 1",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "n_targets",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "n_targets = x_train.shape[1]\nconstraint_rhs = np.array([0, 28])\n# One row per constraint, one column per coefficient\nconstraint_lhs = np.zeros((2, n_targets * n_features))\n# 1 * (x0 coefficient) + 1 * (x1 coefficient) = 0\nconstraint_lhs[0, 1] = 1\nconstraint_lhs[0, 2] = 1\n# 1 * (x0 coefficient) = 28\nconstraint_lhs[1, 1 + n_features] = 1\noptimizer = ps.ConstrainedSR3(",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "constraint_rhs",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "constraint_rhs = np.array([0, 28])\n# One row per constraint, one column per coefficient\nconstraint_lhs = np.zeros((2, n_targets * n_features))\n# 1 * (x0 coefficient) + 1 * (x1 coefficient) = 0\nconstraint_lhs[0, 1] = 1\nconstraint_lhs[0, 2] = 1\n# 1 * (x0 coefficient) = 28\nconstraint_lhs[1, 1 + n_features] = 1\noptimizer = ps.ConstrainedSR3(\n    constraint_rhs=constraint_rhs, constraint_lhs=constraint_lhs",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "constraint_lhs",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "constraint_lhs = np.zeros((2, n_targets * n_features))\n# 1 * (x0 coefficient) + 1 * (x1 coefficient) = 0\nconstraint_lhs[0, 1] = 1\nconstraint_lhs[0, 2] = 1\n# 1 * (x0 coefficient) = 28\nconstraint_lhs[1, 1 + n_features] = 1\noptimizer = ps.ConstrainedSR3(\n    constraint_rhs=constraint_rhs, constraint_lhs=constraint_lhs\n)\nmodel = ps.SINDy(optimizer=optimizer, feature_library=library).fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "optimizer = ps.ConstrainedSR3(\n    constraint_rhs=constraint_rhs, constraint_lhs=constraint_lhs\n)\nmodel = ps.SINDy(optimizer=optimizer, feature_library=library).fit(x_train, t=dt)\nmodel.print()\n# In[24]:\nweight = ps.ConstrainedSR3.calculate_l0_weight(10, 1)\n# Try with normalize columns (doesn't work with constraints!!!)\noptimizer = ps.ConstrainedSR3(\n    constraint_rhs=constraint_rhs,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=optimizer, feature_library=library).fit(x_train, t=dt)\nmodel.print()\n# In[24]:\nweight = ps.ConstrainedSR3.calculate_l0_weight(10, 1)\n# Try with normalize columns (doesn't work with constraints!!!)\noptimizer = ps.ConstrainedSR3(\n    constraint_rhs=constraint_rhs,\n    constraint_lhs=constraint_lhs,\n    normalize_columns=True,\n    reg_weight_lam=weight,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "weight = ps.ConstrainedSR3.calculate_l0_weight(10, 1)\n# Try with normalize columns (doesn't work with constraints!!!)\noptimizer = ps.ConstrainedSR3(\n    constraint_rhs=constraint_rhs,\n    constraint_lhs=constraint_lhs,\n    normalize_columns=True,\n    reg_weight_lam=weight,\n)\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=optimizer, feature_library=library).fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "optimizer = ps.ConstrainedSR3(\n    constraint_rhs=constraint_rhs,\n    constraint_lhs=constraint_lhs,\n    normalize_columns=True,\n    reg_weight_lam=weight,\n)\nwith ignore_specific_warnings():\n    model = ps.SINDy(optimizer=optimizer, feature_library=library).fit(x_train, t=dt)\nmodel.print()\n# In[25]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ssr_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ssr_optimizer = ps.SSR(alpha=0.05)\nmodel = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# The alpha parameter is the same here as in the STLSQ optimizer. It determines the amount of L2 regularization to use, so if alpha is nonzero, this is doing Ridge regression rather than least-squares regression.\n# In[35]:\nssr_optimizer = ps.SSR(alpha=0.05, criteria=\"model_residual\")\nmodel = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# The alpha parameter is the same here as in the STLSQ optimizer. It determines the amount of L2 regularization to use, so if alpha is nonzero, this is doing Ridge regression rather than least-squares regression.\n# In[35]:\nssr_optimizer = ps.SSR(alpha=0.05, criteria=\"model_residual\")\nmodel = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ssr_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ssr_optimizer = ps.SSR(alpha=0.05, criteria=\"model_residual\")\nmodel = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# The kappa parameter determines how sparse a solution is desired.\n# In[36]:\nssr_optimizer = ps.SSR(alpha=0.05, criteria=\"model_residual\", kappa=1e-3)\nmodel = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# The kappa parameter determines how sparse a solution is desired.\n# In[36]:\nssr_optimizer = ps.SSR(alpha=0.05, criteria=\"model_residual\", kappa=1e-3)\nmodel = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ssr_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ssr_optimizer = ps.SSR(alpha=0.05, criteria=\"model_residual\", kappa=1e-3)\nmodel = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### FROLS (greedy algorithm)\n# Forward Regression Orthogonal Least Squares (FROLS) is another greedy algorithm which solves the least-squares regression problem (actually default is to solve ridge regression) with $L_0$ norm by iteratively selecting the most correlated function in the library. At each step, the candidate functions are orthogonalized with respect to the already-selected functions. The selection criteria is the Error Reduction Ratio, i.e. the normalized increase in the explained output variance due to the addition of a given function to the basis. See this [notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/11_SSR_FROLS.ipynb) for examples.\n# In[37]:\noptimizer = ps.FROLS(alpha=0.05)\nmodel = ps.SINDy(optimizer=optimizer)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=ssr_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### FROLS (greedy algorithm)\n# Forward Regression Orthogonal Least Squares (FROLS) is another greedy algorithm which solves the least-squares regression problem (actually default is to solve ridge regression) with $L_0$ norm by iteratively selecting the most correlated function in the library. At each step, the candidate functions are orthogonalized with respect to the already-selected functions. The selection criteria is the Error Reduction Ratio, i.e. the normalized increase in the explained output variance due to the addition of a given function to the basis. See this [notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/11_SSR_FROLS.ipynb) for examples.\n# In[37]:\noptimizer = ps.FROLS(alpha=0.05)\nmodel = ps.SINDy(optimizer=optimizer)\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "optimizer = ps.FROLS(alpha=0.05)\nmodel = ps.SINDy(optimizer=optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# The kappa parameter determines how sparse a solution is desired.\n# In[38]:\noptimizer = ps.FROLS(alpha=0.05, kappa=1e-7)\nmodel = ps.SINDy(optimizer=optimizer)\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# The kappa parameter determines how sparse a solution is desired.\n# In[38]:\noptimizer = ps.FROLS(alpha=0.05, kappa=1e-7)\nmodel = ps.SINDy(optimizer=optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "optimizer = ps.FROLS(alpha=0.05, kappa=1e-7)\nmodel = ps.SINDy(optimizer=optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### LASSO\n# In this example we use a third-party Lasso implementation (from scikit-learn) as the optimizer.\n# In[39]:\nlasso_optimizer = Lasso(alpha=2, max_iter=2000, fit_intercept=False)\nmodel = ps.SINDy(optimizer=lasso_optimizer)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### LASSO\n# In this example we use a third-party Lasso implementation (from scikit-learn) as the optimizer.\n# In[39]:\nlasso_optimizer = Lasso(alpha=2, max_iter=2000, fit_intercept=False)\nmodel = ps.SINDy(optimizer=lasso_optimizer)\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "lasso_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "lasso_optimizer = Lasso(alpha=2, max_iter=2000, fit_intercept=False)\nmodel = ps.SINDy(optimizer=lasso_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Ensemble methods\n# One way to improve SINDy performance is to generate many models by sub-sampling the time series (ensemble) or sub-sampling the candidate library $\\mathbf{\\Theta}$ (library ensemble). The resulting models can then be synthesized by taking the average (bagging), taking the median (this is the recommended because it works well in practice), or some other post-processing. See this [notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/13_ensembling.ipynb) for more examples.\n# In[41]:\n# Default is to sample the entire time series with replacement, generating 10 models on roughly\n# 60% of the total data, with duplicates.",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=lasso_optimizer)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Ensemble methods\n# One way to improve SINDy performance is to generate many models by sub-sampling the time series (ensemble) or sub-sampling the candidate library $\\mathbf{\\Theta}$ (library ensemble). The resulting models can then be synthesized by taking the average (bagging), taking the median (this is the recommended because it works well in practice), or some other post-processing. See this [notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/13_ensembling.ipynb) for more examples.\n# In[41]:\n# Default is to sample the entire time series with replacement, generating 10 models on roughly\n# 60% of the total data, with duplicates.\n# Custom feature names",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "feature_names",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "feature_names = [\"x\", \"y\", \"z\"]\nensemble_optimizer = ps.EnsembleOptimizer(\n    ps.STLSQ(threshold=1e-3, normalize_columns=False),\n    bagging=True,\n    n_subset=int(0.6 * x_train.shape[0]),\n)\nmodel = ps.SINDy(optimizer=ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nensemble_coefs = ensemble_optimizer.coef_list\nmean_ensemble = np.mean(ensemble_coefs, axis=0)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ensemble_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ensemble_optimizer = ps.EnsembleOptimizer(\n    ps.STLSQ(threshold=1e-3, normalize_columns=False),\n    bagging=True,\n    n_subset=int(0.6 * x_train.shape[0]),\n)\nmodel = ps.SINDy(optimizer=ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nensemble_coefs = ensemble_optimizer.coef_list\nmean_ensemble = np.mean(ensemble_coefs, axis=0)\nstd_ensemble = np.std(ensemble_coefs, axis=0)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nensemble_coefs = ensemble_optimizer.coef_list\nmean_ensemble = np.mean(ensemble_coefs, axis=0)\nstd_ensemble = np.std(ensemble_coefs, axis=0)\n# Now we sub-sample the library. The default is to omit a single library term.\nlibrary_ensemble_optimizer = ps.EnsembleOptimizer(\n    ps.STLSQ(threshold=1e-3, normalize_columns=False), library_ensemble=True\n)\nmodel = ps.SINDy(optimizer=library_ensemble_optimizer, feature_names=feature_names)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ensemble_coefs",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ensemble_coefs = ensemble_optimizer.coef_list\nmean_ensemble = np.mean(ensemble_coefs, axis=0)\nstd_ensemble = np.std(ensemble_coefs, axis=0)\n# Now we sub-sample the library. The default is to omit a single library term.\nlibrary_ensemble_optimizer = ps.EnsembleOptimizer(\n    ps.STLSQ(threshold=1e-3, normalize_columns=False), library_ensemble=True\n)\nmodel = ps.SINDy(optimizer=library_ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nlibrary_ensemble_coefs = library_ensemble_optimizer.coef_list",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "mean_ensemble",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "mean_ensemble = np.mean(ensemble_coefs, axis=0)\nstd_ensemble = np.std(ensemble_coefs, axis=0)\n# Now we sub-sample the library. The default is to omit a single library term.\nlibrary_ensemble_optimizer = ps.EnsembleOptimizer(\n    ps.STLSQ(threshold=1e-3, normalize_columns=False), library_ensemble=True\n)\nmodel = ps.SINDy(optimizer=library_ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nlibrary_ensemble_coefs = library_ensemble_optimizer.coef_list\nmean_library_ensemble = np.mean(library_ensemble_coefs, axis=0)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "std_ensemble",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "std_ensemble = np.std(ensemble_coefs, axis=0)\n# Now we sub-sample the library. The default is to omit a single library term.\nlibrary_ensemble_optimizer = ps.EnsembleOptimizer(\n    ps.STLSQ(threshold=1e-3, normalize_columns=False), library_ensemble=True\n)\nmodel = ps.SINDy(optimizer=library_ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nlibrary_ensemble_coefs = library_ensemble_optimizer.coef_list\nmean_library_ensemble = np.mean(library_ensemble_coefs, axis=0)\nstd_library_ensemble = np.std(library_ensemble_coefs, axis=0)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "library_ensemble_optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "library_ensemble_optimizer = ps.EnsembleOptimizer(\n    ps.STLSQ(threshold=1e-3, normalize_columns=False), library_ensemble=True\n)\nmodel = ps.SINDy(optimizer=library_ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nlibrary_ensemble_coefs = library_ensemble_optimizer.coef_list\nmean_library_ensemble = np.mean(library_ensemble_coefs, axis=0)\nstd_library_ensemble = np.std(library_ensemble_coefs, axis=0)\n# Plot results\nxticknames = model.get_feature_names()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(optimizer=library_ensemble_optimizer, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nlibrary_ensemble_coefs = library_ensemble_optimizer.coef_list\nmean_library_ensemble = np.mean(library_ensemble_coefs, axis=0)\nstd_library_ensemble = np.std(library_ensemble_coefs, axis=0)\n# Plot results\nxticknames = model.get_feature_names()\nfor i in range(10):\n    xticknames[i] = \"$\" + xticknames[i] + \"$\"\nplt.figure(figsize=(10, 4))",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "library_ensemble_coefs",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "library_ensemble_coefs = library_ensemble_optimizer.coef_list\nmean_library_ensemble = np.mean(library_ensemble_coefs, axis=0)\nstd_library_ensemble = np.std(library_ensemble_coefs, axis=0)\n# Plot results\nxticknames = model.get_feature_names()\nfor i in range(10):\n    xticknames[i] = \"$\" + xticknames[i] + \"$\"\nplt.figure(figsize=(10, 4))\ncolors = [\"b\", \"r\", \"k\"]\nplt.subplot(1, 2, 1)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "mean_library_ensemble",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "mean_library_ensemble = np.mean(library_ensemble_coefs, axis=0)\nstd_library_ensemble = np.std(library_ensemble_coefs, axis=0)\n# Plot results\nxticknames = model.get_feature_names()\nfor i in range(10):\n    xticknames[i] = \"$\" + xticknames[i] + \"$\"\nplt.figure(figsize=(10, 4))\ncolors = [\"b\", \"r\", \"k\"]\nplt.subplot(1, 2, 1)\nplt.title(\"ensembling\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "std_library_ensemble",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "std_library_ensemble = np.std(library_ensemble_coefs, axis=0)\n# Plot results\nxticknames = model.get_feature_names()\nfor i in range(10):\n    xticknames[i] = \"$\" + xticknames[i] + \"$\"\nplt.figure(figsize=(10, 4))\ncolors = [\"b\", \"r\", \"k\"]\nplt.subplot(1, 2, 1)\nplt.title(\"ensembling\")\nfor i in range(3):",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "xticknames",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "xticknames = model.get_feature_names()\nfor i in range(10):\n    xticknames[i] = \"$\" + xticknames[i] + \"$\"\nplt.figure(figsize=(10, 4))\ncolors = [\"b\", \"r\", \"k\"]\nplt.subplot(1, 2, 1)\nplt.title(\"ensembling\")\nfor i in range(3):\n    plt.errorbar(\n        range(10),",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "colors = [\"b\", \"r\", \"k\"]\nplt.subplot(1, 2, 1)\nplt.title(\"ensembling\")\nfor i in range(3):\n    plt.errorbar(\n        range(10),\n        mean_ensemble[i, :],\n        yerr=std_ensemble[i, :],\n        fmt=\"o\",\n        color=colors[i],",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ax = plt.gca()\nplt.grid(True)\nax.set_xticks(range(10))\nax.set_xticklabels(xticknames, verticalalignment=\"top\")\nplt.subplot(1, 2, 2)\nplt.title(\"library ensembling\")\nfor i in range(3):\n    plt.errorbar(\n        range(10),\n        mean_library_ensemble[i, :],",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ax = plt.gca()\nplt.grid(True)\nplt.legend()\nax.set_xticks(range(10))\nax.set_xticklabels(xticknames, verticalalignment=\"top\")\nplt.show()\n# %% [markdown]\n# ## Differentiation options\n# ### Pass in pre-computed derivatives\n# Rather than using one of PySINDy's built-in differentiators, you can compute numerical derivatives using a method of your choice then pass them directly to the `fit` method. This option also enables you to use derivative data obtained directly from experiments.",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_precomputed",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_precomputed = ps.FiniteDifference()._differentiate(x_train, t_train)\nmodel = ps.SINDy()\nmodel.fit(x_train, t=t_train, x_dot=x_dot_precomputed)\nmodel.print()\n# %% [markdown]\n# ### Drop end points from finite difference computation\n# Many methods of numerical differentiation exhibit poor performance near the endpoints of the data. The `FiniteDifference` and `SmoothedFiniteDifference` methods allow one to easily drop the endpoints for improved accuracy.\n# In[43]:\nfd_drop_endpoints = ps.FiniteDifference(drop_endpoints=True)\nmodel = ps.SINDy(differentiation_method=fd_drop_endpoints)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train, t=t_train, x_dot=x_dot_precomputed)\nmodel.print()\n# %% [markdown]\n# ### Drop end points from finite difference computation\n# Many methods of numerical differentiation exhibit poor performance near the endpoints of the data. The `FiniteDifference` and `SmoothedFiniteDifference` methods allow one to easily drop the endpoints for improved accuracy.\n# In[43]:\nfd_drop_endpoints = ps.FiniteDifference(drop_endpoints=True)\nmodel = ps.SINDy(differentiation_method=fd_drop_endpoints)\nmodel.fit(x_train, t=t_train)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fd_drop_endpoints",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fd_drop_endpoints = ps.FiniteDifference(drop_endpoints=True)\nmodel = ps.SINDy(differentiation_method=fd_drop_endpoints)\nmodel.fit(x_train, t=t_train)\nmodel.print()\n# %% [markdown]\n# ### Differentiation along specific array axis\n# For partial differential equations (PDEs), you may have spatiotemporal data in a multi-dimensional array. For this case, the `FiniteDifference` method allows one to only differential along a specific axis, so one can easily differentiate in a specific spatial direction.\n# In[44]:\nfrom scipy.io import loadmat\n# Load the data stored in a matlab .mat file",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(differentiation_method=fd_drop_endpoints)\nmodel.fit(x_train, t=t_train)\nmodel.print()\n# %% [markdown]\n# ### Differentiation along specific array axis\n# For partial differential equations (PDEs), you may have spatiotemporal data in a multi-dimensional array. For this case, the `FiniteDifference` method allows one to only differential along a specific axis, so one can easily differentiate in a specific spatial direction.\n# In[44]:\nfrom scipy.io import loadmat\n# Load the data stored in a matlab .mat file\nkdV = loadmat(data / \"kdv.mat\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "kdV",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "kdV = loadmat(data / \"kdv.mat\")\nt = np.ravel(kdV[\"t\"])\nX = np.ravel(kdV[\"x\"])\nx = np.real(kdV[\"usol\"])\ndt_kdv = t[1] - t[0]\n# Plot x and x_dot\nplt.figure()\nplt.pcolormesh(t, X, x)\nplt.xlabel(\"t\", fontsize=16)\nplt.ylabel(\"X\", fontsize=16)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t = np.ravel(kdV[\"t\"])\nX = np.ravel(kdV[\"x\"])\nx = np.real(kdV[\"usol\"])\ndt_kdv = t[1] - t[0]\n# Plot x and x_dot\nplt.figure()\nplt.pcolormesh(t, X, x)\nplt.xlabel(\"t\", fontsize=16)\nplt.ylabel(\"X\", fontsize=16)\nplt.title(r\"$u(x, t)$\", fontsize=16)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "X = np.ravel(kdV[\"x\"])\nx = np.real(kdV[\"usol\"])\ndt_kdv = t[1] - t[0]\n# Plot x and x_dot\nplt.figure()\nplt.pcolormesh(t, X, x)\nplt.xlabel(\"t\", fontsize=16)\nplt.ylabel(\"X\", fontsize=16)\nplt.title(r\"$u(x, t)$\", fontsize=16)\nplt.figure()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x = np.real(kdV[\"usol\"])\ndt_kdv = t[1] - t[0]\n# Plot x and x_dot\nplt.figure()\nplt.pcolormesh(t, X, x)\nplt.xlabel(\"t\", fontsize=16)\nplt.ylabel(\"X\", fontsize=16)\nplt.title(r\"$u(x, t)$\", fontsize=16)\nplt.figure()\nx_dot = ps.FiniteDifference(axis=1)._differentiate(x, t=dt_kdv)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "dt_kdv",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "dt_kdv = t[1] - t[0]\n# Plot x and x_dot\nplt.figure()\nplt.pcolormesh(t, X, x)\nplt.xlabel(\"t\", fontsize=16)\nplt.ylabel(\"X\", fontsize=16)\nplt.title(r\"$u(x, t)$\", fontsize=16)\nplt.figure()\nx_dot = ps.FiniteDifference(axis=1)._differentiate(x, t=dt_kdv)\nplt.pcolormesh(t, X, x_dot)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot = ps.FiniteDifference(axis=1)._differentiate(x, t=dt_kdv)\nplt.pcolormesh(t, X, x_dot)\nplt.xlabel(\"t\", fontsize=16)\nplt.ylabel(\"x\", fontsize=16)\nplt.title(r\"$\\dot{u}(x, t)$\", fontsize=16)\nplt.show()\n# %% [markdown]\n# ### Smoothed finite difference\n# This method, designed for noisy data, applies a smoother (the default is `scipy.signal.savgol_filter`) before performing differentiation.\n# In[45]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "smoothed_fd",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "smoothed_fd = ps.SmoothedFiniteDifference()\nmodel = ps.SINDy(differentiation_method=smoothed_fd)\nmodel.fit(x_train, t=t_train)\nmodel.print()\n# %% [markdown]\n# ### More differentiation options\n# PySINDy is compatible with any of the differentiation methods from the [derivative](https://pypi.org/project/derivative/) package. They are explored in detail in [this notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/5_differentiation.ipynb).\n#\n# PySINDy defines a `SINDyDerivative` class for interfacing with `derivative` methods. To use a differentiation method provided by `derivative`, simply pass into `SINDyDerivative` the keyword arguments you would give the [dxdt](https://derivative.readthedocs.io/en/latest/api.html#derivative.differentiation.dxdt) method.\n# In[46]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(differentiation_method=smoothed_fd)\nmodel.fit(x_train, t=t_train)\nmodel.print()\n# %% [markdown]\n# ### More differentiation options\n# PySINDy is compatible with any of the differentiation methods from the [derivative](https://pypi.org/project/derivative/) package. They are explored in detail in [this notebook](https://github.com/dynamicslab/pysindy/blob/master/examples/5_differentiation.ipynb).\n#\n# PySINDy defines a `SINDyDerivative` class for interfacing with `derivative` methods. To use a differentiation method provided by `derivative`, simply pass into `SINDyDerivative` the keyword arguments you would give the [dxdt](https://derivative.readthedocs.io/en/latest/api.html#derivative.differentiation.dxdt) method.\n# In[46]:\nspline_derivative = ps.SINDyDerivative(kind=\"spline\", s=1e-2)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "spline_derivative",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "spline_derivative = ps.SINDyDerivative(kind=\"spline\", s=1e-2)\nmodel = ps.SINDy(differentiation_method=spline_derivative)\nmodel.fit(x_train, t=t_train)\nmodel.print()\n# %% [markdown]\n# ## Feature libraries\n# ### Custom feature names\n# In[47]:\nfeature_names = [\"x\", \"y\", \"z\"]\nmodel = ps.SINDy(feature_names=feature_names)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(differentiation_method=spline_derivative)\nmodel.fit(x_train, t=t_train)\nmodel.print()\n# %% [markdown]\n# ## Feature libraries\n# ### Custom feature names\n# In[47]:\nfeature_names = [\"x\", \"y\", \"z\"]\nmodel = ps.SINDy(feature_names=feature_names)\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "feature_names",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "feature_names = [\"x\", \"y\", \"z\"]\nmodel = ps.SINDy(feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Custom left-hand side when printing the model\n# In[48]:\nmodel = ps.SINDy()\nmodel.fit(x_train, t=dt)\nmodel.print(lhs=[\"dx0/dt\", \"dx1/dt\", \"dx2/dt\"])",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Custom left-hand side when printing the model\n# In[48]:\nmodel = ps.SINDy()\nmodel.fit(x_train, t=dt)\nmodel.print(lhs=[\"dx0/dt\", \"dx1/dt\", \"dx2/dt\"])\n# %% [markdown]",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train, t=dt)\nmodel.print(lhs=[\"dx0/dt\", \"dx1/dt\", \"dx2/dt\"])\n# %% [markdown]\n# ### Customize polynomial library\n# Omit interaction terms between variables, such as $x_0 x_1$.\n# In[49]:\npoly_library = ps.PolynomialLibrary(include_interaction=False)\nmodel = ps.SINDy(feature_library=poly_library, optimizer=ps.STLSQ(threshold=0.5))\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "poly_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "poly_library = ps.PolynomialLibrary(include_interaction=False)\nmodel = ps.SINDy(feature_library=poly_library, optimizer=ps.STLSQ(threshold=0.5))\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Fourier library\n# In[50]:\nfourier_library = ps.FourierLibrary(n_frequencies=3)\nmodel = ps.SINDy(feature_library=fourier_library, optimizer=ps.STLSQ(threshold=4))\nmodel.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=poly_library, optimizer=ps.STLSQ(threshold=0.5))\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Fourier library\n# In[50]:\nfourier_library = ps.FourierLibrary(n_frequencies=3)\nmodel = ps.SINDy(feature_library=fourier_library, optimizer=ps.STLSQ(threshold=4))\nmodel.fit(x_train, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fourier_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fourier_library = ps.FourierLibrary(n_frequencies=3)\nmodel = ps.SINDy(feature_library=fourier_library, optimizer=ps.STLSQ(threshold=4))\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Fully custom library\n# The `CustomLibrary` class gives you the option to pass in function names to improve the readability of the printed model. Each function \"name\" should itself be a function.\n# In[51]:\nlibrary_functions = [\n    lambda x: np.exp(x),",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=fourier_library, optimizer=ps.STLSQ(threshold=4))\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Fully custom library\n# The `CustomLibrary` class gives you the option to pass in function names to improve the readability of the printed model. Each function \"name\" should itself be a function.\n# In[51]:\nlibrary_functions = [\n    lambda x: np.exp(x),\n    lambda x: 1.0 / x,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "library_functions = [\n    lambda x: np.exp(x),\n    lambda x: 1.0 / x,\n    lambda x: x,\n    lambda x, y: np.sin(x + y),\n]\nlibrary_function_names = [\n    lambda x: \"exp(\" + x + \")\",\n    lambda x: \"1/\" + x,\n    lambda x: x,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "library_function_names",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "library_function_names = [\n    lambda x: \"exp(\" + x + \")\",\n    lambda x: \"1/\" + x,\n    lambda x: x,\n    lambda x, y: \"sin(\" + x + \",\" + y + \")\",\n]\ncustom_library = ps.CustomLibrary(\n    library_functions=library_functions, function_names=library_function_names\n)\nmodel = ps.SINDy(feature_library=custom_library)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "custom_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "custom_library = ps.CustomLibrary(\n    library_functions=library_functions, function_names=library_function_names\n)\nmodel = ps.SINDy(feature_library=custom_library)\nwith ignore_specific_warnings():\n    model.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Fully custom library, default function names\n# If no function names are given, default ones are given: `f0`, `f1`, ...",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=custom_library)\nwith ignore_specific_warnings():\n    model.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Fully custom library, default function names\n# If no function names are given, default ones are given: `f0`, `f1`, ...\n# In[52]:\nlibrary_functions = [\n    lambda x: np.exp(x),",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "library_functions",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "library_functions = [\n    lambda x: np.exp(x),\n    lambda x: 1.0 / x,\n    lambda x: x,\n    lambda x, y: np.sin(x + y),\n]\ncustom_library = ps.CustomLibrary(library_functions=library_functions)\nmodel = ps.SINDy(feature_library=custom_library)\nwith ignore_specific_warnings():\n    model.fit(x_train, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "custom_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "custom_library = ps.CustomLibrary(library_functions=library_functions)\nmodel = ps.SINDy(feature_library=custom_library)\nwith ignore_specific_warnings():\n    model.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Identity library\n# The `IdentityLibrary` leaves input data untouched. It allows the flexibility for users to apply custom transformations to the input data before feeding it into a `SINDy` model.\n# In[53]:\nidentity_library = ps.IdentityLibrary()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=custom_library)\nwith ignore_specific_warnings():\n    model.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Identity library\n# The `IdentityLibrary` leaves input data untouched. It allows the flexibility for users to apply custom transformations to the input data before feeding it into a `SINDy` model.\n# In[53]:\nidentity_library = ps.IdentityLibrary()\nmodel = ps.SINDy(feature_library=identity_library)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "identity_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "identity_library = ps.IdentityLibrary()\nmodel = ps.SINDy(feature_library=identity_library)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Concatenate two libraries\n# Two or more libraries can be combined via the `+` operator.\n# In[54]:\nidentity_library = ps.IdentityLibrary()\nfourier_library = ps.FourierLibrary()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=identity_library)\nmodel.fit(x_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Concatenate two libraries\n# Two or more libraries can be combined via the `+` operator.\n# In[54]:\nidentity_library = ps.IdentityLibrary()\nfourier_library = ps.FourierLibrary()\ncombined_library = identity_library + fourier_library",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "identity_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "identity_library = ps.IdentityLibrary()\nfourier_library = ps.FourierLibrary()\ncombined_library = identity_library + fourier_library\nmodel = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()\nmodel.get_feature_names()\n# %% [markdown]\n# ### Tensor two libraries together\n# Two or more libraries can be tensored together via the `*` operator.",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fourier_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fourier_library = ps.FourierLibrary()\ncombined_library = identity_library + fourier_library\nmodel = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()\nmodel.get_feature_names()\n# %% [markdown]\n# ### Tensor two libraries together\n# Two or more libraries can be tensored together via the `*` operator.\n# In[55]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "combined_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "combined_library = identity_library + fourier_library\nmodel = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()\nmodel.get_feature_names()\n# %% [markdown]\n# ### Tensor two libraries together\n# Two or more libraries can be tensored together via the `*` operator.\n# In[55]:\nidentity_library = ps.PolynomialLibrary(include_bias=False)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()\nmodel.get_feature_names()\n# %% [markdown]\n# ### Tensor two libraries together\n# Two or more libraries can be tensored together via the `*` operator.\n# In[55]:\nidentity_library = ps.PolynomialLibrary(include_bias=False)\nfourier_library = ps.FourierLibrary()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "identity_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "identity_library = ps.PolynomialLibrary(include_bias=False)\nfourier_library = ps.FourierLibrary()\ncombined_library = identity_library * fourier_library\nmodel = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\n# model.print()  # prints out long and unobvious model\nprint(\"Feature names:\\n\", model.get_feature_names())\n# In[56]:\n# the model prediction is quite bad of course\n# because the library has mostly useless terms",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fourier_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fourier_library = ps.FourierLibrary()\ncombined_library = identity_library * fourier_library\nmodel = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\n# model.print()  # prints out long and unobvious model\nprint(\"Feature names:\\n\", model.get_feature_names())\n# In[56]:\n# the model prediction is quite bad of course\n# because the library has mostly useless terms\nx_dot_test_predicted = model.predict(x_test)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "combined_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "combined_library = identity_library * fourier_library\nmodel = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\n# model.print()  # prints out long and unobvious model\nprint(\"Feature names:\\n\", model.get_feature_names())\n# In[56]:\n# the model prediction is quite bad of course\n# because the library has mostly useless terms\nx_dot_test_predicted = model.predict(x_test)\n# Compute derivatives with a finite difference method, for comparison",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=combined_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\n# model.print()  # prints out long and unobvious model\nprint(\"Feature names:\\n\", model.get_feature_names())\n# In[56]:\n# the model prediction is quite bad of course\n# because the library has mostly useless terms\nx_dot_test_predicted = model.predict(x_test)\n# Compute derivatives with a finite difference method, for comparison\nx_dot_test_computed = model.differentiate(x_test, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_test_predicted",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_test_predicted = model.predict(x_test)\n# Compute derivatives with a finite difference method, for comparison\nx_dot_test_computed = model.differentiate(x_test, t=dt)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_dot_test_computed[:, i], \"k\", label=\"numerical derivative\")\n    axs[i].plot(t_test, x_dot_test_predicted[:, i], \"r--\", label=\"model prediction\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=r\"$\\dot x_{}$\".format(i))\nfig.show()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_test_computed",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_test_computed = model.differentiate(x_test, t=dt)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_dot_test_computed[:, i], \"k\", label=\"numerical derivative\")\n    axs[i].plot(t_test, x_dot_test_predicted[:, i], \"r--\", label=\"model prediction\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=r\"$\\dot x_{}$\".format(i))\nfig.show()\n# %% [markdown]\n# ### Generalized library",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "poly_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "poly_library = ps.PolynomialLibrary(include_bias=False)\nfourier_library = ps.FourierLibrary()\n# Initialize the default inputs, but\n# don't use the x0 input for generating the Fourier library\ninputs_per_library = [(0, 1, 2), (1, 2)]\n# Tensor all the polynomial and Fourier library terms together\ntensor_array = [[1, 1]]\n# Initialize this generalized library, all the work hidden from the user!\ngeneralized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library],",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fourier_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fourier_library = ps.FourierLibrary()\n# Initialize the default inputs, but\n# don't use the x0 input for generating the Fourier library\ninputs_per_library = [(0, 1, 2), (1, 2)]\n# Tensor all the polynomial and Fourier library terms together\ntensor_array = [[1, 1]]\n# Initialize this generalized library, all the work hidden from the user!\ngeneralized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library],\n    tensor_array=tensor_array,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "inputs_per_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "inputs_per_library = [(0, 1, 2), (1, 2)]\n# Tensor all the polynomial and Fourier library terms together\ntensor_array = [[1, 1]]\n# Initialize this generalized library, all the work hidden from the user!\ngeneralized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library],\n    tensor_array=tensor_array,\n    exclude_libraries=[1],\n    inputs_per_library=inputs_per_library,\n)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "tensor_array",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "tensor_array = [[1, 1]]\n# Initialize this generalized library, all the work hidden from the user!\ngeneralized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library],\n    tensor_array=tensor_array,\n    exclude_libraries=[1],\n    inputs_per_library=inputs_per_library,\n)\n# Fit the model and print the library feature names to check success\nmodel = ps.SINDy(feature_library=generalized_library, feature_names=feature_names)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "generalized_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "generalized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library],\n    tensor_array=tensor_array,\n    exclude_libraries=[1],\n    inputs_per_library=inputs_per_library,\n)\n# Fit the model and print the library feature names to check success\nmodel = ps.SINDy(feature_library=generalized_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=generalized_library, feature_names=feature_names)\nmodel.fit(x_train, t=dt)\nmodel.print()\nprint(\"Feature names:\\n\", model.get_feature_names())\n# %% [markdown]\n# ## SINDy with control (SINDYc)\n# SINDy models with control inputs can also be learned. Here we learn a Lorenz control model:\n# $$ \\dot{x} = \\sigma (y - x) + u_0$$\n# $$ \\dot{y} = x(\\rho - z) - y $$\n# $$ \\dot{z} = x y - \\beta z - u_1$$",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "dt = 0.002\nt_train = np.arange(0, t_end_train, dt)\nt_train_span = (t_train[0], t_train[-1])\nx0_train = [-8, 8, 27]\nx_train = solve_ivp(\n    lorenz_control,\n    t_train_span,\n    x0_train,\n    t_eval=t_train,\n    args=(u_fun,),",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_train = np.arange(0, t_end_train, dt)\nt_train_span = (t_train[0], t_train[-1])\nx0_train = [-8, 8, 27]\nx_train = solve_ivp(\n    lorenz_control,\n    t_train_span,\n    x0_train,\n    t_eval=t_train,\n    args=(u_fun,),\n    **integrator_keywords,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_train_span",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_train_span = (t_train[0], t_train[-1])\nx0_train = [-8, 8, 27]\nx_train = solve_ivp(\n    lorenz_control,\n    t_train_span,\n    x0_train,\n    t_eval=t_train,\n    args=(u_fun,),\n    **integrator_keywords,\n).y.T",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x0_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x0_train = [-8, 8, 27]\nx_train = solve_ivp(\n    lorenz_control,\n    t_train_span,\n    x0_train,\n    t_eval=t_train,\n    args=(u_fun,),\n    **integrator_keywords,\n).y.T\nu_train = u_fun(t_train)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_train = solve_ivp(\n    lorenz_control,\n    t_train_span,\n    x0_train,\n    t_eval=t_train,\n    args=(u_fun,),\n    **integrator_keywords,\n).y.T\nu_train = u_fun(t_train)\n# In[59]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "u_train = u_fun(t_train)\n# In[59]:\n# Instantiate and fit the SINDYc model\nmodel = ps.SINDy()\nmodel.fit(x_train, u=u_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Assess results on a test trajectory\n# In[60]:\n# Evolve the Lorenz equations in time using a different initial condition",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy()\nmodel.fit(x_train, u=u_train, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Assess results on a test trajectory\n# In[60]:\n# Evolve the Lorenz equations in time using a different initial condition\nt_test = np.arange(0, t_end_test, dt)\nt_test_span = (t_test[0], t_test[-1])\nu_test = u_fun(t_test)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_test = np.arange(0, t_end_test, dt)\nt_test_span = (t_test[0], t_test[-1])\nu_test = u_fun(t_test)\nx0_test = np.array([8, 7, 15])\nx_test = solve_ivp(\n    lorenz_control,\n    t_test_span,\n    x0_test,\n    t_eval=t_test,\n    args=(u_fun,),",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t_test_span",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t_test_span = (t_test[0], t_test[-1])\nu_test = u_fun(t_test)\nx0_test = np.array([8, 7, 15])\nx_test = solve_ivp(\n    lorenz_control,\n    t_test_span,\n    x0_test,\n    t_eval=t_test,\n    args=(u_fun,),\n    **integrator_keywords,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "u_test = u_fun(t_test)\nx0_test = np.array([8, 7, 15])\nx_test = solve_ivp(\n    lorenz_control,\n    t_test_span,\n    x0_test,\n    t_eval=t_test,\n    args=(u_fun,),\n    **integrator_keywords,\n).y.T",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x0_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x0_test = np.array([8, 7, 15])\nx_test = solve_ivp(\n    lorenz_control,\n    t_test_span,\n    x0_test,\n    t_eval=t_test,\n    args=(u_fun,),\n    **integrator_keywords,\n).y.T\nu_test = u_fun(t_test)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_test = solve_ivp(\n    lorenz_control,\n    t_test_span,\n    x0_test,\n    t_eval=t_test,\n    args=(u_fun,),\n    **integrator_keywords,\n).y.T\nu_test = u_fun(t_test)\n# Compare SINDy-predicted derivatives with finite difference derivatives",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "u_test = u_fun(t_test)\n# Compare SINDy-predicted derivatives with finite difference derivatives\nprint(\"Model score: %f\" % model.score(x_test, u=u_test, t=dt))\n# %% [markdown]\n# ### Predict derivatives with learned model\n# In[61]:\n# Predict derivatives using the learned model\nx_dot_test_predicted = model.predict(x_test, u=u_test)\n# Compute derivatives with a finite difference method, for comparison\nx_dot_test_computed = model.differentiate(x_test, t=dt)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_test_predicted",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_test_predicted = model.predict(x_test, u=u_test)\n# Compute derivatives with a finite difference method, for comparison\nx_dot_test_computed = model.differentiate(x_test, t=dt)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_dot_test_computed[:, i], \"k\", label=\"numerical derivative\")\n    axs[i].plot(t_test, x_dot_test_predicted[:, i], \"r--\", label=\"model prediction\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=r\"$\\dot x_{}$\".format(i))\nfig.show()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_dot_test_computed",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_dot_test_computed = model.differentiate(x_test, t=dt)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_dot_test_computed[:, i], \"k\", label=\"numerical derivative\")\n    axs[i].plot(t_test, x_dot_test_predicted[:, i], \"r--\", label=\"model prediction\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=r\"$\\dot x_{}$\".format(i))\nfig.show()\n# %% [markdown]\n# ### Simulate forward in time (control input function known)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_test_sim",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_test_sim = model.simulate(x0_test, t_test, u=u_fun)\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(7, 9))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test, x_test[:, i], \"k\", label=\"true simulation\")\n    axs[i].plot(t_test, x_test_sim[:, i], \"r--\", label=\"model simulation\")\n    axs[i].legend()\n    axs[i].set(xlabel=\"t\", ylabel=\"$x_{}$\".format(i))\nfig = plt.figure(figsize=(10, 4.5))\nax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"k\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fig = plt.figure(figsize=(10, 4.5))\nax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"k\")\nax1.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"true simulation\")\nax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test_sim[:, 0], x_test_sim[:, 1], x_test_sim[:, 2], \"r--\")\nax2.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation\")\nfig.show()\n# %% [markdown]\n# ### Simulate forward in time (unknown control input function)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"k\")\nax1.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"true simulation\")\nax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test_sim[:, 0], x_test_sim[:, 1], x_test_sim[:, 2], \"r--\")\nax2.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation\")\nfig.show()\n# %% [markdown]\n# ### Simulate forward in time (unknown control input function)\n# If you only have a vector of control input values at the times in `t_test` and do not know the functional form for `u`, the `simulate` function will internally form an interpolating function based on the vector of control inputs. As a consequence of this interpolation procedure, `simulate` will not give a state estimate for the last time point in `t_test`. This is because the default integrator, `scipy.integrate.solve_ivp` (with LSODA as the default solver), is adaptive and sometimes attempts to evaluate the interpolant outside the domain of interpolation, causing an error.",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test_sim[:, 0], x_test_sim[:, 1], x_test_sim[:, 2], \"r--\")\nax2.set(xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation\")\nfig.show()\n# %% [markdown]\n# ### Simulate forward in time (unknown control input function)\n# If you only have a vector of control input values at the times in `t_test` and do not know the functional form for `u`, the `simulate` function will internally form an interpolating function based on the vector of control inputs. As a consequence of this interpolation procedure, `simulate` will not give a state estimate for the last time point in `t_test`. This is because the default integrator, `scipy.integrate.solve_ivp` (with LSODA as the default solver), is adaptive and sometimes attempts to evaluate the interpolant outside the domain of interpolation, causing an error.\n# In[63]:\nu_test = u_fun(t_test)\n# In[64]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u_test",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "u_test = u_fun(t_test)\n# In[64]:\nx_test_sim = model.simulate(x0_test, t_test, u=u_test)\n# Note that the output is one example short of the length of t_test\nprint(\"Length of t_test:\", len(t_test))\nprint(\"Length of simulation:\", len(x_test_sim))\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(12, 4))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test[:-1], x_test[:-1, i], \"k\", label=\"true simulation\")\n    axs[i].plot(t_test[:-1], x_test_sim[:, i], \"r--\", label=\"model simulation\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x_test_sim",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x_test_sim = model.simulate(x0_test, t_test, u=u_test)\n# Note that the output is one example short of the length of t_test\nprint(\"Length of t_test:\", len(t_test))\nprint(\"Length of simulation:\", len(x_test_sim))\nfig, axs = plt.subplots(x_test.shape[1], 1, sharex=True, figsize=(12, 4))\nfor i in range(x_test.shape[1]):\n    axs[i].plot(t_test[:-1], x_test[:-1, i], \"k\", label=\"true simulation\")\n    axs[i].plot(t_test[:-1], x_test_sim[:, i], \"r--\", label=\"model simulation\")\n    axs[i].set(xlabel=\"t\", ylabel=\"$x_{}$\".format(i))\nfig.show()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "r0",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "r0 = 3.5\nrs = r0 + np.arange(num) / num * (4 - r0)\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "rs",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "rs = r0 + np.arange(num) / num * (4 - r0)\nxss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)\n    xss = xss + [xs]",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "xss",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "xss = []\nfor r in rs:\n    xs = []\n    x = 0.5\n    for n in range(N + N_drop):\n        if n >= N_drop:\n            xs = xs + [x]\n        x = r * x * (1 - x)\n    xss = xss + [xs]\nplt.figure(figsize=(4, 4), dpi=100)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "rs_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "rs_train = [3.6, 3.7, 3.8, 3.9]\nxs_train = [np.array(xss[np.where(np.array(rs) == r)[0][0]]) for r in rs_train]\nfeature_lib = ps.PolynomialLibrary(degree=3, include_bias=True)\nparameter_lib = ps.PolynomialLibrary(degree=1, include_bias=True)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "xs_train",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "xs_train = [np.array(xss[np.where(np.array(rs) == r)[0][0]]) for r in rs_train]\nfeature_lib = ps.PolynomialLibrary(degree=3, include_bias=True)\nparameter_lib = ps.PolynomialLibrary(degree=1, include_bias=True)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "feature_lib",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "feature_lib = ps.PolynomialLibrary(degree=3, include_bias=True)\nparameter_lib = ps.PolynomialLibrary(degree=1, include_bias=True)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "parameter_lib",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "parameter_lib = ps.PolynomialLibrary(degree=1, include_bias=True)\nlib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "lib = ps.ParameterizedLibrary(\n    feature_library=feature_lib,\n    parameter_library=parameter_lib,\n    num_features=1,\n    num_parameters=1,\n)\nopt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True\n)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "opt",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "opt = ps.STLSQ(threshold=1e-1, normalize_columns=False)\nmodel = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True\n)\nmodel.fit(xs_train, u=rs_train)\nmodel.print()\n# %% [markdown]\n# ## PDEFIND Feature Overview\n# PySINDy now supports SINDy for PDE identification (PDE-FIND) (Rudy, Samuel H., Steven L. Brunton, Joshua L. Proctor, and J. Nathan Kutz. \"Data-driven discovery of partial differential equations.\" Science Advances 3, no. 4 (2017): e1602614.). We illustrate a basic example on Burgers' equation:\n# $$u_t = -uu_x + 0.1u_{xx}$$",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(\n    feature_library=lib, optimizer=opt, feature_names=[\"x\", \"r\"], discrete_time=True\n)\nmodel.fit(xs_train, u=rs_train)\nmodel.print()\n# %% [markdown]\n# ## PDEFIND Feature Overview\n# PySINDy now supports SINDy for PDE identification (PDE-FIND) (Rudy, Samuel H., Steven L. Brunton, Joshua L. Proctor, and J. Nathan Kutz. \"Data-driven discovery of partial differential equations.\" Science Advances 3, no. 4 (2017): e1602614.). We illustrate a basic example on Burgers' equation:\n# $$u_t = -uu_x + 0.1u_{xx}$$\n#",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "data = loadmat(data / \"burgers.mat\")\nt = np.ravel(data[\"t\"])\nx = np.ravel(data[\"x\"])\nu = np.real(data[\"usol\"])\ndt = t[1] - t[0]\ndx = x[1] - x[0]\nu_dot = ps.FiniteDifference(axis=-1)._differentiate(u, t=dt)\n# Plot the spatiotemporal data\nplt.figure()\nplt.imshow(u, aspect=\"auto\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "t = np.ravel(data[\"t\"])\nx = np.ravel(data[\"x\"])\nu = np.real(data[\"usol\"])\ndt = t[1] - t[0]\ndx = x[1] - x[0]\nu_dot = ps.FiniteDifference(axis=-1)._differentiate(u, t=dt)\n# Plot the spatiotemporal data\nplt.figure()\nplt.imshow(u, aspect=\"auto\")\nplt.colorbar()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x = np.ravel(data[\"x\"])\nu = np.real(data[\"usol\"])\ndt = t[1] - t[0]\ndx = x[1] - x[0]\nu_dot = ps.FiniteDifference(axis=-1)._differentiate(u, t=dt)\n# Plot the spatiotemporal data\nplt.figure()\nplt.imshow(u, aspect=\"auto\")\nplt.colorbar()\nplt.figure()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "u = np.real(data[\"usol\"])\ndt = t[1] - t[0]\ndx = x[1] - x[0]\nu_dot = ps.FiniteDifference(axis=-1)._differentiate(u, t=dt)\n# Plot the spatiotemporal data\nplt.figure()\nplt.imshow(u, aspect=\"auto\")\nplt.colorbar()\nplt.figure()\nplt.imshow(u_dot, aspect=\"auto\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "dt = t[1] - t[0]\ndx = x[1] - x[0]\nu_dot = ps.FiniteDifference(axis=-1)._differentiate(u, t=dt)\n# Plot the spatiotemporal data\nplt.figure()\nplt.imshow(u, aspect=\"auto\")\nplt.colorbar()\nplt.figure()\nplt.imshow(u_dot, aspect=\"auto\")\nplt.colorbar()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "dx = x[1] - x[0]\nu_dot = ps.FiniteDifference(axis=-1)._differentiate(u, t=dt)\n# Plot the spatiotemporal data\nplt.figure()\nplt.imshow(u, aspect=\"auto\")\nplt.colorbar()\nplt.figure()\nplt.imshow(u_dot, aspect=\"auto\")\nplt.colorbar()\nu = np.reshape(u, (len(x), len(t), 1))",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u_dot",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "u_dot = ps.FiniteDifference(axis=-1)._differentiate(u, t=dt)\n# Plot the spatiotemporal data\nplt.figure()\nplt.imshow(u, aspect=\"auto\")\nplt.colorbar()\nplt.figure()\nplt.imshow(u_dot, aspect=\"auto\")\nplt.colorbar()\nu = np.reshape(u, (len(x), len(t), 1))\n# Define quadratic library with up to third order derivatives",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "u",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "u = np.reshape(u, (len(x), len(t), 1))\n# Define quadratic library with up to third order derivatives\n# on a uniform spatial grid. Do not include a constant term in the function_library!\npde_lib = ps.PDELibrary(\n    function_library=ps.PolynomialLibrary(degree=2, include_bias=False),\n    derivative_order=3,\n    spatial_grid=x,\n    diff_kwargs={\"is_uniform\": True, \"periodic\": True},\n)\noptimizer = ps.STLSQ(threshold=0.1, alpha=1e-5, normalize_columns=True)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "pde_lib",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "pde_lib = ps.PDELibrary(\n    function_library=ps.PolynomialLibrary(degree=2, include_bias=False),\n    derivative_order=3,\n    spatial_grid=x,\n    diff_kwargs={\"is_uniform\": True, \"periodic\": True},\n)\noptimizer = ps.STLSQ(threshold=0.1, alpha=1e-5, normalize_columns=True)\nmodel = ps.SINDy(feature_library=pde_lib, optimizer=optimizer)\n# Note that the dimensions of u are reshaped internally,\n# according to the dimensions in spatial_grid",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "optimizer = ps.STLSQ(threshold=0.1, alpha=1e-5, normalize_columns=True)\nmodel = ps.SINDy(feature_library=pde_lib, optimizer=optimizer)\n# Note that the dimensions of u are reshaped internally,\n# according to the dimensions in spatial_grid\nmodel.fit(u, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Weak formulation system identification improves robustness to noise.\n# PySINDy also supports weak form PDE identification following Reinbold et al. (2019).\n# In[69]:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=pde_lib, optimizer=optimizer)\n# Note that the dimensions of u are reshaped internally,\n# according to the dimensions in spatial_grid\nmodel.fit(u, t=dt)\nmodel.print()\n# %% [markdown]\n# ### Weak formulation system identification improves robustness to noise.\n# PySINDy also supports weak form PDE identification following Reinbold et al. (2019).\n# In[69]:\n# Same library but using the weak formulation",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "XT",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "XT = np.array([X, T]).T\npde_lib = ps.WeakPDELibrary(\n    function_library=ps.PolynomialLibrary(degree=2, include_bias=False),\n    derivative_order=3,\n    spatiotemporal_grid=XT,\n    is_uniform=True,\n)\n# In[70]:\noptimizer = ps.STLSQ(threshold=0.01, alpha=1e-5, normalize_columns=True)\nmodel = ps.SINDy(feature_library=pde_lib, optimizer=optimizer)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "pde_lib",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "pde_lib = ps.WeakPDELibrary(\n    function_library=ps.PolynomialLibrary(degree=2, include_bias=False),\n    derivative_order=3,\n    spatiotemporal_grid=XT,\n    is_uniform=True,\n)\n# In[70]:\noptimizer = ps.STLSQ(threshold=0.01, alpha=1e-5, normalize_columns=True)\nmodel = ps.SINDy(feature_library=pde_lib, optimizer=optimizer)\n# Note that reshaping u is done internally",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "optimizer = ps.STLSQ(threshold=0.01, alpha=1e-5, normalize_columns=True)\nmodel = ps.SINDy(feature_library=pde_lib, optimizer=optimizer)\n# Note that reshaping u is done internally\nmodel.fit(u, t=dt)\nmodel.print()\n# %% [markdown]\n# ### GeneralizedLibrary\n# The `GeneralizedLibrary` is meant for identifying ODEs/PDEs the depend on the spatial and/or temporal coordinates and/or nonlinear functions of derivative terms.\n#\n# Often, especially for PDEs, there is some explicit spatiotemporal dependence such as through an external potential. For instance, a well known PDE is the Poisson equation for the electric potential in 2D:",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=pde_lib, optimizer=optimizer)\n# Note that reshaping u is done internally\nmodel.fit(u, t=dt)\nmodel.print()\n# %% [markdown]\n# ### GeneralizedLibrary\n# The `GeneralizedLibrary` is meant for identifying ODEs/PDEs the depend on the spatial and/or temporal coordinates and/or nonlinear functions of derivative terms.\n#\n# Often, especially for PDEs, there is some explicit spatiotemporal dependence such as through an external potential. For instance, a well known PDE is the Poisson equation for the electric potential in 2D:\n# $$ (\\partial_{xx} + \\partial_{yy})\\phi(x, y) = \\rho(x,y).$$",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "Lx",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "Lx = 1\nLy = 1\nx = np.linspace(0, Lx, nx)\ndx = x[1] - x[0]\ny = np.linspace(0, Ly, ny)\ndy = y[1] - y[0]\nX, Y = np.meshgrid(x, y, indexing=\"ij\")\n# Define rho\nrho = X**2 + Y**2\nplt.figure(figsize=(20, 3))",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "Ly",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "Ly = 1\nx = np.linspace(0, Lx, nx)\ndx = x[1] - x[0]\ny = np.linspace(0, Ly, ny)\ndy = y[1] - y[0]\nX, Y = np.meshgrid(x, y, indexing=\"ij\")\n# Define rho\nrho = X**2 + Y**2\nplt.figure(figsize=(20, 3))\nplt.subplot(1, 5, 1)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "x = np.linspace(0, Lx, nx)\ndx = x[1] - x[0]\ny = np.linspace(0, Ly, ny)\ndy = y[1] - y[0]\nX, Y = np.meshgrid(x, y, indexing=\"ij\")\n# Define rho\nrho = X**2 + Y**2\nplt.figure(figsize=(20, 3))\nplt.subplot(1, 5, 1)\nplt.imshow(rho, aspect=\"auto\", origin=\"lower\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "dx = x[1] - x[0]\ny = np.linspace(0, Ly, ny)\ndy = y[1] - y[0]\nX, Y = np.meshgrid(x, y, indexing=\"ij\")\n# Define rho\nrho = X**2 + Y**2\nplt.figure(figsize=(20, 3))\nplt.subplot(1, 5, 1)\nplt.imshow(rho, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\rho(x, y)$\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "y = np.linspace(0, Ly, ny)\ndy = y[1] - y[0]\nX, Y = np.meshgrid(x, y, indexing=\"ij\")\n# Define rho\nrho = X**2 + Y**2\nplt.figure(figsize=(20, 3))\nplt.subplot(1, 5, 1)\nplt.imshow(rho, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\rho(x, y)$\")\nplt.colorbar()",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "dy = y[1] - y[0]\nX, Y = np.meshgrid(x, y, indexing=\"ij\")\n# Define rho\nrho = X**2 + Y**2\nplt.figure(figsize=(20, 3))\nplt.subplot(1, 5, 1)\nplt.imshow(rho, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\rho(x, y)$\")\nplt.colorbar()\n# Generate the PDE data for phi by fourier transforms",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "rho",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "rho = X**2 + Y**2\nplt.figure(figsize=(20, 3))\nplt.subplot(1, 5, 1)\nplt.imshow(rho, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\rho(x, y)$\")\nplt.colorbar()\n# Generate the PDE data for phi by fourier transforms\n# since this is homogeneous PDE\n# and we assume periodic boundary conditions\nnx2 = int(nx / 2)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "nx2",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "nx2 = int(nx / 2)\nny2 = int(ny / 2)\n# Define Fourier wavevectors (kx, ky)\nkx = (2 * np.pi / Lx) * np.hstack(\n    (np.linspace(0, nx2 - 1, nx2), np.linspace(-nx2, -1, nx2))\n)\nky = (2 * np.pi / Ly) * np.hstack(\n    (np.linspace(0, ny2 - 1, ny2), np.linspace(-ny2, -1, ny2))\n)\n# Get 2D mesh in (kx, ky)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ny2",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ny2 = int(ny / 2)\n# Define Fourier wavevectors (kx, ky)\nkx = (2 * np.pi / Lx) * np.hstack(\n    (np.linspace(0, nx2 - 1, nx2), np.linspace(-nx2, -1, nx2))\n)\nky = (2 * np.pi / Ly) * np.hstack(\n    (np.linspace(0, ny2 - 1, ny2), np.linspace(-ny2, -1, ny2))\n)\n# Get 2D mesh in (kx, ky)\nKX, KY = np.meshgrid(kx, ky, indexing=\"ij\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "kx",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "kx = (2 * np.pi / Lx) * np.hstack(\n    (np.linspace(0, nx2 - 1, nx2), np.linspace(-nx2, -1, nx2))\n)\nky = (2 * np.pi / Ly) * np.hstack(\n    (np.linspace(0, ny2 - 1, ny2), np.linspace(-ny2, -1, ny2))\n)\n# Get 2D mesh in (kx, ky)\nKX, KY = np.meshgrid(kx, ky, indexing=\"ij\")\nK2 = KX**2 + KY**2\nK2[0, 0] = 1e-5",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "ky",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "ky = (2 * np.pi / Ly) * np.hstack(\n    (np.linspace(0, ny2 - 1, ny2), np.linspace(-ny2, -1, ny2))\n)\n# Get 2D mesh in (kx, ky)\nKX, KY = np.meshgrid(kx, ky, indexing=\"ij\")\nK2 = KX**2 + KY**2\nK2[0, 0] = 1e-5\n# Generate phi data by solving the PDE and plot results\nphi = np.real(np.fft.ifft2(-np.fft.fft2(rho) / K2))\nplt.subplot(1, 5, 2)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "K2",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "K2 = KX**2 + KY**2\nK2[0, 0] = 1e-5\n# Generate phi data by solving the PDE and plot results\nphi = np.real(np.fft.ifft2(-np.fft.fft2(rho) / K2))\nplt.subplot(1, 5, 2)\nplt.imshow(phi, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\phi(x, y)$\")\nplt.colorbar()\n# Make del^2 phi and plot various quantities\nphi_xx = ps.FiniteDifference(d=2, axis=0)._differentiate(phi, dx)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "phi",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "phi = np.real(np.fft.ifft2(-np.fft.fft2(rho) / K2))\nplt.subplot(1, 5, 2)\nplt.imshow(phi, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\phi(x, y)$\")\nplt.colorbar()\n# Make del^2 phi and plot various quantities\nphi_xx = ps.FiniteDifference(d=2, axis=0)._differentiate(phi, dx)\nphi_yy = ps.FiniteDifference(d=2, axis=1)._differentiate(phi, dy)\nplt.subplot(1, 5, 3)\nplt.imshow(phi_xx, aspect=\"auto\", origin=\"lower\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "phi_xx",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "phi_xx = ps.FiniteDifference(d=2, axis=0)._differentiate(phi, dx)\nphi_yy = ps.FiniteDifference(d=2, axis=1)._differentiate(phi, dy)\nplt.subplot(1, 5, 3)\nplt.imshow(phi_xx, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\phi_{xx}(x, y)$\")\nplt.subplot(1, 5, 4)\nplt.imshow(phi_yy, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\phi_{yy}(x, y)$\")\nplt.subplot(1, 5, 5)\nplt.imshow(",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "phi_yy",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "phi_yy = ps.FiniteDifference(d=2, axis=1)._differentiate(phi, dy)\nplt.subplot(1, 5, 3)\nplt.imshow(phi_xx, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\phi_{xx}(x, y)$\")\nplt.subplot(1, 5, 4)\nplt.imshow(phi_yy, aspect=\"auto\", origin=\"lower\")\nplt.title(r\"$\\phi_{yy}(x, y)$\")\nplt.subplot(1, 5, 5)\nplt.imshow(\n    phi_xx + phi_yy + abs(np.min(phi_xx + phi_yy)),",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "poly_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "poly_library = ps.PolynomialLibrary(include_bias=False)\nfourier_library = ps.FourierLibrary()\nX_mesh, Y_mesh = np.meshgrid(x, y)\npde_library = ps.PDELibrary(\n    function_library=ps.CustomLibrary(library_functions=[], function_names=[]),\n    derivative_order=1,\n    spatial_grid=np.asarray([X_mesh, Y_mesh]).T,\n)\n# Inputs are going to be all the variables [phi, X, Y].\n# Remember we can use a subset of these input variables to generate each library",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "fourier_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "fourier_library = ps.FourierLibrary()\nX_mesh, Y_mesh = np.meshgrid(x, y)\npde_library = ps.PDELibrary(\n    function_library=ps.CustomLibrary(library_functions=[], function_names=[]),\n    derivative_order=1,\n    spatial_grid=np.asarray([X_mesh, Y_mesh]).T,\n)\n# Inputs are going to be all the variables [phi, X, Y].\n# Remember we can use a subset of these input variables to generate each library\ndata = np.transpose(np.asarray([phi, X, Y]), [1, 2, 0])",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "pde_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "pde_library = ps.PDELibrary(\n    function_library=ps.CustomLibrary(library_functions=[], function_names=[]),\n    derivative_order=1,\n    spatial_grid=np.asarray([X_mesh, Y_mesh]).T,\n)\n# Inputs are going to be all the variables [phi, X, Y].\n# Remember we can use a subset of these input variables to generate each library\ndata = np.transpose(np.asarray([phi, X, Y]), [1, 2, 0])\n# The 'x_dot' terms will be [phi_xx, X, Y]\n# Remember these are the things that are being fit in the SINDy regression",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "data = np.transpose(np.asarray([phi, X, Y]), [1, 2, 0])\n# The 'x_dot' terms will be [phi_xx, X, Y]\n# Remember these are the things that are being fit in the SINDy regression\nLaplacian_phi = phi_xx + phi_yy + abs(np.min(phi_xx + phi_yy))\ndata_dot = np.transpose(np.asarray([Laplacian_phi, X, Y]), [1, 2, 0])\n# Tensor polynomial library with the PDE library\ntensor_array = [[1, 0, 1]]\n# Remove X and Y from PDE library terms because why would we take these derivatives\ninputs_per_library = [(0, 1, 2), (0, 1, 2), (0,)]\n# Fit a generalized library of 3 feature libraries + 1 internally",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "Laplacian_phi",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "Laplacian_phi = phi_xx + phi_yy + abs(np.min(phi_xx + phi_yy))\ndata_dot = np.transpose(np.asarray([Laplacian_phi, X, Y]), [1, 2, 0])\n# Tensor polynomial library with the PDE library\ntensor_array = [[1, 0, 1]]\n# Remove X and Y from PDE library terms because why would we take these derivatives\ninputs_per_library = [(0, 1, 2), (0, 1, 2), (0,)]\n# Fit a generalized library of 3 feature libraries + 1 internally\n# generated tensored library and only use the input variable phi\n# for the PDELibrary. Note that this holds true both for the\n# individual PDELibrary and any tensored libraries constructed from it.",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "data_dot",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "data_dot = np.transpose(np.asarray([Laplacian_phi, X, Y]), [1, 2, 0])\n# Tensor polynomial library with the PDE library\ntensor_array = [[1, 0, 1]]\n# Remove X and Y from PDE library terms because why would we take these derivatives\ninputs_per_library = [(0, 1, 2), (0, 1, 2), (0,)]\n# Fit a generalized library of 3 feature libraries + 1 internally\n# generated tensored library and only use the input variable phi\n# for the PDELibrary. Note that this holds true both for the\n# individual PDELibrary and any tensored libraries constructed from it.\ngeneralized_library = ps.GeneralizedLibrary(",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "tensor_array",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "tensor_array = [[1, 0, 1]]\n# Remove X and Y from PDE library terms because why would we take these derivatives\ninputs_per_library = [(0, 1, 2), (0, 1, 2), (0,)]\n# Fit a generalized library of 3 feature libraries + 1 internally\n# generated tensored library and only use the input variable phi\n# for the PDELibrary. Note that this holds true both for the\n# individual PDELibrary and any tensored libraries constructed from it.\ngeneralized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library, pde_library],\n    tensor_array=tensor_array,",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "inputs_per_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "inputs_per_library = [(0, 1, 2), (0, 1, 2), (0,)]\n# Fit a generalized library of 3 feature libraries + 1 internally\n# generated tensored library and only use the input variable phi\n# for the PDELibrary. Note that this holds true both for the\n# individual PDELibrary and any tensored libraries constructed from it.\ngeneralized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library, pde_library],\n    tensor_array=tensor_array,\n    inputs_per_library=inputs_per_library,\n)",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "generalized_library",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "generalized_library = ps.GeneralizedLibrary(\n    [poly_library, fourier_library, pde_library],\n    tensor_array=tensor_array,\n    inputs_per_library=inputs_per_library,\n)\noptimizer = ps.STLSQ(threshold=8, alpha=1e-3, normalize_columns=True)\nmodel = ps.SINDy(feature_library=generalized_library, optimizer=optimizer)\nmodel.fit(data, x_dot=data_dot)\n# Note scale of phi is large so some coefficients >> 1\n# --> would want to rescale phi with eps_0 for a harder problem",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "optimizer = ps.STLSQ(threshold=8, alpha=1e-3, normalize_columns=True)\nmodel = ps.SINDy(feature_library=generalized_library, optimizer=optimizer)\nmodel.fit(data, x_dot=data_dot)\n# Note scale of phi is large so some coefficients >> 1\n# --> would want to rescale phi with eps_0 for a harder problem\nmodel.print()\n# In[72]:\n# Get prediction of rho and plot results\n# predict expects a time axis...so add one and ignore it...\ndata_shaped = data.reshape((data.shape[0], data.shape[1], 1, data.shape[2]))",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "model = ps.SINDy(feature_library=generalized_library, optimizer=optimizer)\nmodel.fit(data, x_dot=data_dot)\n# Note scale of phi is large so some coefficients >> 1\n# --> would want to rescale phi with eps_0 for a harder problem\nmodel.print()\n# In[72]:\n# Get prediction of rho and plot results\n# predict expects a time axis...so add one and ignore it...\ndata_shaped = data.reshape((data.shape[0], data.shape[1], 1, data.shape[2]))\nrho_pred = model.predict(data_shaped)[:, :, 0, :]",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "data_shaped",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "data_shaped = data.reshape((data.shape[0], data.shape[1], 1, data.shape[2]))\nrho_pred = model.predict(data_shaped)[:, :, 0, :]\nif __name__ != \"testing\":\n    plt.figure(figsize=(16, 4))\n    plt.subplot(1, 3, 1)\n    plt.title(r\"True $\\rho$\")\n    plt.imshow(rho, aspect=\"auto\", origin=\"lower\")\n    plt.colorbar()\n    plt.subplot(1, 3, 2)\n    plt.title(r\"Predicted $\\rho_p$\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "rho_pred",
        "kind": 5,
        "importPath": "pysindy.examples.1_feature_overview.example",
        "description": "pysindy.examples.1_feature_overview.example",
        "peekOfCode": "rho_pred = model.predict(data_shaped)[:, :, 0, :]\nif __name__ != \"testing\":\n    plt.figure(figsize=(16, 4))\n    plt.subplot(1, 3, 1)\n    plt.title(r\"True $\\rho$\")\n    plt.imshow(rho, aspect=\"auto\", origin=\"lower\")\n    plt.colorbar()\n    plt.subplot(1, 3, 2)\n    plt.title(r\"Predicted $\\rho_p$\")\n    plt.imshow(rho_pred[:, :, 0], aspect=\"auto\", origin=\"lower\")",
        "detail": "pysindy.examples.1_feature_overview.example",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "X = np.stack((x, y), axis=-1)  # First column is x, second is y\n# We can select a differentiation method from the `differentiation` submodule.\n# In[3]:\ndifferentiation_method = ps.FiniteDifference(order=2)\n# We could instead call ps.differentiation.FiniteDifference(order=2)\n# While we could use this method to compute $\\dot X$ \"by hand,\" it is often more convenient to pass it into the `SINDy` object and let the computation of $\\dot X$ be handled automatically.\n#\n# The candidate library can be specified with an object from the `feature_library` submodule, which will also be passed into the `SINDy` object.\n# In[4]:",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "differentiation_method",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "differentiation_method = ps.FiniteDifference(order=2)\n# We could instead call ps.differentiation.FiniteDifference(order=2)\n# While we could use this method to compute $\\dot X$ \"by hand,\" it is often more convenient to pass it into the `SINDy` object and let the computation of $\\dot X$ be handled automatically.\n#\n# The candidate library can be specified with an object from the `feature_library` submodule, which will also be passed into the `SINDy` object.\n# In[4]:\nfeature_library = ps.PolynomialLibrary(degree=3)\n# Note: We could instead call ps.feature_library.PolynomialLibrary(degree=3)\n# Next we select which optimizer should be used.\n# In[5]:",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "feature_library",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "feature_library = ps.PolynomialLibrary(degree=3)\n# Note: We could instead call ps.feature_library.PolynomialLibrary(degree=3)\n# Next we select which optimizer should be used.\n# In[5]:\noptimizer = ps.STLSQ(threshold=0.2)\n# Note: We could instead call ps.optimizers.STLSQ(threshold=0.2)\n# Finally, we bring these three components together in one `SINDy` object.\n# In[6]:",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "optimizer = ps.STLSQ(threshold=0.2)\n# Note: We could instead call ps.optimizers.STLSQ(threshold=0.2)\n# Finally, we bring these three components together in one `SINDy` object.\n# In[6]:\nmodel = ps.SINDy(\n    differentiation_method=differentiation_method,\n    feature_library=feature_library,\n    optimizer=optimizer,\n    feature_names=[\"x\", \"y\"],\n)",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "model = ps.SINDy(\n    differentiation_method=differentiation_method,\n    feature_library=feature_library,\n    optimizer=optimizer,\n    feature_names=[\"x\", \"y\"],\n)\n# Following the `scikit-learn` workflow, we first instantiate a `SINDy` class object with the desired properties, then fit it to the data in separate step.\n# In[7]:\nmodel.fit(X, t=t)\n# We can inspect the governing equations discovered by the model and check whether they seem reasonable with the `print` function.",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "sim",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "sim = model.simulate([x0, y0], t=t_test)\n# In[10]:\nimport matplotlib.pyplot as plt\nplt.ion()\nplt.figure()\nplt.plot(x0, y0, \"ro\", label=\"Initial condition\", alpha=0.6, markersize=8)\nplt.plot(x_test, y_test, \"b\", label=\"Exact solution\", alpha=0.4, linewidth=4)\nplt.plot(sim[:, 0], sim[:, 1], \"k--\", label=\"SINDy model\", linewidth=3)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "feature_library",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "feature_library = ps.FourierLibrary()\nmodel = ps.SINDy(\n    differentiation_method=differentiation_method,\n    feature_library=feature_library,\n    optimizer=optimizer,\n    feature_names=[\"x\", \"y\"],\n)\nmodel.fit(X, t=t)\nmodel.print()",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example",
        "description": "pysindy.examples.2_introduction_to_sindy.example",
        "peekOfCode": "model = ps.SINDy(\n    differentiation_method=differentiation_method,\n    feature_library=feature_library,\n    optimizer=optimizer,\n    feature_names=[\"x\", \"y\"],\n)\nmodel.fit(X, t=t)\nmodel.print()",
        "detail": "pysindy.examples.2_introduction_to_sindy.example",
        "documentation": {}
    },
    {
        "label": "gen_data1",
        "kind": 2,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example_data",
        "description": "pysindy.examples.2_introduction_to_sindy.example_data",
        "peekOfCode": "def gen_data1():\n    t = np.linspace(0, 1, 100)\n    x = 3 * np.exp(-2 * t)\n    y = 0.5 * np.exp(t)\n    return t, x, y\ndef gen_data2():\n    x0 = 6\n    y0 = -0.1\n    t_test = np.linspace(0, 1, 100)\n    x_test = x0 * np.exp(-2 * t_test)",
        "detail": "pysindy.examples.2_introduction_to_sindy.example_data",
        "documentation": {}
    },
    {
        "label": "gen_data2",
        "kind": 2,
        "importPath": "pysindy.examples.2_introduction_to_sindy.example_data",
        "description": "pysindy.examples.2_introduction_to_sindy.example_data",
        "peekOfCode": "def gen_data2():\n    x0 = 6\n    y0 = -0.1\n    t_test = np.linspace(0, 1, 100)\n    x_test = x0 * np.exp(-2 * t_test)\n    y_test = y0 * np.exp(t_test)\n    return x0, y0, t_test, x_test, y_test",
        "detail": "pysindy.examples.2_introduction_to_sindy.example_data",
        "documentation": {}
    },
    {
        "label": "gen_data1",
        "kind": 2,
        "importPath": "pysindy.examples.2_introduction_to_sindy.mock_data",
        "description": "pysindy.examples.2_introduction_to_sindy.mock_data",
        "peekOfCode": "def gen_data1():\n    t = np.linspace(0, 0.1, 10)\n    x = 3 * np.exp(-2 * t)\n    y = 0.5 * np.exp(t)\n    return t, x, y\ndef gen_data2():\n    x0 = 6\n    y0 = -0.1\n    t_test = np.linspace(0, 0.1, 10)\n    x_test = x0 * np.exp(-2 * t_test)",
        "detail": "pysindy.examples.2_introduction_to_sindy.mock_data",
        "documentation": {}
    },
    {
        "label": "gen_data2",
        "kind": 2,
        "importPath": "pysindy.examples.2_introduction_to_sindy.mock_data",
        "description": "pysindy.examples.2_introduction_to_sindy.mock_data",
        "peekOfCode": "def gen_data2():\n    x0 = 6\n    y0 = -0.1\n    t_test = np.linspace(0, 0.1, 10)\n    x_test = x0 * np.exp(-2 * t_test)\n    y_test = y0 * np.exp(t_test)\n    return x0, y0, t_test, x_test, y_test",
        "detail": "pysindy.examples.2_introduction_to_sindy.mock_data",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "integrator_keywords = {}\nintegrator_keywords[\"rtol\"] = 1e-12\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-12\nfrom utils import (\n    compare_methods,\n    print_equations,\n    compare_coefficient_plots,\n    plot_sho,\n    plot_lorenz,",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"rtol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "integrator_keywords[\"rtol\"] = 1e-12\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-12\nfrom utils import (\n    compare_methods,\n    print_equations,\n    compare_coefficient_plots,\n    plot_sho,\n    plot_lorenz,\n)",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"method\"]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "integrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-12\nfrom utils import (\n    compare_methods,\n    print_equations,\n    compare_coefficient_plots,\n    plot_sho,\n    plot_lorenz,\n)\nif __name__ != \"testing\":",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"atol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "integrator_keywords[\"atol\"] = 1e-12\nfrom utils import (\n    compare_methods,\n    print_equations,\n    compare_coefficient_plots,\n    plot_sho,\n    plot_lorenz,\n)\nif __name__ != \"testing\":\n    from example_data import (",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "diffs",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "diffs = [\n    (\"PySINDy Finite Difference\", ps.FiniteDifference()),\n    (\"Finite Difference\", ps.SINDyDerivative(kind=\"finite_difference\", k=1)),\n    (\"Smoothed Finite Difference\", ps.SmoothedFiniteDifference()),\n    (\n        \"Savitzky Golay\",\n        ps.SINDyDerivative(kind=\"savitzky_golay\", left=0.5, right=0.5, order=3),\n    ),\n    (\"Spline\", ps.SINDyDerivative(kind=\"spline\", s=1e-2)),\n    (\"Trend Filtered\", ps.SINDyDerivative(kind=\"trend_filtered\", order=0, alpha=1e-2)),",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "noise_level",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "noise_level = 0.01\n# ### Sine\n# %%\n# True data\nx, y, y_noisy, y_dot = gen_data_sine(noise_level)\naxs = compare_methods(diffs, x, y, y_noisy, y_dot)\nplt.show()\n# ### Absolute value\n# %%\n# Shrink window for Savitzky Golay method",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "axs",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "axs = compare_methods(diffs, x, y, y_noisy, y_dot)\nplt.show()\n# ### Absolute value\n# %%\n# Shrink window for Savitzky Golay method\ndiffs[3] = (\n    \"Savitzky Golay\",\n    ps.SINDyDerivative(kind=\"savitzky_golay\", left=0.1, right=0.1, order=3),\n)\ndiffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.01))",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "diffs[3]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "diffs[3] = (\n    \"Savitzky Golay\",\n    ps.SINDyDerivative(kind=\"savitzky_golay\", left=0.1, right=0.1, order=3),\n)\ndiffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.01))\nx, y, y_dot, y_noisy = gen_data_step(noise_level)\naxs = compare_methods(diffs, x, y, y_noisy, y_dot)\nplt.show()\n# %% [markdown]\n# ## Compare differentiators when used in PySINDy",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "diffs[8]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "diffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.01))\nx, y, y_dot, y_noisy = gen_data_step(noise_level)\naxs = compare_methods(diffs, x, y, y_noisy, y_dot)\nplt.show()\n# %% [markdown]\n# ## Compare differentiators when used in PySINDy\n# We got some idea of the performance of the differentiation options applied to raw data. Next we'll look at how they work as a single component of the SINDy algorithm.\n#\n# ### Linear oscillator\n# $$ \\frac{d}{dt} \\begin{bmatrix}x \\\\ y\\end{bmatrix} = \\begin{bmatrix} -0.1 & 2 \\\\ -2 & -0.1 \\end{bmatrix} \\begin{bmatrix}x \\\\ y\\end{bmatrix} $$",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "axs",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "axs = compare_methods(diffs, x, y, y_noisy, y_dot)\nplt.show()\n# %% [markdown]\n# ## Compare differentiators when used in PySINDy\n# We got some idea of the performance of the differentiation options applied to raw data. Next we'll look at how they work as a single component of the SINDy algorithm.\n#\n# ### Linear oscillator\n# $$ \\frac{d}{dt} \\begin{bmatrix}x \\\\ y\\end{bmatrix} = \\begin{bmatrix} -0.1 & 2 \\\\ -2 & -0.1 \\end{bmatrix} \\begin{bmatrix}x \\\\ y\\end{bmatrix} $$\n#\n# +",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "noise_level",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "noise_level = 0.1\n# %%\n# Generate training data\ndt, t_train, x_train, x_train_noisy = gen_data_sho(noise_level, integrator_keywords)\n# %%\nfigure = plt.figure(figsize=[5, 5])\nplot_sho(x_train, x_train_noisy)\n# Allow Trend Filtered method to work with linear functions\ndiffs[5] = (\n    \"Trend Filtered\",",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "figure",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "figure = plt.figure(figsize=[5, 5])\nplot_sho(x_train, x_train_noisy)\n# Allow Trend Filtered method to work with linear functions\ndiffs[5] = (\n    \"Trend Filtered\",\n    ps.SINDyDerivative(kind=\"trend_filtered\", order=1, alpha=1e-2),\n)\ndiffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.5))\ndiffs.append((\"Smooth FD, reuse old x\", ps.SmoothedFiniteDifference(save_smooth=False)))\ndiffs.append(",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "diffs[5]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "diffs[5] = (\n    \"Trend Filtered\",\n    ps.SINDyDerivative(kind=\"trend_filtered\", order=1, alpha=1e-2),\n)\ndiffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.5))\ndiffs.append((\"Smooth FD, reuse old x\", ps.SmoothedFiniteDifference(save_smooth=False)))\ndiffs.append(\n    (\n        \"Kalman, reuse old x\",\n        ps.SINDyDerivative(kind=\"kalman\", alpha=0.5, save_smooth=False),",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "diffs[8]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "diffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.5))\ndiffs.append((\"Smooth FD, reuse old x\", ps.SmoothedFiniteDifference(save_smooth=False)))\ndiffs.append(\n    (\n        \"Kalman, reuse old x\",\n        ps.SINDyDerivative(kind=\"kalman\", alpha=0.5, save_smooth=False),\n    )\n)\nequations_clean = {}\nequations_noisy = {}",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "equations_clean",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "equations_clean = {}\nequations_noisy = {}\ncoefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "equations_noisy",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "equations_noisy = {}\ncoefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "coefficients_clean",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "coefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "coefficients_noisy",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "coefficients_noisy = {}\ninput_features = [\"x\", \"y\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,\n    )",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "input_features",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "input_features = [\"x\", \"y\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,\n    )\n    model.fit(x_train, quiet=True)",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "threshold",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "threshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,\n    )\n    model.fit(x_train, quiet=True)\n    equations_clean[name] = model.equations()",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "feature_names",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "feature_names = model.get_feature_names()\ncompare_coefficient_plots(\n    coefficients_clean,\n    coefficients_noisy,\n    input_features=input_features,\n    feature_names=feature_names,\n)\nplt.show()\n# %% [markdown]\n#",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "fig = plt.figure(figsize=[12, 5])\nfig.suptitle(\"Training Data Coordinates\")\nplt.subplot(1, 2, 1)\nax = plot_sho(x_train, x_train_noisy, diffs[2][1].smoothed_x_)\nax.set_title(\"Savitzky-Golay filtered for Smoothed FD method\")\nplt.subplot(1, 2, 2)\nax = plot_sho(x_train, x_train_noisy, diffs[8][1].smoothed_x_)\nax.set_title(\"Kalman smoothed\")\n# %% [markdown]\n# ### Lorenz system",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "ax = plot_sho(x_train, x_train_noisy, diffs[2][1].smoothed_x_)\nax.set_title(\"Savitzky-Golay filtered for Smoothed FD method\")\nplt.subplot(1, 2, 2)\nax = plot_sho(x_train, x_train_noisy, diffs[8][1].smoothed_x_)\nax.set_title(\"Kalman smoothed\")\n# %% [markdown]\n# ### Lorenz system\n#\n# $$ \\begin{aligned} \\dot x &= 10(y-x)\\\\ \\dot y &= x(28 - z) - y \\\\ \\dot z &= xy - \\tfrac{8}{3} z, \\end{aligned} $$\n#",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "ax = plot_sho(x_train, x_train_noisy, diffs[8][1].smoothed_x_)\nax.set_title(\"Kalman smoothed\")\n# %% [markdown]\n# ### Lorenz system\n#\n# $$ \\begin{aligned} \\dot x &= 10(y-x)\\\\ \\dot y &= x(28 - z) - y \\\\ \\dot z &= xy - \\tfrac{8}{3} z, \\end{aligned} $$\n#\n# %%\nnoise_level = 0.5\n# %%",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "noise_level",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "noise_level = 0.5\n# %%\n# Generate measurement data\ndt, t_train, x_train, x_train_noisy = gen_data_lorenz(noise_level, integrator_keywords)\n# %%\nfig = plt.figure(figsize=(8, 8))\nplot_lorenz(x_train, x_train_noisy)\nfig.show()\n# %%\ndiffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.0015))",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "fig = plt.figure(figsize=(8, 8))\nplot_lorenz(x_train, x_train_noisy)\nfig.show()\n# %%\ndiffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.0015))\ndiffs[10] = (\n    \"Kalman, reuse old x\",\n    ps.SINDyDerivative(kind=\"kalman\", alpha=0.0015, save_smooth=False),\n)\nequations_clean = {}",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "diffs[8]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "diffs[8] = (\"Kalman\", ps.SINDyDerivative(kind=\"kalman\", alpha=0.0015))\ndiffs[10] = (\n    \"Kalman, reuse old x\",\n    ps.SINDyDerivative(kind=\"kalman\", alpha=0.0015, save_smooth=False),\n)\nequations_clean = {}\nequations_noisy = {}\ncoefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\", \"z\"]",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "diffs[10]",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "diffs[10] = (\n    \"Kalman, reuse old x\",\n    ps.SINDyDerivative(kind=\"kalman\", alpha=0.0015, save_smooth=False),\n)\nequations_clean = {}\nequations_noisy = {}\ncoefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\", \"z\"]\nthreshold = 0.5",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "equations_clean",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "equations_clean = {}\nequations_noisy = {}\ncoefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\", \"z\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "equations_noisy",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "equations_noisy = {}\ncoefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\", \"z\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "coefficients_clean",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "coefficients_clean = {}\ncoefficients_noisy = {}\ninput_features = [\"x\", \"y\", \"z\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "coefficients_noisy",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "coefficients_noisy = {}\ninput_features = [\"x\", \"y\", \"z\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,\n    )",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "input_features",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "input_features = [\"x\", \"y\", \"z\"]\nthreshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,\n    )\n    model.fit(x_train, quiet=True)",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "threshold",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "threshold = 0.5\nfor name, method in diffs:\n    model = ps.SINDy(\n        differentiation_method=method,\n        optimizer=ps.STLSQ(threshold=threshold),\n        t_default=dt,\n        feature_names=input_features,\n    )\n    model.fit(x_train, quiet=True)\n    equations_clean[name] = model.equations()",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "feature_names",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "feature_names = model.get_feature_names()\ncompare_coefficient_plots(\n    coefficients_clean,\n    coefficients_noisy,\n    input_features=input_features,\n    feature_names=feature_names,\n)\nplt.show()\n# %%\n# %%",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "fig = plt.figure(figsize=(16.5, 8))\nfig.suptitle(\"Training Data Coordinates\")\nax = fig.add_subplot(1, 2, 1, projection=\"3d\")\nax = plot_lorenz(x_train, x_train_noisy, diffs[2][1].smoothed_x_, ax=ax)\nax.set_title(\"Savitzky-Golay filtered for Smoothed FD method\")\nax = fig.add_subplot(1, 2, 2, projection=\"3d\")\nax = plot_lorenz(x_train, x_train_noisy, diffs[8][1].smoothed_x_, ax=ax)\nax.set_title(\"Kalman smoothed\")\n# %%\nimport timeit",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "ax = fig.add_subplot(1, 2, 1, projection=\"3d\")\nax = plot_lorenz(x_train, x_train_noisy, diffs[2][1].smoothed_x_, ax=ax)\nax.set_title(\"Savitzky-Golay filtered for Smoothed FD method\")\nax = fig.add_subplot(1, 2, 2, projection=\"3d\")\nax = plot_lorenz(x_train, x_train_noisy, diffs[8][1].smoothed_x_, ax=ax)\nax.set_title(\"Kalman smoothed\")\n# %%\nimport timeit\nN_spectral = np.logspace(1, 8, n_spectral, dtype=int)\nspectral_times = np.zeros((n_spectral, 2))",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "ax = plot_lorenz(x_train, x_train_noisy, diffs[2][1].smoothed_x_, ax=ax)\nax.set_title(\"Savitzky-Golay filtered for Smoothed FD method\")\nax = fig.add_subplot(1, 2, 2, projection=\"3d\")\nax = plot_lorenz(x_train, x_train_noisy, diffs[8][1].smoothed_x_, ax=ax)\nax.set_title(\"Kalman smoothed\")\n# %%\nimport timeit\nN_spectral = np.logspace(1, 8, n_spectral, dtype=int)\nspectral_times = np.zeros((n_spectral, 2))\nfor i in range(n_spectral):",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "ax = fig.add_subplot(1, 2, 2, projection=\"3d\")\nax = plot_lorenz(x_train, x_train_noisy, diffs[8][1].smoothed_x_, ax=ax)\nax.set_title(\"Kalman smoothed\")\n# %%\nimport timeit\nN_spectral = np.logspace(1, 8, n_spectral, dtype=int)\nspectral_times = np.zeros((n_spectral, 2))\nfor i in range(n_spectral):\n    # True data\n    x = np.linspace(0, 2 * np.pi, N_spectral[i])",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "ax = plot_lorenz(x_train, x_train_noisy, diffs[8][1].smoothed_x_, ax=ax)\nax.set_title(\"Kalman smoothed\")\n# %%\nimport timeit\nN_spectral = np.logspace(1, 8, n_spectral, dtype=int)\nspectral_times = np.zeros((n_spectral, 2))\nfor i in range(n_spectral):\n    # True data\n    x = np.linspace(0, 2 * np.pi, N_spectral[i])\n    y = np.sin(x)",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "N_spectral",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "N_spectral = np.logspace(1, 8, n_spectral, dtype=int)\nspectral_times = np.zeros((n_spectral, 2))\nfor i in range(n_spectral):\n    # True data\n    x = np.linspace(0, 2 * np.pi, N_spectral[i])\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    noise_level = 0.05\n    y_noisy = y + noise_level * np.random.randn(len(y))\n    start = timeit.default_timer()",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "spectral_times",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "spectral_times = np.zeros((n_spectral, 2))\nfor i in range(n_spectral):\n    # True data\n    x = np.linspace(0, 2 * np.pi, N_spectral[i])\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    noise_level = 0.05\n    y_noisy = y + noise_level * np.random.randn(len(y))\n    start = timeit.default_timer()\n    spectral1 = ps.SINDyDerivative(kind=\"spectral\")(y_noisy, x)",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "x = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x) - x**5\ny_dot = np.cos(x) - 5 * x**4\nerr = np.zeros(9)\nfor order in range(1, fd_order + 1):\n    diff = ps.FiniteDifference(d=1, order=order)\n    diff = diff(y, x)\n    err[order - 1] = np.sum(np.abs(y_dot - diff))\nplt.figure()\nplt.plot(range(1, 10), err)",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "y = np.sin(x) - x**5\ny_dot = np.cos(x) - 5 * x**4\nerr = np.zeros(9)\nfor order in range(1, fd_order + 1):\n    diff = ps.FiniteDifference(d=1, order=order)\n    diff = diff(y, x)\n    err[order - 1] = np.sum(np.abs(y_dot - diff))\nplt.figure()\nplt.plot(range(1, 10), err)\nplt.grid(True)",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "y_dot",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "y_dot = np.cos(x) - 5 * x**4\nerr = np.zeros(9)\nfor order in range(1, fd_order + 1):\n    diff = ps.FiniteDifference(d=1, order=order)\n    diff = diff(y, x)\n    err[order - 1] = np.sum(np.abs(y_dot - diff))\nplt.figure()\nplt.plot(range(1, 10), err)\nplt.grid(True)\nplt.ylabel(\"Derivative error\")",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "err",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example",
        "description": "pysindy.examples.5_differentiation.example",
        "peekOfCode": "err = np.zeros(9)\nfor order in range(1, fd_order + 1):\n    diff = ps.FiniteDifference(d=1, order=order)\n    diff = diff(y, x)\n    err[order - 1] = np.sum(np.abs(y_dot - diff))\nplt.figure()\nplt.plot(range(1, 10), err)\nplt.grid(True)\nplt.ylabel(\"Derivative error\")\nplt.xlabel(\"Finite difference order\")",
        "detail": "pysindy.examples.5_differentiation.example",
        "documentation": {}
    },
    {
        "label": "gen_data_sine",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.example_data",
        "description": "pysindy.examples.5_differentiation.example_data",
        "peekOfCode": "def gen_data_sine(noise_level: float):\n    # True data\n    x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)\n    y_noisy = y + noise_level * np.random.randn(len(y))\n    return x, y, y_noisy, y_dot",
        "detail": "pysindy.examples.5_differentiation.example_data",
        "documentation": {}
    },
    {
        "label": "gen_data_step",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.example_data",
        "description": "pysindy.examples.5_differentiation.example_data",
        "peekOfCode": "def gen_data_step(noise_level: float):\n    # True data\n    x = np.linspace(-1, 1, 100)\n    y = np.abs(x)\n    y_dot = np.sign(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)\n    y_noisy = y + noise_level * np.random.randn(len(y))\n    return x, y, y_dot, y_noisy",
        "detail": "pysindy.examples.5_differentiation.example_data",
        "documentation": {}
    },
    {
        "label": "gen_data_sho",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.example_data",
        "description": "pysindy.examples.5_differentiation.example_data",
        "peekOfCode": "def gen_data_sho(noise_level: float, integrator_keywords: dict):\n    dt = 0.01\n    t_train = np.arange(0, 10, dt)\n    t_train_span = (t_train[0], t_train[-1])\n    x0_train = [2, 0]\n    x_train = solve_ivp(\n        linear_damped_SHO, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n    ).y.T\n    x_train_noisy = x_train + noise_level * np.random.randn(*x_train.shape)\n    return dt, t_train, x_train, x_train_noisy",
        "detail": "pysindy.examples.5_differentiation.example_data",
        "documentation": {}
    },
    {
        "label": "gen_data_lorenz",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.example_data",
        "description": "pysindy.examples.5_differentiation.example_data",
        "peekOfCode": "def gen_data_lorenz(noise_level: float, integrator_keywords: dict):\n    dt = 0.002\n    t_train = np.arange(0, 10, dt)\n    t_train_span = (t_train[0], t_train[-1])\n    x0_train = [-8, 8, 27]\n    x_train = solve_ivp(\n        lorenz, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n    ).y.T\n    x_train_noisy = x_train + noise_level * np.random.randn(*x_train.shape)\n    return dt, t_train, x_train, x_train_noisy",
        "detail": "pysindy.examples.5_differentiation.example_data",
        "documentation": {}
    },
    {
        "label": "n_spectral",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example_data",
        "description": "pysindy.examples.5_differentiation.example_data",
        "peekOfCode": "n_spectral = 8\nfd_order = 9\ndef gen_data_sine(noise_level: float):\n    # True data\n    x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)",
        "detail": "pysindy.examples.5_differentiation.example_data",
        "documentation": {}
    },
    {
        "label": "fd_order",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.example_data",
        "description": "pysindy.examples.5_differentiation.example_data",
        "peekOfCode": "fd_order = 9\ndef gen_data_sine(noise_level: float):\n    # True data\n    x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)\n    y_noisy = y + noise_level * np.random.randn(len(y))",
        "detail": "pysindy.examples.5_differentiation.example_data",
        "documentation": {}
    },
    {
        "label": "gen_data_sine",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.mock_data",
        "description": "pysindy.examples.5_differentiation.mock_data",
        "peekOfCode": "def gen_data_sine(noise_level: float):\n    # True data\n    x = np.linspace(0, 2 * np.pi / 15, 15)\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)\n    y_noisy = y + noise_level * np.random.randn(len(y))\n    return x, y, y_noisy, y_dot",
        "detail": "pysindy.examples.5_differentiation.mock_data",
        "documentation": {}
    },
    {
        "label": "gen_data_step",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.mock_data",
        "description": "pysindy.examples.5_differentiation.mock_data",
        "peekOfCode": "def gen_data_step(noise_level: float):\n    # True data\n    x = np.linspace(-1, 1, 20)\n    y = np.abs(x)\n    y_dot = np.sign(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)\n    y_noisy = y + noise_level * np.random.randn(len(y))\n    return x, y, y_dot, y_noisy",
        "detail": "pysindy.examples.5_differentiation.mock_data",
        "documentation": {}
    },
    {
        "label": "gen_data_sho",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.mock_data",
        "description": "pysindy.examples.5_differentiation.mock_data",
        "peekOfCode": "def gen_data_sho(noise_level: float, integrator_keywords: dict):\n    dt = 0.01\n    t_train = np.arange(0, 0.5, dt)\n    t_train_span = (t_train[0], t_train[-1])\n    x0_train = [2, 0]\n    x_train = solve_ivp(\n        linear_damped_SHO, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n    ).y.T\n    x_train_noisy = x_train + noise_level * np.random.randn(*x_train.shape)\n    return dt, t_train, x_train, x_train_noisy",
        "detail": "pysindy.examples.5_differentiation.mock_data",
        "documentation": {}
    },
    {
        "label": "gen_data_lorenz",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.mock_data",
        "description": "pysindy.examples.5_differentiation.mock_data",
        "peekOfCode": "def gen_data_lorenz(noise_level: float, integrator_keywords: dict):\n    dt = 0.002\n    t_train = np.arange(0, 0.5, dt)\n    t_train_span = (t_train[0], t_train[-1])\n    x0_train = [-8, 8, 27]\n    x_train = solve_ivp(\n        lorenz, t_train_span, x0_train, t_eval=t_train, **integrator_keywords\n    ).y.T\n    x_train_noisy = x_train + noise_level * np.random.randn(*x_train.shape)\n    return dt, t_train, x_train, x_train_noisy",
        "detail": "pysindy.examples.5_differentiation.mock_data",
        "documentation": {}
    },
    {
        "label": "n_spectral",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.mock_data",
        "description": "pysindy.examples.5_differentiation.mock_data",
        "peekOfCode": "n_spectral = 1\nfd_order = 1\ndef gen_data_sine(noise_level: float):\n    # True data\n    x = np.linspace(0, 2 * np.pi / 15, 15)\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)",
        "detail": "pysindy.examples.5_differentiation.mock_data",
        "documentation": {}
    },
    {
        "label": "fd_order",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.mock_data",
        "description": "pysindy.examples.5_differentiation.mock_data",
        "peekOfCode": "fd_order = 1\ndef gen_data_sine(noise_level: float):\n    # True data\n    x = np.linspace(0, 2 * np.pi / 15, 15)\n    y = np.sin(x)\n    y_dot = np.cos(x)\n    # Add noise\n    seed = 111\n    np.random.seed(seed)\n    y_noisy = y + noise_level * np.random.randn(len(y))",
        "detail": "pysindy.examples.5_differentiation.mock_data",
        "documentation": {}
    },
    {
        "label": "compare_methods",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "def compare_methods(diffs, x, y, y_noisy, y_dot):\n    n_methods = len(diffs)\n    n_rows = (n_methods // 3) + int(n_methods % 3 > 0)\n    fig, axs = plt.subplots(n_rows, 3, figsize=(15, 3 * n_rows), sharex=True)\n    for (name, method), ax in zip(diffs, axs.flatten()):\n        ax.plot(x, y_dot, label=\"Exact\", color=pal[0], **plot_kws)\n        ax.plot(x, method(y, x), \":\", label=\"Approx.\", color=\"black\", **plot_kws)\n        ax.plot(x, method(y_noisy, x), label=\"Noisy\", color=pal[1], **plot_kws)\n        ax.set(title=name)\n    axs[0, 0].legend()",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "print_equations",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "def print_equations(equations_clean, equations_noisy):\n    print(f\"{'':<30} {'Noiseless':<40} {'Noisy':<40}\")\n    for name in equations_clean.keys():\n        print(f\"{name:<30} {'':<40} {'':<40}\")\n        for k, (eq1, eq2) in enumerate(\n            zip(equations_clean[name], equations_noisy[name])\n        ):\n            print(\n                f\"{'':<30} {'x' + str(k) + '=' + str(eq1):<40} {'x' + str(k) + '=' + str(eq2):<40}\"\n            )",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "plot_coefficients",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "def plot_coefficients(\n    coefficients, input_features=None, feature_names=None, ax=None, **heatmap_kws\n):\n    if input_features is None:\n        input_features = [r\"$\\dot x_\" + f\"{k}$\" for k in range(coefficients.shape[0])]\n    else:\n        input_features = [r\"$\\dot \" + f\"{fi}$\" for fi in input_features]\n    if feature_names is None:\n        feature_names = [f\"f{k}\" for k in range(coefficients.shape[1])]\n    with sns.axes_style(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)}):",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "compare_coefficient_plots",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "def compare_coefficient_plots(\n    coefficients_clean, coefficients_noisy, input_features=None, feature_names=None\n):\n    n_cols = len(coefficients_clean)\n    def signed_sqrt(x):\n        return np.sign(x) * np.sqrt(np.abs(x))\n    with sns.axes_style(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)}):\n        fig, axs = plt.subplots(\n            2, n_cols, figsize=(1.9 * n_cols, 8), sharey=True, sharex=True\n        )",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "plot_sho",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "def plot_sho(x_train, x_train_noisy, x_smoothed=None):\n    ax = plt.gca()\n    ax.plot(x_train[:, 0], x_train[:, 1], \".\", label=\"Clean\", color=pal[0], **plot_kws)\n    ax.plot(\n        x_train_noisy[:, 0],\n        x_train_noisy[:, 1],\n        \".\",\n        label=\"Noisy\",\n        color=pal[1],\n        **plot_kws,",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "plot_lorenz",
        "kind": 2,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "def plot_lorenz(x_train, x_train_noisy, x_smoothed=None, ax=None):\n    if ax is None:\n        ax = plt.axes(projection=\"3d\")\n    ax.plot(\n        x_train[:, 0],\n        x_train[:, 1],\n        x_train[:, 2],\n        color=pal[0],\n        label=\"Clean\",\n        **plot_kws,",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "pal",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "pal = sns.color_palette(\"Set1\")\nplot_kws = dict(alpha=0.7, linewidth=3)\ndef compare_methods(diffs, x, y, y_noisy, y_dot):\n    n_methods = len(diffs)\n    n_rows = (n_methods // 3) + int(n_methods % 3 > 0)\n    fig, axs = plt.subplots(n_rows, 3, figsize=(15, 3 * n_rows), sharex=True)\n    for (name, method), ax in zip(diffs, axs.flatten()):\n        ax.plot(x, y_dot, label=\"Exact\", color=pal[0], **plot_kws)\n        ax.plot(x, method(y, x), \":\", label=\"Approx.\", color=\"black\", **plot_kws)\n        ax.plot(x, method(y_noisy, x), label=\"Noisy\", color=pal[1], **plot_kws)",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "plot_kws",
        "kind": 5,
        "importPath": "pysindy.examples.5_differentiation.utils",
        "description": "pysindy.examples.5_differentiation.utils",
        "peekOfCode": "plot_kws = dict(alpha=0.7, linewidth=3)\ndef compare_methods(diffs, x, y, y_noisy, y_dot):\n    n_methods = len(diffs)\n    n_rows = (n_methods // 3) + int(n_methods % 3 > 0)\n    fig, axs = plt.subplots(n_rows, 3, figsize=(15, 3 * n_rows), sharex=True)\n    for (name, method), ax in zip(diffs, axs.flatten()):\n        ax.plot(x, y_dot, label=\"Exact\", color=pal[0], **plot_kws)\n        ax.plot(x, method(y, x), \":\", label=\"Approx.\", color=\"black\", **plot_kws)\n        ax.plot(x, method(y_noisy, x), label=\"Noisy\", color=pal[1], **plot_kws)\n        ax.set(title=name)",
        "detail": "pysindy.examples.5_differentiation.utils",
        "documentation": {}
    },
    {
        "label": "rng",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "rng = np.random.default_rng(1)\n# %% [markdown]\n# ## The trapping algorithm only applies to fluid and plasma flows with energy-preserving, quadratic nonlinear structure, so we need to explicitly constrain the coefficients to conform to this structure.\n# Below we import some utility functions that pre-calculate the things we need.\n# %%\nfrom trapping_utils import (\n    integrator_keywords,\n    sindy_library,\n    sindy_library_no_bias,\n    make_fits,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 3\nmu = 1e-2\ndt = 0.01\nT = 500\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mu",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mu = 1e-2\ndt = 0.01\nT = 500\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\nx0 = (mu, mu, 0)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "dt = 0.01\nT = 500\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\nx0 = (mu, mu, 0)\nx_test = solve_ivp(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "T = 500\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\nx0 = (mu, mu, 0)\nx_test = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\nx0 = (mu, mu, 0)\nx_test = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\nx0 = (mu, mu, 0)\nx_test = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\n# define hyperparameters",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\nx0 = (mu, mu, 0)\nx_test = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\n# define hyperparameters\nreg_weight_lam = 0.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\nx0 = (mu, mu, 0)\nx_test = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\neta = 1e5",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = (mu, mu, 0)\nx_test = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\neta = 1e5\nmax_iter = 5000\n# run trapping SINDy algorithm\nsindy_opt = ps.TrappingSR3(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test = solve_ivp(\n    meanfield, t_span, x0, t_eval=t, args=(mu,), **integrator_keywords\n).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\neta = 1e5\nmax_iter = 5000\n# run trapping SINDy algorithm\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "reg_weight_lam = 0.0\neta = 1e5\nmax_iter = 5000\n# run trapping SINDy algorithm\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "eta = 1e5\nmax_iter = 5000\n# run trapping SINDy algorithm\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    gamma=-1,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "max_iter = 5000\n# run trapping SINDy algorithm\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    gamma=-1,\n    verbose=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    gamma=-1,\n    verbose=True,\n)\nmodel = ps.SINDy(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n    differentiation_method=ps.FiniteDifference(drop_endpoints=True),\n)\nmodel.fit(x_train, t=t)\nmodel.print()\nXi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"meanfield\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"meanfield\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius Error = \", E_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"meanfield\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"meanfield\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius Error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"meanfield\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"meanfield\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius Error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"meanfield\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"meanfield\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius Error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"meanfield\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"meanfield\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius Error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "E_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius Error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names()\nXi_meanfield = np.zeros(Xi.shape)\nXi_meanfield[1 : r + 1, :] = np.asarray([[0.01, -1, 0], [1, 0.01, 0], [0, 0, -1]]).T\nXi_meanfield[terms.index(\"x0 x2\"), 0] = -1",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names()\nXi_meanfield = np.zeros(Xi.shape)\nXi_meanfield[1 : r + 1, :] = np.asarray([[0.01, -1, 0], [1, 0.01, 0], [0, 0, -1]]).T\nXi_meanfield[terms.index(\"x0 x2\"), 0] = -1\nXi_meanfield[terms.index(\"x1 x2\"), 1] = -1\nXi_meanfield[terms.index(\"x0^2\"), 2] = 1",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names()\nXi_meanfield = np.zeros(Xi.shape)\nXi_meanfield[1 : r + 1, :] = np.asarray([[0.01, -1, 0], [1, 0.01, 0], [0, 0, -1]]).T\nXi_meanfield[terms.index(\"x0 x2\"), 0] = -1\nXi_meanfield[terms.index(\"x1 x2\"), 1] = -1\nXi_meanfield[terms.index(\"x0^2\"), 2] = 1\nXi_meanfield[terms.index(\"x1^2\"), 2] = 1",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "terms",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "terms = sindy_library.get_feature_names()\nXi_meanfield = np.zeros(Xi.shape)\nXi_meanfield[1 : r + 1, :] = np.asarray([[0.01, -1, 0], [1, 0.01, 0], [0, 0, -1]]).T\nXi_meanfield[terms.index(\"x0 x2\"), 0] = -1\nXi_meanfield[terms.index(\"x1 x2\"), 1] = -1\nXi_meanfield[terms.index(\"x0^2\"), 2] = 1\nXi_meanfield[terms.index(\"x1^2\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_meanfield - Xi) / np.linalg.norm(Xi_meanfield)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi_meanfield",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi_meanfield = np.zeros(Xi.shape)\nXi_meanfield[1 : r + 1, :] = np.asarray([[0.01, -1, 0], [1, 0.01, 0], [0, 0, -1]]).T\nXi_meanfield[terms.index(\"x0 x2\"), 0] = -1\nXi_meanfield[terms.index(\"x1 x2\"), 1] = -1\nXi_meanfield[terms.index(\"x0^2\"), 2] = 1\nXi_meanfield[terms.index(\"x1^2\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_meanfield - Xi) / np.linalg.norm(Xi_meanfield)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_meanfield - Xi) / np.linalg.norm(Xi_meanfield)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]\n#\n#\n# # Atmospheric oscillator model",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 3\nsigma = 1.1\nbeta = -5.0\neps = 0.01\nk1 = 5\nk2 = 1\nmu1 = eps * k1\nmu2 = -eps * k2\nalpha = -2.0\nomega = 3.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sigma",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sigma = 1.1\nbeta = -5.0\neps = 0.01\nk1 = 5\nk2 = 1\nmu1 = eps * k1\nmu2 = -eps * k2\nalpha = -2.0\nomega = 3.0\n# Make training and testing data",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "beta = -5.0\neps = 0.01\nk1 = 5\nk2 = 1\nmu1 = eps * k1\nmu2 = -eps * k2\nalpha = -2.0\nomega = 3.0\n# Make training and testing data\ndt = 0.01",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "eps",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "eps = 0.01\nk1 = 5\nk2 = 1\nmu1 = eps * k1\nmu2 = -eps * k2\nalpha = -2.0\nomega = 3.0\n# Make training and testing data\ndt = 0.01\nT = 100",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "k1",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "k1 = 5\nk2 = 1\nmu1 = eps * k1\nmu2 = -eps * k2\nalpha = -2.0\nomega = 3.0\n# Make training and testing data\ndt = 0.01\nT = 100\nt = np.arange(0, T + dt, dt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "k2",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "k2 = 1\nmu1 = eps * k1\nmu2 = -eps * k2\nalpha = -2.0\nomega = 3.0\n# Make training and testing data\ndt = 0.01\nT = 100\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mu1",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mu1 = eps * k1\nmu2 = -eps * k2\nalpha = -2.0\nomega = 3.0\n# Make training and testing data\ndt = 0.01\nT = 100\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mu2",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mu2 = -eps * k2\nalpha = -2.0\nomega = 3.0\n# Make training and testing data\ndt = 0.01\nT = 100\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "alpha = -2.0\nomega = 3.0\n# Make training and testing data\ndt = 0.01\nT = 100\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    oscillator,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "omega",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "omega = 3.0\n# Make training and testing data\ndt = 0.01\nT = 100\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    oscillator,\n    t_span,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "dt = 0.01\nT = 100\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "T = 100\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,\n    args=(mu1, mu2, omega, alpha, beta, sigma),",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,\n    args=(mu1, mu2, omega, alpha, beta, sigma),\n    **integrator_keywords",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_span = (t[0], t[-1])\nx0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,\n    args=(mu1, mu2, omega, alpha, beta, sigma),\n    **integrator_keywords\n).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = rng.random((3,)) - 0.5\nx_train = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,\n    args=(mu1, mu2, omega, alpha, beta, sigma),\n    **integrator_keywords\n).y.T\nx0 = rng.random((3,)) - 0.5",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,\n    args=(mu1, mu2, omega, alpha, beta, sigma),\n    **integrator_keywords\n).y.T\nx0 = rng.random((3,)) - 0.5\nx_test = solve_ivp(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = rng.random((3,)) - 0.5\nx_test = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,\n    args=(mu1, mu2, omega, alpha, beta, sigma),\n    **integrator_keywords\n).y.T\n# define hyperparameters",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test = solve_ivp(\n    oscillator,\n    t_span,\n    x0,\n    t_eval=t,\n    args=(mu1, mu2, omega, alpha, beta, sigma),\n    **integrator_keywords\n).y.T\n# define hyperparameters\neta = 1.0e8",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "eta = 1.0e8\n# run trapping SINDy, reusing previous reg_weight_lam, max_iter and constraints\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    verbose=True,\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    verbose=True,\n)\nmodel = ps.SINDy(\n    optimizer=sindy_opt,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n    differentiation_method=ps.FiniteDifference(drop_endpoints=True),\n)\nmodel.fit(x_train, t=t)\nmodel.print()\nXi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"oscillator\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"oscillator\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"oscillator\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"oscillator\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"oscillator\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"oscillator\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"oscillator\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "L = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"oscillator\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"oscillator\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"oscillator\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"oscillator\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"oscillator\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"oscillator\")\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "E_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names()\nXi_oscillator = np.zeros(Xi.shape)\nXi_oscillator[1 : r + 1, :] = np.asarray(\n    [[mu1, 0, 0], [0, mu2, omega], [0, -omega, mu2]]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names()\nXi_oscillator = np.zeros(Xi.shape)\nXi_oscillator[1 : r + 1, :] = np.asarray(\n    [[mu1, 0, 0], [0, mu2, omega], [0, -omega, mu2]]\n).T\nXi_oscillator[terms.index(\"x0 x1\"), 0] = sigma",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names()\nXi_oscillator = np.zeros(Xi.shape)\nXi_oscillator[1 : r + 1, :] = np.asarray(\n    [[mu1, 0, 0], [0, mu2, omega], [0, -omega, mu2]]\n).T\nXi_oscillator[terms.index(\"x0 x1\"), 0] = sigma\nXi_oscillator[terms.index(\"x1 x2\"), 1] = alpha",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "terms",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "terms = sindy_library.get_feature_names()\nXi_oscillator = np.zeros(Xi.shape)\nXi_oscillator[1 : r + 1, :] = np.asarray(\n    [[mu1, 0, 0], [0, mu2, omega], [0, -omega, mu2]]\n).T\nXi_oscillator[terms.index(\"x0 x1\"), 0] = sigma\nXi_oscillator[terms.index(\"x1 x2\"), 1] = alpha\nXi_oscillator[terms.index(\"x0^2\"), 1] = -sigma\nXi_oscillator[terms.index(\"x2^2\"), 1] = beta\nXi_oscillator[terms.index(\"x1 x2\"), 2] = -beta",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi_oscillator",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi_oscillator = np.zeros(Xi.shape)\nXi_oscillator[1 : r + 1, :] = np.asarray(\n    [[mu1, 0, 0], [0, mu2, omega], [0, -omega, mu2]]\n).T\nXi_oscillator[terms.index(\"x0 x1\"), 0] = sigma\nXi_oscillator[terms.index(\"x1 x2\"), 1] = alpha\nXi_oscillator[terms.index(\"x0^2\"), 1] = -sigma\nXi_oscillator[terms.index(\"x2^2\"), 1] = beta\nXi_oscillator[terms.index(\"x1 x2\"), 2] = -beta\nXi_oscillator[terms.index(\"x1^2\"), 2] = -alpha",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_oscillator - Xi) / np.linalg.norm(Xi_oscillator)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %%\n# make 3D illustration of the trapping region\ntrapping_region(r, x_test_pred, Xi, sindy_opt, \"Atmospheric Oscillator\")\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 3\n# make training and testing data\ndt = 0.01\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "dt = 0.01\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "T = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = (rng.random(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "reg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "max_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "eta = 1.0e3\nalpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "alpha_m = 8e-1 * eta  # default is 1e-2 * eta so this speeds up the code here\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    gamma=-1,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    gamma=-1,\n    verbose=True,\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n    differentiation_method=ps.FiniteDifference(drop_endpoints=True),\n)\nmodel.fit(x_train, t=t)\nmodel.print()\nXi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"lorenz\")\nmake_progress_plots(r, sindy_opt)\nPL_tensor = sindy_opt.PL_",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"lorenz\")\nmake_progress_plots(r, sindy_opt)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"lorenz\")\nmake_progress_plots(r, sindy_opt)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"lorenz\")\nmake_progress_plots(r, sindy_opt)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"lorenz\")\nmake_progress_plots(r, sindy_opt)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "L = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\n# compute relative Frobenius error in the model coefficients",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\n# compute relative Frobenius error in the model coefficients\nsigma = 10",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\n# compute relative Frobenius error in the model coefficients\nsigma = 10\nrho = 28",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\n# compute relative Frobenius error in the model coefficients\nsigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\n# compute relative Frobenius error in the model coefficients\nsigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "E_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\n# compute relative Frobenius error in the model coefficients\nsigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.asarray(\n    [[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sigma",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.asarray(\n    [[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]\n).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "rho",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "rho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.asarray(\n    [[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]\n).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "beta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.asarray(\n    [[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]\n).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "terms",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "terms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.asarray(\n    [[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]\n).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi_lorenz",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.asarray(\n    [[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]\n).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]\n# # Visualizing the trapping region for Lorenz\n# Below, we plot the SINDy-identified trapping region (red) and the analytic trapping region (cyan) for the Lorenz system. The estimate for the trapping region (blue) correctly encloses the Lorenz attractor, and the red ellipsoid of positive energy growth. We can see that trajectories starting outside of this region monotonically fall into this region and remain forever, and the red and cyan ellipsoids agree well.\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 6\nnu = 0.0  # viscosity\nmu = 0.0  # resistivity\n# define training and testing data (low resolution)\ndt = 0.02\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "nu",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "nu = 0.0  # viscosity\nmu = 0.0  # resistivity\n# define training and testing data (low resolution)\ndt = 0.02\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mu",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mu = 0.0  # resistivity\n# define training and testing data (low resolution)\ndt = 0.02\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "dt = 0.02\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "T = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\nmax_iter = 1000",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\nmax_iter = 1000\neta = 1.0e10",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_span = (t[0], t[-1])\nx0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\nmax_iter = 1000\neta = 1.0e10\nalpha_m = 9.0e-1 * eta",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = rng.random((6,)) - 0.5\nx_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\nmax_iter = 1000\neta = 1.0e10\nalpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\nmax_iter = 1000\neta = 1.0e10\nalpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=6,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x0 = rng.random((6,)) - 0.5\nx_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\nmax_iter = 1000\neta = 1.0e10\nalpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=6,\n    _include_bias=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test = solve_ivp(mhd, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0.0\nmax_iter = 1000\neta = 1.0e10\nalpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=6,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "reg_weight_lam = 0.0\nmax_iter = 1000\neta = 1.0e10\nalpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=6,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "max_iter = 1000\neta = 1.0e10\nalpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=6,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    verbose=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "eta = 1.0e10\nalpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=6,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    verbose=True,\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "alpha_m = 9.0e-1 * eta\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=6,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    verbose=True,\n)\n# eps_solver=1e-3)  # reduce the solver tolerance for speed",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    _n_tgts=6,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    verbose=True,\n)\n# eps_solver=1e-3)  # reduce the solver tolerance for speed\nmodel = ps.SINDy(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n    differentiation_method=ps.FiniteDifference(drop_endpoints=True),\n)\nmodel.fit(x_train, t=t)\nmodel.print()\nXi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"mhd\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"mhd\")\nmean_val = np.mean(x_test_pred, axis=0)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"mhd\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"mhd\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "L = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"mhd\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"mhd\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(E_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# plotting and analysis\nmake_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"mhd\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(E_pred)\n# compute relative Frobenius error in the model coefficients",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(E_pred)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names(\n    input_features=[\"V1\", \"V2\", \"V3\", \"B1\", \"B2\", \"B3\"]\n)\nXi_mhd = np.zeros(Xi.shape)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(E_pred)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names(\n    input_features=[\"V1\", \"V2\", \"V3\", \"B1\", \"B2\", \"B3\"]\n)\nXi_mhd = np.zeros(Xi.shape)\nXi_mhd[terms.index(\"V2 V3\"), 0] = 4.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "E_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(E_pred)\n# compute relative Frobenius error in the model coefficients\nterms = sindy_library.get_feature_names(\n    input_features=[\"V1\", \"V2\", \"V3\", \"B1\", \"B2\", \"B3\"]\n)\nXi_mhd = np.zeros(Xi.shape)\nXi_mhd[terms.index(\"V2 V3\"), 0] = 4.0\nXi_mhd[terms.index(\"B2 B3\"), 0] = -4.0\nXi_mhd[terms.index(\"V1 V3\"), 1] = -7",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "terms",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "terms = sindy_library.get_feature_names(\n    input_features=[\"V1\", \"V2\", \"V3\", \"B1\", \"B2\", \"B3\"]\n)\nXi_mhd = np.zeros(Xi.shape)\nXi_mhd[terms.index(\"V2 V3\"), 0] = 4.0\nXi_mhd[terms.index(\"B2 B3\"), 0] = -4.0\nXi_mhd[terms.index(\"V1 V3\"), 1] = -7\nXi_mhd[terms.index(\"B1 B3\"), 1] = 7.0\nXi_mhd[terms.index(\"V1 V2\")] = 3.0\nXi_mhd[terms.index(\"B1 B2\"), 2] = -3.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi_mhd",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi_mhd = np.zeros(Xi.shape)\nXi_mhd[terms.index(\"V2 V3\"), 0] = 4.0\nXi_mhd[terms.index(\"B2 B3\"), 0] = -4.0\nXi_mhd[terms.index(\"V1 V3\"), 1] = -7\nXi_mhd[terms.index(\"B1 B3\"), 1] = 7.0\nXi_mhd[terms.index(\"V1 V2\")] = 3.0\nXi_mhd[terms.index(\"B1 B2\"), 2] = -3.0\nXi_mhd[terms.index(\"V2 B3\"), 3] = 2.0\nXi_mhd[terms.index(\"V3 B2\"), 3] = -2.0\nXi_mhd[terms.index(\"V1 B3\"), 4] = -5.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_mhd - Xi) / np.linalg.norm(Xi_mhd)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]\n# # Forced Burger's Equation",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]\n# # Forced Burger's Equation\n# The viscous Burgers' equation has long served as a simplified one-dimensional turbulence analogue (Burgers/Hopf 1948). The forced, viscous Burgers' equation on a periodic domain $x \\in [0,2\\pi)$ is:\n#",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "tstart",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "tstart = 0\ntend = 3000\nBurgers = sio.loadmat(\"../data/burgers_highres2.mat\")\nskip = 1\nnu = Burgers[\"nu\"].item()\nsigma = Burgers[\"sigma\"].item()\nU = Burgers[\"U\"].item()\nt = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "tend",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "tend = 3000\nBurgers = sio.loadmat(\"../data/burgers_highres2.mat\")\nskip = 1\nnu = Burgers[\"nu\"].item()\nsigma = Burgers[\"sigma\"].item()\nU = Burgers[\"U\"].item()\nt = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Burgers",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Burgers = sio.loadmat(\"../data/burgers_highres2.mat\")\nskip = 1\nnu = Burgers[\"nu\"].item()\nsigma = Burgers[\"sigma\"].item()\nU = Burgers[\"U\"].item()\nt = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "skip = 1\nnu = Burgers[\"nu\"].item()\nsigma = Burgers[\"sigma\"].item()\nU = Burgers[\"U\"].item()\nt = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "nu",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "nu = Burgers[\"nu\"].item()\nsigma = Burgers[\"sigma\"].item()\nU = Burgers[\"U\"].item()\nt = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sigma",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sigma = Burgers[\"sigma\"].item()\nU = Burgers[\"U\"].item()\nt = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "U = Burgers[\"U\"].item()\nt = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = (Burgers[\"t\"].flatten())[tstart:tend:skip]\nx_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear\n# The last bit of information we will get from this system is checking if the analytic model exhibits effective nonlinearity, a requirement for the Schlegel and Noack trapping theorem to hold.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = Burgers[\"a\"]\nu_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear\n# The last bit of information we will get from this system is checking if the analytic model exhibits effective nonlinearity, a requirement for the Schlegel and Noack trapping theorem to hold.\n#",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "u_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "u_train = Burgers[\"u\"][:, tstart:tend:skip]\ntheta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear\n# The last bit of information we will get from this system is checking if the analytic model exhibits effective nonlinearity, a requirement for the Schlegel and Noack trapping theorem to hold.\n#\n# Using a simulated annealing algorithm, we can show that even the analytic 10D Galerkin Noack and Schlegel et al. (2008) model does not exhibit a $\\mathbf{m}$ such that $\\mathbf{A}$^S is negative definite. This is because the nonlinearity is not 'effective'.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "theta = Burgers[\"x\"].flatten()\nspatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear\n# The last bit of information we will get from this system is checking if the analytic model exhibits effective nonlinearity, a requirement for the Schlegel and Noack trapping theorem to hold.\n#\n# Using a simulated annealing algorithm, we can show that even the analytic 10D Galerkin Noack and Schlegel et al. (2008) model does not exhibit a $\\mathbf{m}$ such that $\\mathbf{A}$^S is negative definite. This is because the nonlinearity is not 'effective'.\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "spatial_modes_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "spatial_modes_train = Burgers[\"theta\"]\nr = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear\n# The last bit of information we will get from this system is checking if the analytic model exhibits effective nonlinearity, a requirement for the Schlegel and Noack trapping theorem to hold.\n#\n# Using a simulated annealing algorithm, we can show that even the analytic 10D Galerkin Noack and Schlegel et al. (2008) model does not exhibit a $\\mathbf{m}$ such that $\\mathbf{A}$^S is negative definite. This is because the nonlinearity is not 'effective'.\n# %%\nfrom scipy.optimize import dual_annealing as anneal_algo",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 10\nx_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear\n# The last bit of information we will get from this system is checking if the analytic model exhibits effective nonlinearity, a requirement for the Schlegel and Noack trapping theorem to hold.\n#\n# Using a simulated annealing algorithm, we can show that even the analytic 10D Galerkin Noack and Schlegel et al. (2008) model does not exhibit a $\\mathbf{m}$ such that $\\mathbf{A}$^S is negative definite. This is because the nonlinearity is not 'effective'.\n# %%\nfrom scipy.optimize import dual_annealing as anneal_algo\n# get analytic L and Q operators and galerkin model",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = x_train[:r, tstart:tend:skip].T\n# %% [markdown]\n# ## Forced Burgers' system is not effectively nonlinear\n# The last bit of information we will get from this system is checking if the analytic model exhibits effective nonlinearity, a requirement for the Schlegel and Noack trapping theorem to hold.\n#\n# Using a simulated annealing algorithm, we can show that even the analytic 10D Galerkin Noack and Schlegel et al. (2008) model does not exhibit a $\\mathbf{m}$ such that $\\mathbf{A}$^S is negative definite. This is because the nonlinearity is not 'effective'.\n# %%\nfrom scipy.optimize import dual_annealing as anneal_algo\n# get analytic L and Q operators and galerkin model\nL, Q = burgers_galerkin(sigma, nu, U)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "rhs",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "rhs = lambda t, a: galerkin_model(a, L, Q)  # noqa: E731\n# Generate initial condition from unstable eigenvectors\nlamb, Phi = np.linalg.eig(L)\nidx = np.argsort(-np.real(lamb))\nlamb, Phi = lamb[idx], Phi[:, idx]\na0 = np.real(1e-4 * Phi[:, :2] @ rng.random((2)))\n# define parameters\ndt = 1e-3\nr = 10\nt_sim = np.arange(0, 300, dt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "idx = np.argsort(-np.real(lamb))\nlamb, Phi = lamb[idx], Phi[:, idx]\na0 = np.real(1e-4 * Phi[:, :2] @ rng.random((2)))\n# define parameters\ndt = 1e-3\nr = 10\nt_sim = np.arange(0, 300, dt)\nt_span = (t_sim[0], t_sim[-1])\nx_train = solve_ivp(rhs, t_span, a0, t_eval=t_sim, **integrator_keywords).y.T\n# Search between -500, 500 for each component of m",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a0 = np.real(1e-4 * Phi[:, :2] @ rng.random((2)))\n# define parameters\ndt = 1e-3\nr = 10\nt_sim = np.arange(0, 300, dt)\nt_span = (t_sim[0], t_sim[-1])\nx_train = solve_ivp(rhs, t_span, a0, t_eval=t_sim, **integrator_keywords).y.T\n# Search between -500, 500 for each component of m\nboundvals = np.zeros((r, 2))\nboundmax = 500",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "dt = 1e-3\nr = 10\nt_sim = np.arange(0, 300, dt)\nt_span = (t_sim[0], t_sim[-1])\nx_train = solve_ivp(rhs, t_span, a0, t_eval=t_sim, **integrator_keywords).y.T\n# Search between -500, 500 for each component of m\nboundvals = np.zeros((r, 2))\nboundmax = 500\nboundmin = -500\nboundvals[:, 0] = boundmin",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 10\nt_sim = np.arange(0, 300, dt)\nt_span = (t_sim[0], t_sim[-1])\nx_train = solve_ivp(rhs, t_span, a0, t_eval=t_sim, **integrator_keywords).y.T\n# Search between -500, 500 for each component of m\nboundvals = np.zeros((r, 2))\nboundmax = 500\nboundmin = -500\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_sim",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_sim = np.arange(0, 300, dt)\nt_span = (t_sim[0], t_sim[-1])\nx_train = solve_ivp(rhs, t_span, a0, t_eval=t_sim, **integrator_keywords).y.T\n# Search between -500, 500 for each component of m\nboundvals = np.zeros((r, 2))\nboundmax = 500\nboundmin = -500\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\n# run simulated annealing and display optimal m and",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_span = (t_sim[0], t_sim[-1])\nx_train = solve_ivp(rhs, t_span, a0, t_eval=t_sim, **integrator_keywords).y.T\n# Search between -500, 500 for each component of m\nboundvals = np.zeros((r, 2))\nboundmax = 500\nboundmin = -500\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\n# run simulated annealing and display optimal m and\n# the corresponding objective function value",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = solve_ivp(rhs, t_span, a0, t_eval=t_sim, **integrator_keywords).y.T\n# Search between -500, 500 for each component of m\nboundvals = np.zeros((r, 2))\nboundmax = 500\nboundmin = -500\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\n# run simulated annealing and display optimal m and\n# the corresponding objective function value\nLs = 0.5 * (L + L.T)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "boundvals",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "boundvals = np.zeros((r, 2))\nboundmax = 500\nboundmin = -500\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\n# run simulated annealing and display optimal m and\n# the corresponding objective function value\nLs = 0.5 * (L + L.T)\n# obj_function defined in the utils python file\nalgo_sol = anneal_algo(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "boundmax",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "boundmax = 500\nboundmin = -500\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\n# run simulated annealing and display optimal m and\n# the corresponding objective function value\nLs = 0.5 * (L + L.T)\n# obj_function defined in the utils python file\nalgo_sol = anneal_algo(\n    obj_function, bounds=boundvals, args=(Ls, Q, np.eye(r)), maxiter=2000",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "boundmin",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "boundmin = -500\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\n# run simulated annealing and display optimal m and\n# the corresponding objective function value\nLs = 0.5 * (L + L.T)\n# obj_function defined in the utils python file\nalgo_sol = anneal_algo(\n    obj_function, bounds=boundvals, args=(Ls, Q, np.eye(r)), maxiter=2000\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Ls",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Ls = 0.5 * (L + L.T)\n# obj_function defined in the utils python file\nalgo_sol = anneal_algo(\n    obj_function, bounds=boundvals, args=(Ls, Q, np.eye(r)), maxiter=2000\n)\nopt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Simulated annealing ended because \" + opt_result[0])\nprint(\"Optimal m = \", opt_m)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "algo_sol",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "algo_sol = anneal_algo(\n    obj_function, bounds=boundvals, args=(Ls, Q, np.eye(r)), maxiter=2000\n)\nopt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Simulated annealing ended because \" + opt_result[0])\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \", opt_energy",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "opt_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "opt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Simulated annealing ended because \" + opt_result[0])\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \", opt_energy\n)\nprint(\n    \"Since the largest eigenvalue cannot be made negative, \"",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "opt_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "opt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Simulated annealing ended because \" + opt_result[0])\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \", opt_energy\n)\nprint(\n    \"Since the largest eigenvalue cannot be made negative, \"\n    \"we conclude that effective nonlinearity does not hold for this system.\"",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "opt_result",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "opt_result = algo_sol.message\nprint(\"Simulated annealing ended because \" + opt_result[0])\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \", opt_energy\n)\nprint(\n    \"Since the largest eigenvalue cannot be made negative, \"\n    \"we conclude that effective nonlinearity does not hold for this system.\"\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a = np.loadtxt(\"../data/vonKarman_pod/vonKarman_a.dat\")\nt = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a_temp",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a_temp",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "tbegin",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "tbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving\n# rather than just approximately energy-preserving",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "tend",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "tend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving\n# rather than just approximately energy-preserving\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "skip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving\n# rather than just approximately energy-preserving\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q\"] = (",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving\n# rather than just approximately energy-preserving\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q\"] = (\n    gQ",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving\n# rather than just approximately energy-preserving\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q\"] = (\n    gQ\n    - (",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "dt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving\n# rather than just approximately energy-preserving\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q\"] = (\n    gQ\n    - (\n        gQ",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "galerkin9",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "galerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# make the Galerkin model nonlinearity exactly energy-preserving\n# rather than just approximately energy-preserving\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q\"] = (\n    gQ\n    - (\n        gQ\n        + np.transpose(gQ, [1, 0, 2])\n        + np.transpose(gQ, [2, 1, 0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "gQ",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "gQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q\"] = (\n    gQ\n    - (\n        gQ\n        + np.transpose(gQ, [1, 0, 2])\n        + np.transpose(gQ, [2, 1, 0])\n        + np.transpose(gQ, [0, 2, 1])\n        + np.transpose(gQ, [2, 0, 1])\n        + np.transpose(gQ, [1, 2, 0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "galerkin9[\"Q\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "galerkin9[\"Q\"] = (\n    gQ\n    - (\n        gQ\n        + np.transpose(gQ, [1, 0, 2])\n        + np.transpose(gQ, [2, 1, 0])\n        + np.transpose(gQ, [0, 2, 1])\n        + np.transpose(gQ, [2, 0, 1])\n        + np.transpose(gQ, [1, 2, 0])\n    )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_sim",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_sim = np.arange(0, 500, dt)\n# Generate initial condition from unstable eigenvectors\nlamb, Phi = np.linalg.eig(galerkin9[\"L\"])\nidx = np.argsort(-np.real(lamb))\nlamb, Phi = lamb[idx], Phi[:, idx]\na0 = np.zeros(9)\na0[0] = 1e-3\n# np.real( 1e-3 * Phi[:, :2] @ rng.random((2)) )\n# get the 5D POD-Galerkin coefficients\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "idx = np.argsort(-np.real(lamb))\nlamb, Phi = lamb[idx], Phi[:, idx]\na0 = np.zeros(9)\na0[0] = 1e-3\n# np.real( 1e-3 * Phi[:, :2] @ rng.random((2)) )\n# get the 5D POD-Galerkin coefficients\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a0 = np.zeros(9)\na0[0] = 1e-3\n# np.real( 1e-3 * Phi[:, :2] @ rng.random((2)) )\n# get the 5D POD-Galerkin coefficients\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a0[0]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a0[0] = 1e-3\n# np.real( 1e-3 * Phi[:, :2] @ rng.random((2)) )\n# get the 5D POD-Galerkin coefficients\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 3D, 5D, and 9D POD-Galerkin trajectories",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "inds5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "inds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 3D, 5D, and 9D POD-Galerkin trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "galerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 3D, 5D, and 9D POD-Galerkin trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "galerkin5[\"L\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "galerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 3D, 5D, and 9D POD-Galerkin trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = [0, 1, 2, 3, -1]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "inds5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "inds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 3D, 5D, and 9D POD-Galerkin trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = [0, 1, 2, 3, -1]\nplt.figure(figsize=(12, 8))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "galerkin5[\"Q\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "galerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 3D, 5D, and 9D POD-Galerkin trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = [0, 1, 2, 3, -1]\nplt.figure(figsize=(12, 8))\nfor i in range(r):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "model5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "model5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 3D, 5D, and 9D POD-Galerkin trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = [0, 1, 2, 3, -1]\nplt.figure(figsize=(12, 8))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = [0, 1, 2, 3, -1]\nplt.figure(figsize=(12, 8))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a_galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a_galerkin5 = solve_ivp(model5, t_span, a0[:5], t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = [0, 1, 2, 3, -1]\nplt.figure(figsize=(12, 8))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(\n            \"DNS and POD-Galerkin models on first 4 POD modes + shift mode\", fontsize=16",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "adot_galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "adot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = [0, 1, 2, 3, -1]\nplt.figure(figsize=(12, 8))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(\n            \"DNS and POD-Galerkin models on first 4 POD modes + shift mode\", fontsize=16\n        )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "mode_numbers",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "mode_numbers = [0, 1, 2, 3, -1]\nplt.figure(figsize=(12, 8))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(\n            \"DNS and POD-Galerkin models on first 4 POD modes + shift mode\", fontsize=16\n        )\n    plt.plot(t, a[:, mode_numbers[i]], \"r\", label=\"POD from DNS\")\n    plt.plot(t, a_galerkin5[:, mode_numbers[i]], \"b\", label=\"POD-5 model\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a0 = np.zeros(r)\na0[0] = 1e-3\n# %%\n# same test and train trajectory for simplicity here\na = np.loadtxt(\"../data/vonKarman_pod/vonKarman_a.dat\")\nt = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a0[0]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a0[0] = 1e-3\n# %%\n# same test and train trajectory for simplicity here\na = np.loadtxt(\"../data/vonKarman_pod/vonKarman_a.dat\")\nt = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a = np.loadtxt(\"../data/vonKarman_pod/vonKarman_a.dat\")\nt = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "r = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a_temp",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a_temp",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a\nx_test = a",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a = a_temp\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a\nx_test = a\n# define hyperparameters",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "tbegin",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "tbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a\nx_test = a\n# define hyperparameters\nmax_iter = 10000",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "tend",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "tend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a\nx_test = a\n# define hyperparameters\nmax_iter = 10000\neta = 1.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "skip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a\nx_test = a\n# define hyperparameters\nmax_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "t = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a\nx_test = a\n# define hyperparameters\nmax_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "a = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\nx_train = a\nx_test = a\n# define hyperparameters\nmax_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "dt = t[1] - t[0]\nx_train = a\nx_test = a\n# define hyperparameters\nmax_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_train = a\nx_test = a\n# define hyperparameters\nmax_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "x_test = a\n# define hyperparameters\nmax_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "max_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "eta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "reg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "alpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    verbose=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    verbose=True,\n)\nmodel = ps.SINDy(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library_no_bias,\n    differentiation_method=ps.FiniteDifference(drop_endpoints=True),\n)\nmodel.fit(x_train, t=t)\nXi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nPL_tensor = sindy_opt.PL_",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Xi = model.coefficients().T\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):\n    x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):\n    x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\n    x_test_pred = model.simulate(a0, t, integrator_kws=integrator_keywords)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):\n    x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\n    x_test_pred = model.simulate(a0, t, integrator_kws=integrator_keywords)\n    make_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):\n    x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\n    x_test_pred = model.simulate(a0, t, integrator_kws=integrator_keywords)\n    make_progress_plots(r, sindy_opt)\n    # plotting and analysis",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "L = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):\n    x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\n    x_test_pred = model.simulate(a0, t, integrator_kws=integrator_keywords)\n    make_progress_plots(r, sindy_opt)\n    # plotting and analysis\n    make_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"vonKarman\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):\n    x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\n    x_test_pred = model.simulate(a0, t, integrator_kws=integrator_keywords)\n    make_progress_plots(r, sindy_opt)\n    # plotting and analysis\n    make_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"vonKarman\")\n    make_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"VonKarman\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\nif check_local_stability(Xi, sindy_opt, 1):\n    x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\n    x_test_pred = model.simulate(a0, t, integrator_kws=integrator_keywords)\n    make_progress_plots(r, sindy_opt)\n    # plotting and analysis\n    make_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"vonKarman\")\n    make_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, \"VonKarman\")\n    mean_val = np.mean(x_test_pred, axis=0)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]\n# # Energy plot illustrating the transient and long-time energy conservation\n# %%\n# define energies of the DNS, and both the 5D and 9D models",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "E = np.sum(a**2, axis=1)\nE_galerkin5 = np.sum(a_galerkin5**2, axis=1)\nE_sindy5 = np.sum(x_test_pred**2, axis=1)\n# plot the energies\nplt.figure(figsize=(16, 4))\nplt.plot(t, E, \"r\", label=\"DNS\")\nplt.plot(t, E_galerkin5, \"m\", label=\"POD-5\")\nplt.plot(t, E_sindy5, \"k\", label=r\"SINDy-5\")\n# do some formatting and save\nplt.legend(fontsize=22, loc=2)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "E_galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "E_galerkin5 = np.sum(a_galerkin5**2, axis=1)\nE_sindy5 = np.sum(x_test_pred**2, axis=1)\n# plot the energies\nplt.figure(figsize=(16, 4))\nplt.plot(t, E, \"r\", label=\"DNS\")\nplt.plot(t, E_galerkin5, \"m\", label=\"POD-5\")\nplt.plot(t, E_sindy5, \"k\", label=r\"SINDy-5\")\n# do some formatting and save\nplt.legend(fontsize=22, loc=2)\nplt.grid()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "E_sindy5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "E_sindy5 = np.sum(x_test_pred**2, axis=1)\n# plot the energies\nplt.figure(figsize=(16, 4))\nplt.plot(t, E, \"r\", label=\"DNS\")\nplt.plot(t, E_galerkin5, \"m\", label=\"POD-5\")\nplt.plot(t, E_sindy5, \"k\", label=r\"SINDy-5\")\n# do some formatting and save\nplt.legend(fontsize=22, loc=2)\nplt.grid()\nplt.xlim([0, 300])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example",
        "description": "pysindy.examples.8_trapping_sindy_examples.example",
        "peekOfCode": "ax = plt.gca()\nax.set_yticks([0, 10, 20])\nax.tick_params(axis=\"x\", labelsize=20)\nax.tick_params(axis=\"y\", labelsize=20)\nplt.ylabel(\"Total energy\", fontsize=20)\nplt.xlabel(\"t\", fontsize=20)\nplt.show()\n# %% [markdown]\n# ## Key result: the 5D SINDy model is globally stable and improves the prediction of the transient timing compared with the POD-Galerkin model.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example",
        "documentation": {}
    },
    {
        "label": "GalerkinROM",
        "kind": 6,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "class GalerkinROM:\n    def __init__(self, file):\n        model_dict = loadmat(file)\n        self.C = model_dict[\"C\"][0]\n        self.L = model_dict[\"L\"]\n        self.Q = model_dict[\"Q\"]\n    def integrate(self, x0, t, r=None, rtol=1e-3, atol=1e-6):\n        if r is None:\n            r = len(self.C)\n        # Truncate model as indicated",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "psd_est",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "def psd_est(E, dt=1):\n    Ehat = np.abs((dt * np.fft.fft(E)) ** 2)\n    Ehat = Ehat[: int(len(Ehat) / 2)]\n    N = len(Ehat)\n    freq = 2 * np.pi * np.arange(N) / (2 * dt * N)  # Frequencies in rad/s\n    return Ehat, freq\npsd, freq = psd_est(E_dns, dt=t_dns[1] - t_dns[0])\npsd_sim, freq_sim = psd_est(E_sindy, dt=t_sim[1] - t_sim[0])\nplt.figure(figsize=(12, 2.5))\nplt.semilogy(freq, psd, \"k\", lw=3)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "trapping_system_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "trapping_system_list = np.array(\n    [2, 3, 7, 10, 18, 24, 27, 29, 30, 34, 40, 46, 47, 66, 67]\n)\nsystems_list = [\n    \"Aizawa\",\n    \"Bouali2\",\n    \"GenesioTesi\",\n    \"HyperBao\",\n    \"HyperCai\",\n    \"HyperJha\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "systems_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "systems_list = [\n    \"Aizawa\",\n    \"Bouali2\",\n    \"GenesioTesi\",\n    \"HyperBao\",\n    \"HyperCai\",\n    \"HyperJha\",\n    \"HyperLorenz\",\n    \"HyperLu\",\n    \"HyperPang\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "alphabetical_sort",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "alphabetical_sort = np.argsort(systems_list)\nsystems_list = (np.array(systems_list)[alphabetical_sort])[trapping_system_list]\n# attributes list\nattributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "systems_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "systems_list = (np.array(systems_list)[alphabetical_sort])[trapping_system_list]\n# attributes list\nattributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",\n    \"period\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "attributes = [\n    \"maximum_lyapunov_estimated\",\n    \"lyapunov_spectrum_estimated\",\n    \"embedding_dimension\",\n    \"parameters\",\n    \"dt\",\n    \"hamiltonian\",\n    \"period\",\n    \"unbounded_indices\",\n]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "all_properties",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "all_properties = dict()\nfor i, equation_name in enumerate(systems_list):\n    eq = getattr(flows, equation_name)()\n    attr_vals = [getattr(eq, item, None) for item in attributes]\n    all_properties[equation_name] = dict(zip(attributes, attr_vals))\n# Get training and testing trajectories for all the experimental systems\nn = 1000  # Trajectories with 1000 points\npts_per_period = 100  # sampling with 100 points per period\nn_trajectories = 1  # generate n_trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "n = 1000  # Trajectories with 1000 points\npts_per_period = 100  # sampling with 100 points per period\nn_trajectories = 1  # generate n_trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(\n    systems_list,\n    all_properties,\n    n=n,\n    pts_per_period=pts_per_period,\n    random_bump=False,  # optionally start with initial conditions pushed slightly off the attractor\n    include_transients=False,  # optionally do high-resolution sampling at rate proportional to the dt parameter",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "pts_per_period",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "pts_per_period = 100  # sampling with 100 points per period\nn_trajectories = 1  # generate n_trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(\n    systems_list,\n    all_properties,\n    n=n,\n    pts_per_period=pts_per_period,\n    random_bump=False,  # optionally start with initial conditions pushed slightly off the attractor\n    include_transients=False,  # optionally do high-resolution sampling at rate proportional to the dt parameter\n    n_trajectories=n_trajectories,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "n_trajectories",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "n_trajectories = 1  # generate n_trajectories starting from different initial conditions on the attractor\nall_sols_train, all_t_train, all_sols_test, all_t_test = load_data(\n    systems_list,\n    all_properties,\n    n=n,\n    pts_per_period=pts_per_period,\n    random_bump=False,  # optionally start with initial conditions pushed slightly off the attractor\n    include_transients=False,  # optionally do high-resolution sampling at rate proportional to the dt parameter\n    n_trajectories=n_trajectories,\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "num_attractors",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "num_attractors = len(systems_list)\n# Calculate some dynamical properties\nlyap_list = []\ndimension_list = []\nparam_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nlinear_scale_list = []\nfor system in systems_list:",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "lyap_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "lyap_list = []\ndimension_list = []\nparam_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nlinear_scale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "dimension_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "dimension_list = []\nparam_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nlinear_scale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "param_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "param_list = []\n# Calculate various definitions of scale separation\nscale_list_avg = []\nscale_list = []\nlinear_scale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "scale_list_avg",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "scale_list_avg = []\nscale_list = []\nlinear_scale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales\n    scale_list_avg.append(\n        all_properties[system][\"period\"] / all_properties[system][\"dt\"]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "scale_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "scale_list = []\nlinear_scale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales\n    scale_list_avg.append(\n        all_properties[system][\"period\"] / all_properties[system][\"dt\"]\n    )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "linear_scale_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "linear_scale_list = []\nfor system in systems_list:\n    lyap_list.append(all_properties[system][\"maximum_lyapunov_estimated\"])\n    dimension_list.append(all_properties[system][\"embedding_dimension\"])\n    param_list.append(all_properties[system][\"parameters\"])\n    # Ratio of dominant (average) to smallest timescales\n    scale_list_avg.append(\n        all_properties[system][\"period\"] / all_properties[system][\"dt\"]\n    )\n# Get the true coefficients for each system",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "true_coefficients",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "true_coefficients = make_dysts_true_coefficients(\n    systems_list, all_sols_train, dimension_list, param_list\n)\n# %% [markdown]\n# ### Issues with using the trapping theorem with some of the dysts systems\n# The trapping theorem and its variants require that systems are \"effectively nonlinear\", meaning there are no *invariant* linear subspaces where the system trajectories can escape to infinity.\n#\n# It turns out that Burke-Shaw, NoseHoover, SprottTorus, SprottA and SprottB are all not effectively nonlinear and exhibit subspaces where one of the coordinates can grow indefinitely! This is a good thing that the trapping theorem doesn't work for them -- these systems are *not* globally stable after all.\n#\n# Actually, SprottTorus has no cubic terms in the energy at all (so the trapping theorem is thwarted), and is very challenging to evaluate the boundedness. However, numerical results seem to point to it being bounded for all practical purposes (https://sprott.physics.wisc.edu/pubs/paper423.pdf).",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "reg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 4e-2 * eta  # default is 1e-2 * eta so this speeds up the code here\n# Bounds for simulated annealing\nboundmax = 1000\nboundmin = -1000\nplt.figure(figsize=(20, 6))\nfor i in range(len(systems_list)):\n    print(i, systems_list[i])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "max_iter = 5000\neta = 1.0e3\nalpha_m = 4e-2 * eta  # default is 1e-2 * eta so this speeds up the code here\n# Bounds for simulated annealing\nboundmax = 1000\nboundmin = -1000\nplt.figure(figsize=(20, 6))\nfor i in range(len(systems_list)):\n    print(i, systems_list[i])\n    r = dimension_list[i]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "eta = 1.0e3\nalpha_m = 4e-2 * eta  # default is 1e-2 * eta so this speeds up the code here\n# Bounds for simulated annealing\nboundmax = 1000\nboundmin = -1000\nplt.figure(figsize=(20, 6))\nfor i in range(len(systems_list)):\n    print(i, systems_list[i])\n    r = dimension_list[i]\n    # make training and testing data",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "alpha_m = 4e-2 * eta  # default is 1e-2 * eta so this speeds up the code here\n# Bounds for simulated annealing\nboundmax = 1000\nboundmin = -1000\nplt.figure(figsize=(20, 6))\nfor i in range(len(systems_list)):\n    print(i, systems_list[i])\n    r = dimension_list[i]\n    # make training and testing data\n    t = all_t_train[systems_list[i]][0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "boundmax",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "boundmax = 1000\nboundmin = -1000\nplt.figure(figsize=(20, 6))\nfor i in range(len(systems_list)):\n    print(i, systems_list[i])\n    r = dimension_list[i]\n    # make training and testing data\n    t = all_t_train[systems_list[i]][0]\n    x_train = all_sols_train[systems_list[i]][0]\n    x_test = all_sols_test[systems_list[i]][0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "boundmin",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "boundmin = -1000\nplt.figure(figsize=(20, 6))\nfor i in range(len(systems_list)):\n    print(i, systems_list[i])\n    r = dimension_list[i]\n    # make training and testing data\n    t = all_t_train[systems_list[i]][0]\n    x_train = all_sols_train[systems_list[i]][0]\n    x_test = all_sols_test[systems_list[i]][0]\n    # run trapping SINDy",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "reg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e7\nalpha_m = 0.1 * eta  # default is 1e-2 * eta so this speeds up the code here\nstable_systems = [2, 3, 6, 7, 14]\nstable_systems_list = systems_list[stable_systems]\nfor i in range(len(stable_systems_list)):\n    plt.figure(10, figsize=(16, 3))\n    r = dimension_list[stable_systems[i]]\n    print(i, stable_systems_list[i], r)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "max_iter = 5000\neta = 1.0e7\nalpha_m = 0.1 * eta  # default is 1e-2 * eta so this speeds up the code here\nstable_systems = [2, 3, 6, 7, 14]\nstable_systems_list = systems_list[stable_systems]\nfor i in range(len(stable_systems_list)):\n    plt.figure(10, figsize=(16, 3))\n    r = dimension_list[stable_systems[i]]\n    print(i, stable_systems_list[i], r)\n    # make training and testing data",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "eta = 1.0e7\nalpha_m = 0.1 * eta  # default is 1e-2 * eta so this speeds up the code here\nstable_systems = [2, 3, 6, 7, 14]\nstable_systems_list = systems_list[stable_systems]\nfor i in range(len(stable_systems_list)):\n    plt.figure(10, figsize=(16, 3))\n    r = dimension_list[stable_systems[i]]\n    print(i, stable_systems_list[i], r)\n    # make training and testing data\n    t = all_t_train[stable_systems_list[i]][0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "alpha_m = 0.1 * eta  # default is 1e-2 * eta so this speeds up the code here\nstable_systems = [2, 3, 6, 7, 14]\nstable_systems_list = systems_list[stable_systems]\nfor i in range(len(stable_systems_list)):\n    plt.figure(10, figsize=(16, 3))\n    r = dimension_list[stable_systems[i]]\n    print(i, stable_systems_list[i], r)\n    # make training and testing data\n    t = all_t_train[stable_systems_list[i]][0]\n    x_train = all_sols_train[stable_systems_list[i]][0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "stable_systems",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "stable_systems = [2, 3, 6, 7, 14]\nstable_systems_list = systems_list[stable_systems]\nfor i in range(len(stable_systems_list)):\n    plt.figure(10, figsize=(16, 3))\n    r = dimension_list[stable_systems[i]]\n    print(i, stable_systems_list[i], r)\n    # make training and testing data\n    t = all_t_train[stable_systems_list[i]][0]\n    x_train = all_sols_train[stable_systems_list[i]][0]\n    x_test = all_sols_test[stable_systems_list[i]][0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "stable_systems_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "stable_systems_list = systems_list[stable_systems]\nfor i in range(len(stable_systems_list)):\n    plt.figure(10, figsize=(16, 3))\n    r = dimension_list[stable_systems[i]]\n    print(i, stable_systems_list[i], r)\n    # make training and testing data\n    t = all_t_train[stable_systems_list[i]][0]\n    x_train = all_sols_train[stable_systems_list[i]][0]\n    x_test = all_sols_test[stable_systems_list[i]][0]\n    # run trapping SINDy, locally stable variant",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "data = loadmat(\"../data/cavityPOD.mat\")\nt_dns = data[\"t\"].flatten()\na_dns = data[\"a\"]\n# Downsample the data\nskip = 1\nt_dns = t_dns[::skip]\na_dns = a_dns[::skip, :]\ndt_dns = t_dns[1] - t_dns[0]\nsingular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "t_dns",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "t_dns = data[\"t\"].flatten()\na_dns = data[\"a\"]\n# Downsample the data\nskip = 1\nt_dns = t_dns[::skip]\na_dns = a_dns[::skip, :]\ndt_dns = t_dns[1] - t_dns[0]\nsingular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:\n    def __init__(self, file):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "a_dns",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "a_dns = data[\"a\"]\n# Downsample the data\nskip = 1\nt_dns = t_dns[::skip]\na_dns = a_dns[::skip, :]\ndt_dns = t_dns[1] - t_dns[0]\nsingular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:\n    def __init__(self, file):\n        model_dict = loadmat(file)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "skip = 1\nt_dns = t_dns[::skip]\na_dns = a_dns[::skip, :]\ndt_dns = t_dns[1] - t_dns[0]\nsingular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:\n    def __init__(self, file):\n        model_dict = loadmat(file)\n        self.C = model_dict[\"C\"][0]\n        self.L = model_dict[\"L\"]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "t_dns",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "t_dns = t_dns[::skip]\na_dns = a_dns[::skip, :]\ndt_dns = t_dns[1] - t_dns[0]\nsingular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:\n    def __init__(self, file):\n        model_dict = loadmat(file)\n        self.C = model_dict[\"C\"][0]\n        self.L = model_dict[\"L\"]\n        self.Q = model_dict[\"Q\"]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "a_dns",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "a_dns = a_dns[::skip, :]\ndt_dns = t_dns[1] - t_dns[0]\nsingular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:\n    def __init__(self, file):\n        model_dict = loadmat(file)\n        self.C = model_dict[\"C\"][0]\n        self.L = model_dict[\"L\"]\n        self.Q = model_dict[\"Q\"]\n    def integrate(self, x0, t, r=None, rtol=1e-3, atol=1e-6):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "dt_dns",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "dt_dns = t_dns[1] - t_dns[0]\nsingular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:\n    def __init__(self, file):\n        model_dict = loadmat(file)\n        self.C = model_dict[\"C\"][0]\n        self.L = model_dict[\"L\"]\n        self.Q = model_dict[\"Q\"]\n    def integrate(self, x0, t, r=None, rtol=1e-3, atol=1e-6):\n        if r is None:",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "singular_vals",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "singular_vals = data[\"svs\"].flatten()\nclass GalerkinROM:\n    def __init__(self, file):\n        model_dict = loadmat(file)\n        self.C = model_dict[\"C\"][0]\n        self.L = model_dict[\"L\"]\n        self.Q = model_dict[\"Q\"]\n    def integrate(self, x0, t, r=None, rtol=1e-3, atol=1e-6):\n        if r is None:\n            r = len(self.C)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "galerkin_model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "galerkin_model = GalerkinROM(\"../data/cavityGalerkin.mat\")\ndt_rom = 1e-2\nt_sim = np.arange(0, 300, dt_rom)\na0 = a_dns[0, :]\n# Finally, build a r=6 and r=16 Galerkin model\na_gal6 = galerkin_model.integrate(a0, t_sim, r=6, rtol=1e-8, atol=1e-8)\na_gal16 = galerkin_model.integrate(a0, t_sim, r=16, rtol=1e-8, atol=1e-8)\n# %% [markdown]\n# ### Now try building a locally stable trapping SINDy model now\n# It does not quite achieve the negative definite stability matrix, but it performs remarkably well.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "dt_rom",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "dt_rom = 1e-2\nt_sim = np.arange(0, 300, dt_rom)\na0 = a_dns[0, :]\n# Finally, build a r=6 and r=16 Galerkin model\na_gal6 = galerkin_model.integrate(a0, t_sim, r=6, rtol=1e-8, atol=1e-8)\na_gal16 = galerkin_model.integrate(a0, t_sim, r=16, rtol=1e-8, atol=1e-8)\n# %% [markdown]\n# ### Now try building a locally stable trapping SINDy model now\n# It does not quite achieve the negative definite stability matrix, but it performs remarkably well.\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "t_sim",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "t_sim = np.arange(0, 300, dt_rom)\na0 = a_dns[0, :]\n# Finally, build a r=6 and r=16 Galerkin model\na_gal6 = galerkin_model.integrate(a0, t_sim, r=6, rtol=1e-8, atol=1e-8)\na_gal16 = galerkin_model.integrate(a0, t_sim, r=16, rtol=1e-8, atol=1e-8)\n# %% [markdown]\n# ### Now try building a locally stable trapping SINDy model now\n# It does not quite achieve the negative definite stability matrix, but it performs remarkably well.\n# %%\nr = 6  # POD truncation",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "a0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "a0 = a_dns[0, :]\n# Finally, build a r=6 and r=16 Galerkin model\na_gal6 = galerkin_model.integrate(a0, t_sim, r=6, rtol=1e-8, atol=1e-8)\na_gal16 = galerkin_model.integrate(a0, t_sim, r=16, rtol=1e-8, atol=1e-8)\n# %% [markdown]\n# ### Now try building a locally stable trapping SINDy model now\n# It does not quite achieve the negative definite stability matrix, but it performs remarkably well.\n# %%\nr = 6  # POD truncation\nx_train = a_dns[:, :r]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "a_gal6",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "a_gal6 = galerkin_model.integrate(a0, t_sim, r=6, rtol=1e-8, atol=1e-8)\na_gal16 = galerkin_model.integrate(a0, t_sim, r=16, rtol=1e-8, atol=1e-8)\n# %% [markdown]\n# ### Now try building a locally stable trapping SINDy model now\n# It does not quite achieve the negative definite stability matrix, but it performs remarkably well.\n# %%\nr = 6  # POD truncation\nx_train = a_dns[:, :r]\nt_train = t_dns.copy()\nreg_weight_lam = 0.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "a_gal16",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "a_gal16 = galerkin_model.integrate(a0, t_sim, r=16, rtol=1e-8, atol=1e-8)\n# %% [markdown]\n# ### Now try building a locally stable trapping SINDy model now\n# It does not quite achieve the negative definite stability matrix, but it performs remarkably well.\n# %%\nr = 6  # POD truncation\nx_train = a_dns[:, :r]\nt_train = t_dns.copy()\nreg_weight_lam = 0.0\neta = 1.0e10",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "r = 6  # POD truncation\nx_train = a_dns[:, :r]\nt_train = t_dns.copy()\nreg_weight_lam = 0.0\neta = 1.0e10\nalpha_m = 1e-4 * eta  # default is 1e-2 * eta so this speeds up the code here\nbeta = 1e-5\nmax_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "x_train = a_dns[:, :r]\nt_train = t_dns.copy()\nreg_weight_lam = 0.0\neta = 1.0e10\nalpha_m = 1e-4 * eta  # default is 1e-2 * eta so this speeds up the code here\nbeta = 1e-5\nmax_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "t_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "t_train = t_dns.copy()\nreg_weight_lam = 0.0\neta = 1.0e10\nalpha_m = 1e-4 * eta  # default is 1e-2 * eta so this speeds up the code here\nbeta = 1e-5\nmax_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,\n    _include_bias=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "reg_weight_lam = 0.0\neta = 1.0e10\nalpha_m = 1e-4 * eta  # default is 1e-2 * eta so this speeds up the code here\nbeta = 1e-5\nmax_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "eta = 1.0e10\nalpha_m = 1e-4 * eta  # default is 1e-2 * eta so this speeds up the code here\nbeta = 1e-5\nmax_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "alpha_m = 1e-4 * eta  # default is 1e-2 * eta so this speeds up the code here\nbeta = 1e-5\nmax_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "beta = 1e-5\nmax_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "max_iter = 100\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    gamma=-0.1,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=r,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    gamma=-0.1,\n    verbose=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n)\nmodel.fit(x_train, t=t_train)\nXi = model.coefficients().T\ncheck_local_stability(Xi, sindy_opt, 1.0)\n# Fit a baseline model -- this is almost always an unstable model!\nmodel_baseline = ps.SINDy(\n    optimizer=ps.STLSQ(reg_weight_lam=0.0),",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "Xi = model.coefficients().T\ncheck_local_stability(Xi, sindy_opt, 1.0)\n# Fit a baseline model -- this is almost always an unstable model!\nmodel_baseline = ps.SINDy(\n    optimizer=ps.STLSQ(reg_weight_lam=0.0),\n    feature_library=ps.PolynomialLibrary(),\n)\nmodel_baseline.fit(x_train, t=t_train)\n# %%\n# Simulate the model",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "model_baseline",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "model_baseline = ps.SINDy(\n    optimizer=ps.STLSQ(reg_weight_lam=0.0),\n    feature_library=ps.PolynomialLibrary(),\n)\nmodel_baseline.fit(x_train, t=t_train)\n# %%\n# Simulate the model\na_sindy = model.simulate(a0[:r], t_sim)\na_sindy_baseline = model_baseline.simulate(a0[:r], t_sim, integrator=\"odeint\")\nrE = 16",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "a_sindy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "a_sindy = model.simulate(a0[:r], t_sim)\na_sindy_baseline = model_baseline.simulate(a0[:r], t_sim, integrator=\"odeint\")\nrE = 16\nE_sindy = np.sum(a_sindy[:, :rE] ** 2, 1)\nE_sindy_baseline = np.sum(a_sindy_baseline[:, :rE] ** 2, 1)\nE_dns = np.sum(a_dns[:, :rE] ** 2, 1)\nE_gal6 = np.sum(a_gal6[:, :rE] ** 2, 1)\nE_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "a_sindy_baseline",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "a_sindy_baseline = model_baseline.simulate(a0[:r], t_sim, integrator=\"odeint\")\nrE = 16\nE_sindy = np.sum(a_sindy[:, :rE] ** 2, 1)\nE_sindy_baseline = np.sum(a_sindy_baseline[:, :rE] ** 2, 1)\nE_dns = np.sum(a_dns[:, :rE] ** 2, 1)\nE_gal6 = np.sum(a_gal6[:, :rE] ** 2, 1)\nE_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time\n# Trapping SINDy model vastly outperforms the Galerkin models!",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "rE",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "rE = 16\nE_sindy = np.sum(a_sindy[:, :rE] ** 2, 1)\nE_sindy_baseline = np.sum(a_sindy_baseline[:, :rE] ** 2, 1)\nE_dns = np.sum(a_dns[:, :rE] ** 2, 1)\nE_gal6 = np.sum(a_gal6[:, :rE] ** 2, 1)\nE_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time\n# Trapping SINDy model vastly outperforms the Galerkin models!\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "E_sindy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "E_sindy = np.sum(a_sindy[:, :rE] ** 2, 1)\nE_sindy_baseline = np.sum(a_sindy_baseline[:, :rE] ** 2, 1)\nE_dns = np.sum(a_dns[:, :rE] ** 2, 1)\nE_gal6 = np.sum(a_gal6[:, :rE] ** 2, 1)\nE_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time\n# Trapping SINDy model vastly outperforms the Galerkin models!\n# %%\nplt.figure(figsize=(12, 7))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "E_sindy_baseline",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "E_sindy_baseline = np.sum(a_sindy_baseline[:, :rE] ** 2, 1)\nE_dns = np.sum(a_dns[:, :rE] ** 2, 1)\nE_gal6 = np.sum(a_gal6[:, :rE] ** 2, 1)\nE_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time\n# Trapping SINDy model vastly outperforms the Galerkin models!\n# %%\nplt.figure(figsize=(12, 7))\nplt.subplot(2, 1, 1)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "E_dns",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "E_dns = np.sum(a_dns[:, :rE] ** 2, 1)\nE_gal6 = np.sum(a_gal6[:, :rE] ** 2, 1)\nE_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time\n# Trapping SINDy model vastly outperforms the Galerkin models!\n# %%\nplt.figure(figsize=(12, 7))\nplt.subplot(2, 1, 1)\nplt.plot(t_dns, E_dns, \"k\", label=\"DNS\", lw=3)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "E_gal6",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "E_gal6 = np.sum(a_gal6[:, :rE] ** 2, 1)\nE_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time\n# Trapping SINDy model vastly outperforms the Galerkin models!\n# %%\nplt.figure(figsize=(12, 7))\nplt.subplot(2, 1, 1)\nplt.plot(t_dns, E_dns, \"k\", label=\"DNS\", lw=3)\nplt.plot(t_sim, E_gal6, label=\"$r=6$\", lw=2, c=\"xkcd:dusty rose\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "E_gal16",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "description": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "peekOfCode": "E_gal16 = np.sum(a_gal16[:, :rE] ** 2, 1)\n# %% [markdown]\n# ### Now we plot the trajectories and energy as function of time\n# Trapping SINDy model vastly outperforms the Galerkin models!\n# %%\nplt.figure(figsize=(12, 7))\nplt.subplot(2, 1, 1)\nplt.plot(t_dns, E_dns, \"k\", label=\"DNS\", lw=3)\nplt.plot(t_sim, E_gal6, label=\"$r=6$\", lw=2, c=\"xkcd:dusty rose\")\nplt.plot(t_sim, E_gal16, label=\"$r=16$\", lw=2, c=\"xkcd:brick red\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.example_dysts",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "r = 3\nN = int((r**2 + 3 * r) / 2.0) + 1\n# make training and testing data\ndt = 0.01\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "N = int((r**2 + 3 * r) / 2.0) + 1\n# make training and testing data\ndt = 0.01\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "dt = 0.01\nT = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "T = 40\nt = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "t = np.arange(0, T + dt, dt)\nt_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "t_span = (t[0], t[-1])\nx0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x0 = [1, -1, 20]\nx_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta\n# run trapping SINDy",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_train = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\nx0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x0 = (np.random.rand(3) - 0.5) * 30\nx_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_test = solve_ivp(lorenz, t_span, x0, t_eval=t, **integrator_keywords).y.T\n# define hyperparameters\nreg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=3,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "reg_weight_lam = 0\nmax_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "max_iter = 5000\neta = 1.0e3\nalpha_m = 8e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "eta = 1.0e3\nalpha_m = 8e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha_m = 8e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    gamma=-1,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    gamma=-1,\n    verbose=True,\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n)\nmodel.fit(x_train, t=t)\nmodel.print()\n# Extract model coefficients and check how well constraint is satisfied\nXi = model.coefficients().T\nPL_tensor = sindy_opt.PL_unsym_\nPQ_tensor = sindy_opt.PQ_",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nPL_tensor = sindy_opt.PL_unsym_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_unsym_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# %%\n# Calculate the x_dot and x trajectories for train and test sets",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# %%\n# Calculate the x_dot and x trajectories for train and test sets\nxdot_test = model.differentiate(x_test, t=t)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Lenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Lenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# %%\n# Calculate the x_dot and x trajectories for train and test sets\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# %%\n# Calculate the x_dot and x trajectories for train and test sets\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_train_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nsigma = 10",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nsigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nsigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "E_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\nsigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.array([[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]).T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "sigma",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "sigma = 10\nrho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.array([[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "rho",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "rho = 28\nbeta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.array([[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "beta = 8.0 / 3.0\nterms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.array([[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "terms",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "terms = sindy_library.get_feature_names()\nXi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.array([[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi_lorenz",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Xi_lorenz = np.zeros(Xi.shape)\nXi_lorenz[1 : r + 1, :] = np.array([[-sigma, sigma, 0], [rho, -1, 0], [0, 0, -beta]]).T\nXi_lorenz[terms.index(\"x0 x2\"), 1] = -1\nXi_lorenz[terms.index(\"x0 x1\"), 2] = 1\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]\n# ### Use simulated annealing\n#  We are going to check if any $\\mathbf{m}$ exists such that $\\mathbf{A}^S$ is negative definite, using the identified coefficients, to verify again that our model is globally stable.\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "boundvals",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "boundvals = np.zeros((r, 2))\nboundmax = 1000\nboundmin = -1000\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\nPL_tensor_unsym = sindy_opt.PL_unsym_\nPL_tensor = sindy_opt.PL_\nPM_tensor = sindy_opt.PM_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "boundmax",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "boundmax = 1000\nboundmin = -1000\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\nPL_tensor_unsym = sindy_opt.PL_unsym_\nPL_tensor = sindy_opt.PL_\nPM_tensor = sindy_opt.PM_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))\n# run simulated annealing",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "boundmin",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "boundmin = -1000\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\nPL_tensor_unsym = sindy_opt.PL_unsym_\nPL_tensor = sindy_opt.PL_\nPM_tensor = sindy_opt.PM_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))\n# run simulated annealing\nalgo_sol = anneal_algo(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor_unsym",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PL_tensor_unsym = sindy_opt.PL_unsym_\nPL_tensor = sindy_opt.PL_\nPM_tensor = sindy_opt.PM_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))\n# run simulated annealing\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,  # obj_function imported from utils.py\n    args=(L, Q, np.eye(r)),",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPM_tensor = sindy_opt.PM_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))\n# run simulated annealing\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,  # obj_function imported from utils.py\n    args=(L, Q, np.eye(r)),\n    maxiter=500,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PM_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PM_tensor = sindy_opt.PM_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))\n# run simulated annealing\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,  # obj_function imported from utils.py\n    args=(L, Q, np.eye(r)),\n    maxiter=500,\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "L = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))\n# run simulated annealing\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,  # obj_function imported from utils.py\n    args=(L, Q, np.eye(r)),\n    maxiter=500,\n)\nopt_m = algo_sol.x",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q = np.tensordot(PM_tensor, Xi, axes=([4, 3], [0, 1]))\n# run simulated annealing\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,  # obj_function imported from utils.py\n    args=(L, Q, np.eye(r)),\n    maxiter=500,\n)\nopt_m = algo_sol.x\nopt_energy = algo_sol.fun",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "algo_sol",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "algo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,  # obj_function imported from utils.py\n    args=(L, Q, np.eye(r)),\n    maxiter=500,\n)\nopt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Result:\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "opt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "opt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_result",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "opt_result = algo_sol.message\nprint(\"Result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)\n# %% [markdown]\n# ### Promoting locally stable models with estimates of the stability radius",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "max_iter = 500\neta = 1.0e2\nalpha = 1e-15\nbeta = 1e20\nreg_weight_lam = 0\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "eta = 1.0e2\nalpha = 1e-15\nbeta = 1e20\nreg_weight_lam = 0\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha = 1e-15\nbeta = 1e20\nreg_weight_lam = 0\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "beta = 1e20\nreg_weight_lam = 0\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "reg_weight_lam = 0\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    gamma=-1,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    max_iter=max_iter,\n    gamma=-1,\n    alpha=alpha,\n    beta=beta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n)\nmodel.fit(x_train, t=t)\nmodel.print()\nXi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nRm, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\n# %% [markdown]\n# Indeed, we found that if $\\alpha \\gg 1$ large enough, the quadratic terms in the model are zeroed, which is bad news both for fitting the model and for applying the trapping theorem since the theorem relies on nontrivial quadratic contributions.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nRm, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\n# %% [markdown]\n# Indeed, we found that if $\\alpha \\gg 1$ large enough, the quadratic terms in the model are zeroed, which is bad news both for fitting the model and for applying the trapping theorem since the theorem relies on nontrivial quadratic contributions.\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nRm, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\n# %% [markdown]\n# Indeed, we found that if $\\alpha \\gg 1$ large enough, the quadratic terms in the model are zeroed, which is bad news both for fitting the model and for applying the trapping theorem since the theorem relies on nontrivial quadratic contributions.\n# %% [markdown]\n# ### Second case: $\\alpha \\ll 1$, $\\beta \\gg 1$, which should reproduce the energy-preserving nonlinear constraint to high accuracy",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Lenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Lenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nRm, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\n# %% [markdown]\n# Indeed, we found that if $\\alpha \\gg 1$ large enough, the quadratic terms in the model are zeroed, which is bad news both for fitting the model and for applying the trapping theorem since the theorem relies on nontrivial quadratic contributions.\n# %% [markdown]\n# ### Second case: $\\alpha \\ll 1$, $\\beta \\gg 1$, which should reproduce the energy-preserving nonlinear constraint to high accuracy\n#  This is a different strategy for stability -- don't make the model's quadratic nonlinearities weak, but make it so that the totally symmetric part of $Q_{ijk}$ is very small.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Qenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Qenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nRm, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\n# %% [markdown]\n# Indeed, we found that if $\\alpha \\gg 1$ large enough, the quadratic terms in the model are zeroed, which is bad news both for fitting the model and for applying the trapping theorem since the theorem relies on nontrivial quadratic contributions.\n# %% [markdown]\n# ### Second case: $\\alpha \\ll 1$, $\\beta \\gg 1$, which should reproduce the energy-preserving nonlinear constraint to high accuracy\n#  This is a different strategy for stability -- don't make the model's quadratic nonlinearities weak, but make it so that the totally symmetric part of $Q_{ijk}$ is very small.\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nRm, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\n# %% [markdown]\n# Indeed, we found that if $\\alpha \\gg 1$ large enough, the quadratic terms in the model are zeroed, which is bad news both for fitting the model and for applying the trapping theorem since the theorem relies on nontrivial quadratic contributions.\n# %% [markdown]\n# ### Second case: $\\alpha \\ll 1$, $\\beta \\gg 1$, which should reproduce the energy-preserving nonlinear constraint to high accuracy\n#  This is a different strategy for stability -- don't make the model's quadratic nonlinearities weak, but make it so that the totally symmetric part of $Q_{ijk}$ is very small.\n# %%\nmax_iter = 10000",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\nRm, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\n# %% [markdown]\n# Indeed, we found that if $\\alpha \\gg 1$ large enough, the quadratic terms in the model are zeroed, which is bad news both for fitting the model and for applying the trapping theorem since the theorem relies on nontrivial quadratic contributions.\n# %% [markdown]\n# ### Second case: $\\alpha \\ll 1$, $\\beta \\gg 1$, which should reproduce the energy-preserving nonlinear constraint to high accuracy\n#  This is a different strategy for stability -- don't make the model's quadratic nonlinearities weak, but make it so that the totally symmetric part of $Q_{ijk}$ is very small.\n# %%\nmax_iter = 10000\neta = 1.0e3",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "max_iter = 10000\neta = 1.0e3\nalpha = 1e20\nbeta = 1e-10\nreg_weight_lam = 0\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "eta = 1.0e3\nalpha = 1e20\nbeta = 1e-10\nreg_weight_lam = 0\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha = 1e20\nbeta = 1e-10\nreg_weight_lam = 0\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "beta = 1e-10\nreg_weight_lam = 0\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "reg_weight_lam = 0\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    gamma=-1,\n    alpha=alpha,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n)\nmodel.fit(x_train, t=t)\nmodel.print()\nXi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nR_m, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nR_m, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]\n# ### Plot how the two stability radii changes as the algorithm iterates",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nR_m, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]\n# ### Plot how the two stability radii changes as the algorithm iterates\n#  As the algorithm iterates, it is biasing the model to have a negative definite $\\mathbf{A}^S$ matrix. Once this is true, we can estimate the local Lyapunov stability radius $\\rho_+$ and the trapping region radius $\\rho_-$.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Lenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Lenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nR_m, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]\n# ### Plot how the two stability radii changes as the algorithm iterates\n#  As the algorithm iterates, it is biasing the model to have a negative definite $\\mathbf{A}^S$ matrix. Once this is true, we can estimate the local Lyapunov stability radius $\\rho_+$ and the trapping region radius $\\rho_-$.\n#",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Qenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Qenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nR_m, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]\n# ### Plot how the two stability radii changes as the algorithm iterates\n#  As the algorithm iterates, it is biasing the model to have a negative definite $\\mathbf{A}^S$ matrix. Once this is true, we can estimate the local Lyapunov stability radius $\\rho_+$ and the trapping region radius $\\rho_-$.\n#\n#  #### Note that with the soft constraint we can get the stability radius arbitrarily large here!",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nR_m, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]\n# ### Plot how the two stability radii changes as the algorithm iterates\n#  As the algorithm iterates, it is biasing the model to have a negative definite $\\mathbf{A}^S$ matrix. Once this is true, we can estimate the local Lyapunov stability radius $\\rho_+$ and the trapping region radius $\\rho_-$.\n#\n#  #### Note that with the soft constraint we can get the stability radius arbitrarily large here!\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\nR_m, R_ls = check_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]\n# ### Plot how the two stability radii changes as the algorithm iterates\n#  As the algorithm iterates, it is biasing the model to have a negative definite $\\mathbf{A}^S$ matrix. Once this is true, we can estimate the local Lyapunov stability radius $\\rho_+$ and the trapping region radius $\\rho_-$.\n#\n#  #### Note that with the soft constraint we can get the stability radius arbitrarily large here!\n# %%\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# %% [markdown]\n# ### Plot how the two stability radii changes as the algorithm iterates\n#  As the algorithm iterates, it is biasing the model to have a negative definite $\\mathbf{A}^S$ matrix. Once this is true, we can estimate the local Lyapunov stability radius $\\rho_+$ and the trapping region radius $\\rho_-$.\n#\n#  #### Note that with the soft constraint we can get the stability radius arbitrarily large here!\n# %%\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# %%\n# Calculate the x_dot and x trajectories for train and test sets\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# %%\n# Calculate the x_dot and x trajectories for train and test sets\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nx_stability_check = model.simulate(x0, t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nx_stability_check = model.simulate(x0, t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_train_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nx_stability_check = model.simulate(x0, t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\nx_stability_check = model.simulate(x0, t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_stability_check",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_stability_check = model.simulate(x0, t, integrator_kws=integrator_keywords)\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "E_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %% [markdown]\n# ### Repeat $\\alpha \\gg 1$, $\\beta \\ll 1$ case with $\\lambda > 0$\n#  I find that solver will fail if eps_solver parameter is made too small (error tolerance of the CVXPY solver is very stringent)\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "max_iter = 100\neta = 1.0e5\nalpha = 1e20\nbeta = 1e-10\nreg_weight_lam = 5\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "eta = 1.0e5\nalpha = 1e20\nbeta = 1e-10\nreg_weight_lam = 5\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha = 1e20\nbeta = 1e-10\nreg_weight_lam = 5\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "beta = 1e-10\nreg_weight_lam = 5\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "reg_weight_lam = 5\nalpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha_m = 0.9 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    gamma=-1,\n    alpha=alpha,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n)\nmodel.fit(x_train, t=t)\nmodel.print()\nXi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Lenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Lenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Qenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Qenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_progress_plots(r, sindy_opt)\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_progress_plots(r, sindy_opt)\n# %%\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_progress_plots(r, sindy_opt)\n# %%\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\nplt.yscale(\"log\")\nplt.ylim(1, rhos_plus[-1] * 1.2)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\n    \"Maximum deviation from having zero totally symmetric part: \", np.max(np.abs(Q_sum))\n)\n# %% [markdown]\n# ### Now we add a lot of noise to the Lorenz data and see if trapping extended algorithm improves robustness to noise.\n# %%\nnp.random.seed(10)\nlorenz_noise = np.random.normal(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\n    \"Maximum deviation from having zero totally symmetric part: \", np.max(np.abs(Q_sum))\n)\n# %% [markdown]\n# ### Now we add a lot of noise to the Lorenz data and see if trapping extended algorithm improves robustness to noise.\n# %%\nnp.random.seed(10)\nlorenz_noise = np.random.normal(\n    0, mean_val / 4, x_train.shape",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "lorenz_noise",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "lorenz_noise = np.random.normal(\n    0, mean_val / 4, x_train.shape\n)  # 25% noise added with zero mean\nx_train_noise = x_train + lorenz_noise\nmax_iter = 10000\neta = 1.0e2\nalpha = 1e20\nbeta = 1e-14\nreg_weight_lam = 0\nalpha_m = 0.1 * eta",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_train_noise",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_train_noise = x_train + lorenz_noise\nmax_iter = 10000\neta = 1.0e2\nalpha = 1e20\nbeta = 1e-14\nreg_weight_lam = 0\nalpha_m = 0.1 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "max_iter = 10000\neta = 1.0e2\nalpha = 1e20\nbeta = 1e-14\nreg_weight_lam = 0\nalpha_m = 0.1 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "eta = 1.0e2\nalpha = 1e20\nbeta = 1e-14\nreg_weight_lam = 0\nalpha_m = 0.1 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha = 1e20\nbeta = 1e-14\nreg_weight_lam = 0\nalpha_m = 0.1 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "beta = 1e-14\nreg_weight_lam = 0\nalpha_m = 0.1 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "reg_weight_lam = 0\nalpha_m = 0.1 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "alpha_m = 0.1 * eta\n# run trapping SINDy... no more constraints!\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=3,\n    _include_bias=True,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    gamma=-1,\n    alpha=alpha,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library,\n)\nmodel.fit(x_train_noise, t=t)\nmodel.print()\nXi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nLenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Lenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Lenergy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Qenergy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Qenergy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_trap_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_trap_progress_plots(r, sindy_opt)\n# Calculate the x_dot and x trajectories for train and test sets",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_trap_progress_plots(r, sindy_opt)\n# Calculate the x_dot and x trajectories for train and test sets\nxdot_test = model.differentiate(x_test, t=t)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nprint(\n    r\"|tilde{H_0}|_F = \",\n    np.sqrt(np.sum((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1])) ** 2)),\n)\n# make_trap_progress_plots(r, sindy_opt)\n# Calculate the x_dot and x trajectories for train and test sets\nxdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "xdot_test",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "xdot_test = model.differentiate(x_test, t=t)\nxdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "xdot_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "xdot_test_pred = model.predict(x_test)\nx_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_train_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_train_pred = model.simulate(x_train[0, :], t, integrator_kws=integrator_keywords)\nx_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "x_test_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "x_test_pred = model.simulate(x_test[0, :], t, integrator_kws=integrator_keywords)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %%\n# plotting and analysis\nmake_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, \"lorenz\")\nmean_val = np.mean(x_test_pred, axis=0)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.mean(x_test_pred, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\nE_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "E_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "E_pred = np.linalg.norm(x_test - x_test_pred) / np.linalg.norm(x_test)\nprint(\"Frobenius error = \", E_pred)\ncheck_local_stability(Xi, sindy_opt, mean_val)\n# compute relative Frobenius error in the model coefficients\ncoef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "coef_pred",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "coef_pred = np.linalg.norm(Xi_lorenz - Xi) / np.linalg.norm(Xi_lorenz)\nprint(\"Frobenius coefficient error = \", coef_pred)\n# Compute time-averaged dX/dt error\nderiv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "deriv_error",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "deriv_error = np.zeros(xdot_test.shape[0])\nfor i in range(xdot_test.shape[0]):\n    deriv_error[i] = np.dot(\n        xdot_test[i, :] - xdot_test_pred[i, :], xdot_test[i, :] - xdot_test_pred[i, :]\n    ) / np.dot(xdot_test[i, :], xdot_test[i, :])\nprint(\"Time-averaged derivative error = \", np.nanmean(deriv_error))\n# %%\nfig = plt.figure(figsize=(10, 6))\nax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_train_noise[:, 0], x_train_noise[:, 1], x_train_noise[:, 2], \"r-\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "fig = plt.figure(figsize=(10, 6))\nax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_train_noise[:, 0], x_train_noise[:, 1], x_train_noise[:, 2], \"r-\")\nax1.plot(x_train_pred[:, 0], x_train_pred[:, 1], x_train_pred[:, 2], \"k-\")\nax1.set(\n    xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation + 25% noise\"\n)\nax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"b\")\nax2.plot(x_test_pred[:, 0], x_test_pred[:, 1], x_test_pred[:, 2], \"k--\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "ax1 = fig.add_subplot(121, projection=\"3d\")\nax1.plot(x_train_noise[:, 0], x_train_noise[:, 1], x_train_noise[:, 2], \"r-\")\nax1.plot(x_train_pred[:, 0], x_train_pred[:, 1], x_train_pred[:, 2], \"k-\")\nax1.set(\n    xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"model simulation + 25% noise\"\n)\nax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"b\")\nax2.plot(x_test_pred[:, 0], x_test_pred[:, 1], x_test_pred[:, 2], \"k--\")\nax2.set(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "peekOfCode": "ax2 = fig.add_subplot(122, projection=\"3d\")\nax2.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"b\")\nax2.plot(x_test_pred[:, 0], x_test_pred[:, 1], x_test_pred[:, 2], \"k--\")\nax2.set(\n    xlabel=\"$x_0$\", ylabel=\"$x_1$\", zlabel=\"$x_2$\", title=\"true simulation + prediction\"\n)\nplt.show()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_extended",
        "documentation": {}
    },
    {
        "label": "obj_function",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def obj_function(m, L_obj, Q_obj, P_obj):\n    ens = EnstrophyMat(P_obj)\n    As = _create_A_symm(L_obj, 2 * Q_obj, m, ens)\n    eigvals, eigvecs = np.linalg.eigh(As)\n    return eigvals[-1]\ndef get_trapping_radius(max_eigval, eps_Q, d):\n    x = Symbol(\"x\")\n    delta = max_eigval**2 - 4 * eps_Q * np.linalg.norm(d, 2) / 3\n    delta_func = max_eigval**2 - 4 * x * np.linalg.norm(d, 2) / 3\n    rad_trap = 0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "get_trapping_radius",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def get_trapping_radius(max_eigval, eps_Q, d):\n    x = Symbol(\"x\")\n    delta = max_eigval**2 - 4 * eps_Q * np.linalg.norm(d, 2) / 3\n    delta_func = max_eigval**2 - 4 * x * np.linalg.norm(d, 2) / 3\n    rad_trap = 0\n    rad_stab = 0\n    if max_eigval < 0 and delta >= 0:\n        y_trap = -(3 / (2 * x)) * (max_eigval + sp.sqrt(delta_func))\n        y_stab = (3 / (2 * x)) * (-max_eigval + sp.sqrt(delta_func))\n        rad_trap = limit(y_trap, x, eps_Q, dir=\"+\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "check_local_stability",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def check_local_stability(Xi, sindy_opt: ps.TrappingSR3, mean_val):\n    mod_matrix = sindy_opt.enstrophy.P\n    rt_mod_mat = sindy_opt.enstrophy.P_root\n    opt_m = sindy_opt.m_history_[-1]\n    PC_tensor = sindy_opt.PC_\n    PL_tensor_unsym = sindy_opt.PL_unsym_\n    PM_tensor = sindy_opt.PM_\n    PQ_tensor = sindy_opt.PQ_\n    p_As = _create_A_symm(PL_tensor_unsym, PM_tensor, opt_m, sindy_opt.enstrophy)\n    As = np.tensordot(p_As, Xi, axes=([3, 2], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_trap_progress_plots",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def make_trap_progress_plots(r, sindy_opt: ps.TrappingSR3):\n    mod_matrix = sindy_opt.enstrophy.P\n    PC_tensor = sindy_opt.PC_\n    PL_tensor_unsym = sindy_opt.PL_unsym_\n    PQ_tensor = sindy_opt.PQ_\n    ms = sindy_opt.m_history_\n    eigs = sindy_opt.PWeigs_history_\n    coef_history = sindy_opt.history_\n    rhos_plus = []\n    rhos_minus = []",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_3d_plots",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def make_3d_plots(x_test, x_test_pred, filename):\n    fig, ax = plt.subplots(1, 1, subplot_kw={\"projection\": \"3d\"}, figsize=(8, 8))\n    plt.plot(x_test[:, 0], x_test[:, 1], x_test[:, 2], \"r\", label=\"true x\")\n    plt.plot(\n        x_test_pred[:, 0], x_test_pred[:, 1], x_test_pred[:, 2], \"k\", label=\"pred x\"\n    )\n    ax = plt.gca()\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_zticklabels([])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_fits",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def make_fits(r, t, xdot_test, xdot_test_pred, x_test, x_test_pred, filename):\n    fig = plt.figure(figsize=(16, 8))\n    spec = gridspec.GridSpec(ncols=2, nrows=r, figure=fig, hspace=0.0, wspace=0.0)\n    for i in range(r):\n        plt.subplot(spec[i, 0])  # r, 2, 2 * i + 2)\n        plt.plot(t, xdot_test[:, i], \"r\", label=r\"true $\\dot{x}_\" + str(i) + \"$\")\n        plt.plot(t, xdot_test_pred[:, i], \"k--\", label=r\"pred $\\dot{x}_\" + str(i) + \"$\")\n        ax = plt.gca()\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_progress_plots",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def make_progress_plots(r, sindy_opt):\n    W = np.asarray(sindy_opt.history_)\n    M = np.asarray(sindy_opt.m_history_)\n    dW = np.zeros(W.shape[0])\n    dM = np.zeros(M.shape[0])\n    for i in range(1, W.shape[0]):\n        dW[i] = np.sum((W[i, :, :] - W[i - 1, :, :]) ** 2)\n        dM[i] = np.sum((M[i, :] - M[i - 1, :]) ** 2)\n    plt.figure()\n    plt.semilogy(dW, label=r\"Coefficient progress, $\\|\\xi_{k+1} - \\xi_k\\|_2^2$\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def load_data(\n    systems_list,\n    all_properties,\n    n=200,\n    pts_per_period=20,\n    random_bump=False,\n    include_transients=False,\n    n_trajectories=20,\n):\n    all_sols_train = dict()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_bar",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def make_bar(galerkin9, L, Q, Lens, Qens):\n    r = L.shape[0]\n    bins = np.logspace(-11, 0, 50)\n    plt.figure(figsize=(8, 4))\n    plt.grid(\"True\")\n    galerkin_full = np.vstack(\n        (\n            galerkin9[\"L\"].reshape(r**2, 1),\n            galerkin9[\"Q\"].reshape(len(galerkin9[\"Q\"].flatten()), 1),\n        )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "get_velocity",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def get_velocity(file):\n    field = nek.readnek(file)\n    u = np.array(\n        [\n            field.elem[i].vel[0, 0, j, k]\n            for i in range(nel)\n            for j in range(nGLL)\n            for k in range(nGLL)\n        ]\n    )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "get_vorticity",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def get_vorticity(file):\n    field = nek.readnek(file)\n    vort = np.array(\n        [\n            field.elem[i].temp[0, 0, j, k]\n            for i in range(nel)\n            for j in range(nGLL)\n            for k in range(nGLL)\n        ]\n    )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "interp",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def interp(\n    field, Cx, Cy, method=\"cubic\", mask=(np.sqrt(XX**2 + YY**2) < 0.5).flatten(\"C\")\n):\n    \"\"\"\n    field - 1D array of cell values\n    Cx, Cy - cell x-y values\n    X, Y - meshgrid x-y values\n    grid - if exists, should be an ngrid-dim logical that will be set to zer\n    \"\"\"\n    ngrid = len(XX.flatten())",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "plot_field",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def plot_field(field, clim=[-5, 5], label=None):\n    \"\"\"Plot cylinder field with masked circle\"\"\"\n    im = plt.imshow(\n        field,\n        cmap=\"RdBu\",\n        vmin=clim[0],\n        vmax=clim[1],\n        origin=\"lower\",\n        extent=[-5, 15, -5, 5],\n        interpolation=\"gaussian\",",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "galerkin_model",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def galerkin_model(a, L, Q):\n    \"\"\"RHS of POD-Galerkin model, for time integration\"\"\"\n    return (L @ a) + np.einsum(\"ijk,j,k->i\", Q, a, a)\n# Plot the SINDy trajectory, trapping region, and ellipsoid where Kdot >= 0\ndef trapping_region(r, x_test_pred, Xi, sindy_opt, filename):\n    # Need to compute A^S from the optimal m obtained from SINDy algorithm\n    opt_m = sindy_opt.m_history_[-1]\n    PL_tensor_unsym = sindy_opt.PL_unsym_\n    PL_tensor = sindy_opt.PL_\n    PQ_tensor = sindy_opt.PQ_",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "trapping_region",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def trapping_region(r, x_test_pred, Xi, sindy_opt, filename):\n    # Need to compute A^S from the optimal m obtained from SINDy algorithm\n    opt_m = sindy_opt.m_history_[-1]\n    PL_tensor_unsym = sindy_opt.PL_unsym_\n    PL_tensor = sindy_opt.PL_\n    PQ_tensor = sindy_opt.PQ_\n    mPQ = np.tensordot(opt_m, PQ_tensor, axes=([0], [0]))\n    P_tensor = PL_tensor - mPQ\n    As = np.tensordot(P_tensor, Xi, axes=([3, 2], [0, 1]))\n    eigvals, eigvecs = np.linalg.eigh(As)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "make_lissajou",
        "kind": 2,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "def make_lissajou(r, x_train, x_test, x_train_pred, x_test_pred, filename):\n    fig = plt.figure(figsize=(8, 8))\n    spec = gridspec.GridSpec(ncols=r, nrows=r, figure=fig, hspace=0.0, wspace=0.0)\n    for i in range(r):\n        for j in range(i, r):\n            plt.subplot(spec[i, j])\n            plt.plot(x_train[:, i], x_train[:, j], linewidth=1)\n            plt.plot(x_train_pred[:, i], x_train_pred[:, j], \"k--\", linewidth=1)\n            ax = plt.gca()\n            ax.set_xticks([])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "sindy_library",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "sindy_library = ps.PolynomialLibrary(include_bias=True)\nsindy_library_no_bias = ps.PolynomialLibrary(include_bias=False)\n# Initialize integrator keywords for solve_ivp to replicate the odeint defaults\nintegrator_keywords = {}\nintegrator_keywords[\"rtol\"] = 1e-15\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-10\n# Define constants for loading in Von Karman data\nnel = 2622  # Number of spectral elements\nnGLL = 7  # Order of the spectral mesh",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "sindy_library_no_bias",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "sindy_library_no_bias = ps.PolynomialLibrary(include_bias=False)\n# Initialize integrator keywords for solve_ivp to replicate the odeint defaults\nintegrator_keywords = {}\nintegrator_keywords[\"rtol\"] = 1e-15\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-10\n# Define constants for loading in Von Karman data\nnel = 2622  # Number of spectral elements\nnGLL = 7  # Order of the spectral mesh\n# define the objective function to be minimized by simulated annealing",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "integrator_keywords = {}\nintegrator_keywords[\"rtol\"] = 1e-15\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-10\n# Define constants for loading in Von Karman data\nnel = 2622  # Number of spectral elements\nnGLL = 7  # Order of the spectral mesh\n# define the objective function to be minimized by simulated annealing\ndef obj_function(m, L_obj, Q_obj, P_obj):\n    ens = EnstrophyMat(P_obj)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"rtol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "integrator_keywords[\"rtol\"] = 1e-15\nintegrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-10\n# Define constants for loading in Von Karman data\nnel = 2622  # Number of spectral elements\nnGLL = 7  # Order of the spectral mesh\n# define the objective function to be minimized by simulated annealing\ndef obj_function(m, L_obj, Q_obj, P_obj):\n    ens = EnstrophyMat(P_obj)\n    As = _create_A_symm(L_obj, 2 * Q_obj, m, ens)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"method\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "integrator_keywords[\"method\"] = \"LSODA\"\nintegrator_keywords[\"atol\"] = 1e-10\n# Define constants for loading in Von Karman data\nnel = 2622  # Number of spectral elements\nnGLL = 7  # Order of the spectral mesh\n# define the objective function to be minimized by simulated annealing\ndef obj_function(m, L_obj, Q_obj, P_obj):\n    ens = EnstrophyMat(P_obj)\n    As = _create_A_symm(L_obj, 2 * Q_obj, m, ens)\n    eigvals, eigvecs = np.linalg.eigh(As)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "integrator_keywords[\"atol\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "integrator_keywords[\"atol\"] = 1e-10\n# Define constants for loading in Von Karman data\nnel = 2622  # Number of spectral elements\nnGLL = 7  # Order of the spectral mesh\n# define the objective function to be minimized by simulated annealing\ndef obj_function(m, L_obj, Q_obj, P_obj):\n    ens = EnstrophyMat(P_obj)\n    As = _create_A_symm(L_obj, 2 * Q_obj, m, ens)\n    eigvals, eigvecs = np.linalg.eigh(As)\n    return eigvals[-1]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "nel",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "nel = 2622  # Number of spectral elements\nnGLL = 7  # Order of the spectral mesh\n# define the objective function to be minimized by simulated annealing\ndef obj_function(m, L_obj, Q_obj, P_obj):\n    ens = EnstrophyMat(P_obj)\n    As = _create_A_symm(L_obj, 2 * Q_obj, m, ens)\n    eigvals, eigvecs = np.linalg.eigh(As)\n    return eigvals[-1]\ndef get_trapping_radius(max_eigval, eps_Q, d):\n    x = Symbol(\"x\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "nGLL",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "nGLL = 7  # Order of the spectral mesh\n# define the objective function to be minimized by simulated annealing\ndef obj_function(m, L_obj, Q_obj, P_obj):\n    ens = EnstrophyMat(P_obj)\n    As = _create_A_symm(L_obj, 2 * Q_obj, m, ens)\n    eigvals, eigvecs = np.linalg.eigh(As)\n    return eigvals[-1]\ndef get_trapping_radius(max_eigval, eps_Q, d):\n    x = Symbol(\"x\")\n    delta = max_eigval**2 - 4 * eps_Q * np.linalg.norm(d, 2) / 3",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "nx",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "nx = 400\nny = 200\nxmesh = np.linspace(-5, 15, nx)\nymesh = np.linspace(-5, 5, ny)\nXX, YY = np.meshgrid(xmesh, ymesh)\n# Helper function for plotting the von Karman data\ndef interp(\n    field, Cx, Cy, method=\"cubic\", mask=(np.sqrt(XX**2 + YY**2) < 0.5).flatten(\"C\")\n):\n    \"\"\"",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "ny",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "ny = 200\nxmesh = np.linspace(-5, 15, nx)\nymesh = np.linspace(-5, 5, ny)\nXX, YY = np.meshgrid(xmesh, ymesh)\n# Helper function for plotting the von Karman data\ndef interp(\n    field, Cx, Cy, method=\"cubic\", mask=(np.sqrt(XX**2 + YY**2) < 0.5).flatten(\"C\")\n):\n    \"\"\"\n    field - 1D array of cell values",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "xmesh",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "xmesh = np.linspace(-5, 15, nx)\nymesh = np.linspace(-5, 5, ny)\nXX, YY = np.meshgrid(xmesh, ymesh)\n# Helper function for plotting the von Karman data\ndef interp(\n    field, Cx, Cy, method=\"cubic\", mask=(np.sqrt(XX**2 + YY**2) < 0.5).flatten(\"C\")\n):\n    \"\"\"\n    field - 1D array of cell values\n    Cx, Cy - cell x-y values",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "ymesh",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "description": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "peekOfCode": "ymesh = np.linspace(-5, 5, ny)\nXX, YY = np.meshgrid(xmesh, ymesh)\n# Helper function for plotting the von Karman data\ndef interp(\n    field, Cx, Cy, method=\"cubic\", mask=(np.sqrt(XX**2 + YY**2) < 0.5).flatten(\"C\")\n):\n    \"\"\"\n    field - 1D array of cell values\n    Cx, Cy - cell x-y values\n    X, Y - meshgrid x-y values",
        "detail": "pysindy.examples.8_trapping_sindy_examples.trapping_utils",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a = np.loadtxt(\"../data/vonKarman_pod/vonKarman_a.dat\")\nt = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\n# optionally reduce the resolution slightly for more algorithm speed later\ntbegin = 0\ntend = 3000\nskip = 1",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "t = a[:, 0]\nr = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\n# optionally reduce the resolution slightly for more algorithm speed later\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "r = 5\na_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\n# optionally reduce the resolution slightly for more algorithm speed later\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a_temp",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a_temp = a[:, 1:r]\na_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\n# optionally reduce the resolution slightly for more algorithm speed later\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a_temp",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a_temp = np.hstack((a_temp, a[:, -1].reshape(3000, 1)))\na = a_temp\n# optionally reduce the resolution slightly for more algorithm speed later\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a = a_temp\n# optionally reduce the resolution slightly for more algorithm speed later\ntbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "tbegin",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "tbegin = 0\ntend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# Build two Galerkin models, one in which the nonlinearity is as\n# calculated, and the other enforced to be exactly skew-symmetric.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "tend",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "tend = 3000\nskip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# Build two Galerkin models, one in which the nonlinearity is as\n# calculated, and the other enforced to be exactly skew-symmetric.\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "skip = 1\nt = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# Build two Galerkin models, one in which the nonlinearity is as\n# calculated, and the other enforced to be exactly skew-symmetric.\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q_ep\"] = (",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "t = t[tbegin:tend:skip]\na = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# Build two Galerkin models, one in which the nonlinearity is as\n# calculated, and the other enforced to be exactly skew-symmetric.\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q_ep\"] = (\n    gQ",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a = a[tbegin:tend:skip, :]\ndt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# Build two Galerkin models, one in which the nonlinearity is as\n# calculated, and the other enforced to be exactly skew-symmetric.\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q_ep\"] = (\n    gQ\n    - (",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "dt = t[1] - t[0]\n# define the POD-Galerkin models from Noack (2003)\ngalerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# Build two Galerkin models, one in which the nonlinearity is as\n# calculated, and the other enforced to be exactly skew-symmetric.\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q_ep\"] = (\n    gQ\n    - (\n        gQ",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin9",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin9 = sio.loadmat(\"../data/vonKarman_pod/galerkin9.mat\")\n# Build two Galerkin models, one in which the nonlinearity is as\n# calculated, and the other enforced to be exactly skew-symmetric.\ngQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q_ep\"] = (\n    gQ\n    - (\n        gQ\n        + np.transpose(gQ, [1, 0, 2])\n        + np.transpose(gQ, [2, 1, 0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "gQ",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "gQ = 0.5 * (galerkin9[\"Q\"] + np.transpose(galerkin9[\"Q\"], [0, 2, 1]))\ngalerkin9[\"Q_ep\"] = (\n    gQ\n    - (\n        gQ\n        + np.transpose(gQ, [1, 0, 2])\n        + np.transpose(gQ, [2, 1, 0])\n        + np.transpose(gQ, [0, 2, 1])\n        + np.transpose(gQ, [2, 0, 1])\n        + np.transpose(gQ, [1, 2, 0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin9[\"Q_ep\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin9[\"Q_ep\"] = (\n    gQ\n    - (\n        gQ\n        + np.transpose(gQ, [1, 0, 2])\n        + np.transpose(gQ, [2, 1, 0])\n        + np.transpose(gQ, [0, 2, 1])\n        + np.transpose(gQ, [2, 0, 1])\n        + np.transpose(gQ, [1, 2, 0])\n    )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "model9",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "model9 = lambda t, a: galerkin_model(a, galerkin9[\"L\"], galerkin9[\"Q\"])  # noqa: E731\nmodel9_ep = lambda t, a: galerkin_model(  # noqa: E731\n    a, galerkin9[\"L\"], galerkin9[\"Q_ep\"]\n)\n# Generate initial condition from unstable eigenvectors\n# lamb, Phi = np.linalg.eig(galerkin9['L'])\n# idx = np.argsort(-np.real(lamb))\n# lamb, Phi = lamb[idx], Phi[:, idx]\na0 = np.zeros(5)\na0[0] = 1e-3",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "model9_ep",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "model9_ep = lambda t, a: galerkin_model(  # noqa: E731\n    a, galerkin9[\"L\"], galerkin9[\"Q_ep\"]\n)\n# Generate initial condition from unstable eigenvectors\n# lamb, Phi = np.linalg.eig(galerkin9['L'])\n# idx = np.argsort(-np.real(lamb))\n# lamb, Phi = lamb[idx], Phi[:, idx]\na0 = np.zeros(5)\na0[0] = 1e-3\n# get the 5D POD-Galerkin coefficients",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a0",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a0 = np.zeros(5)\na0[0] = 1e-3\n# get the 5D POD-Galerkin coefficients\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\ngalerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a0[0]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a0[0] = 1e-3\n# get the 5D POD-Galerkin coefficients\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\ngalerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "inds5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "inds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\ngalerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin5 = {}\ngalerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\ngalerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin5[\"L\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin5[\"L\"] = galerkin9[\"L\"][inds5]\ninds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\ngalerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "inds5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "inds5 = np.ix_([0, 1, 2, 3, -1], [0, 1, 2, 3, -1], [0, 1, 2, 3, -1])\ngalerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\ngalerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = range(10)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin5[\"Q\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin5[\"Q\"] = galerkin9[\"Q\"][inds5]\ngalerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = range(10)\nplt.figure(figsize=(16, 16))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin5[\"Q_ep\"]",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin5[\"Q_ep\"] = galerkin9[\"Q_ep\"][inds5]\nmodel5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = range(10)\nplt.figure(figsize=(16, 16))\nfor i in range(r):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "model5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "model5 = lambda t, a: galerkin_model(a, galerkin5[\"L\"], galerkin5[\"Q\"])  # noqa: E731\n# make the 5D POD-Galerkin model trajectories\nt_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = range(10)\nplt.figure(figsize=(16, 16))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "t_span = (t[0], t[-1])\na_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = range(10)\nplt.figure(figsize=(16, 16))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a_galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a_galerkin5 = solve_ivp(model5, t_span, a0, t_eval=t, **integrator_keywords).y.T\nadot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = range(10)\nplt.figure(figsize=(16, 16))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(\n            \"DNS and POD-Galerkin models on first 4 POD modes + shift mode\", fontsize=16",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "adot_galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "adot_galerkin5 = np.gradient(a_galerkin5, axis=0) / (t[1] - t[0])\n# plot the first 4 POD modes + the shift mode\nmode_numbers = range(10)\nplt.figure(figsize=(16, 16))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(\n            \"DNS and POD-Galerkin models on first 4 POD modes + shift mode\", fontsize=16\n        )",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mode_numbers",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mode_numbers = range(10)\nplt.figure(figsize=(16, 16))\nfor i in range(r):\n    plt.subplot(r, 1, i + 1)\n    if i == 0:\n        plt.title(\n            \"DNS and POD-Galerkin models on first 4 POD modes + shift mode\", fontsize=16\n        )\n    plt.plot(t, a[:, mode_numbers[i]], \"r\", label=\"POD from DNS\")\n    plt.plot(t, a_galerkin5[:, mode_numbers[i]], \"b\", linewidth=2, label=\"POD-5 model\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "field_path",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "field_path = \"../data/vonKarman_pod/cyl0.snapshot\"\nmode_path = \"../data/vonKarman_pod/pod_modes/\"\n# Read limit cycle flow field for grid points\nfield = nek.readnek(field_path)\nn = nel * nGLL**2\n# define cell values needed for the vorticity interpolation\nCx = np.array(\n    [\n        field.elem[i].pos[0, 0, j, k]\n        for i in range(nel)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mode_path",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mode_path = \"../data/vonKarman_pod/pod_modes/\"\n# Read limit cycle flow field for grid points\nfield = nek.readnek(field_path)\nn = nel * nGLL**2\n# define cell values needed for the vorticity interpolation\nCx = np.array(\n    [\n        field.elem[i].pos[0, 0, j, k]\n        for i in range(nel)\n        for j in range(nGLL)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "field",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "field = nek.readnek(field_path)\nn = nel * nGLL**2\n# define cell values needed for the vorticity interpolation\nCx = np.array(\n    [\n        field.elem[i].pos[0, 0, j, k]\n        for i in range(nel)\n        for j in range(nGLL)\n        for k in range(nGLL)\n    ]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "n = nel * nGLL**2\n# define cell values needed for the vorticity interpolation\nCx = np.array(\n    [\n        field.elem[i].pos[0, 0, j, k]\n        for i in range(nel)\n        for j in range(nGLL)\n        for k in range(nGLL)\n    ]\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Cx",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Cx = np.array(\n    [\n        field.elem[i].pos[0, 0, j, k]\n        for i in range(nel)\n        for j in range(nGLL)\n        for k in range(nGLL)\n    ]\n)\nCy = np.array(\n    [",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Cy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Cy = np.array(\n    [\n        field.elem[i].pos[1, 0, j, k]\n        for i in range(nel)\n        for j in range(nGLL)\n        for k in range(nGLL)\n    ]\n)\nfilename = lambda t_idx: \"cyl0.f{0:05d}\".format(t_idx)  # noqa: E731\n# plot mean + leading POD modes",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "filename = lambda t_idx: \"cyl0.f{0:05d}\".format(t_idx)  # noqa: E731\n# plot mean + leading POD modes\nclim = [-1, 1]\nfile_order = [1, 2, 3, 4, 5, 10]\nfile_labels = [\"Mean field\", \"Mode 1\", \"Mode 2\", \"Mode 3\", \"Mode 4\", \"Shift mode\"]\n# Plot the vorticity fields as we load them in\nfig = plt.figure(figsize=(10, 8))\nspec = gridspec.GridSpec(ncols=2, nrows=3, figure=fig, hspace=0.0, wspace=0.0)\nu_list = []\nv_list = []",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "clim",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "clim = [-1, 1]\nfile_order = [1, 2, 3, 4, 5, 10]\nfile_labels = [\"Mean field\", \"Mode 1\", \"Mode 2\", \"Mode 3\", \"Mode 4\", \"Shift mode\"]\n# Plot the vorticity fields as we load them in\nfig = plt.figure(figsize=(10, 8))\nspec = gridspec.GridSpec(ncols=2, nrows=3, figure=fig, hspace=0.0, wspace=0.0)\nu_list = []\nv_list = []\nvorticities = []\nvorticities_flat = []",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "file_order",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "file_order = [1, 2, 3, 4, 5, 10]\nfile_labels = [\"Mean field\", \"Mode 1\", \"Mode 2\", \"Mode 3\", \"Mode 4\", \"Shift mode\"]\n# Plot the vorticity fields as we load them in\nfig = plt.figure(figsize=(10, 8))\nspec = gridspec.GridSpec(ncols=2, nrows=3, figure=fig, hspace=0.0, wspace=0.0)\nu_list = []\nv_list = []\nvorticities = []\nvorticities_flat = []\nfor i in range(len(file_order)):",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "file_labels",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "file_labels = [\"Mean field\", \"Mode 1\", \"Mode 2\", \"Mode 3\", \"Mode 4\", \"Shift mode\"]\n# Plot the vorticity fields as we load them in\nfig = plt.figure(figsize=(10, 8))\nspec = gridspec.GridSpec(ncols=2, nrows=3, figure=fig, hspace=0.0, wspace=0.0)\nu_list = []\nv_list = []\nvorticities = []\nvorticities_flat = []\nfor i in range(len(file_order)):\n    plt.subplot(spec[i])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "fig = plt.figure(figsize=(10, 8))\nspec = gridspec.GridSpec(ncols=2, nrows=3, figure=fig, hspace=0.0, wspace=0.0)\nu_list = []\nv_list = []\nvorticities = []\nvorticities_flat = []\nfor i in range(len(file_order)):\n    plt.subplot(spec[i])\n    u, v = get_velocity(mode_path + filename(file_order[i]))\n    u_list.append(u)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "spec = gridspec.GridSpec(ncols=2, nrows=3, figure=fig, hspace=0.0, wspace=0.0)\nu_list = []\nv_list = []\nvorticities = []\nvorticities_flat = []\nfor i in range(len(file_order)):\n    plt.subplot(spec[i])\n    u, v = get_velocity(mode_path + filename(file_order[i]))\n    u_list.append(u)\n    v_list.append(v)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "u_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "u_list = []\nv_list = []\nvorticities = []\nvorticities_flat = []\nfor i in range(len(file_order)):\n    plt.subplot(spec[i])\n    u, v = get_velocity(mode_path + filename(file_order[i]))\n    u_list.append(u)\n    v_list.append(v)\n    vort = interp(get_vorticity(mode_path + filename(file_order[i])), Cx, Cy)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "v_list",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "v_list = []\nvorticities = []\nvorticities_flat = []\nfor i in range(len(file_order)):\n    plt.subplot(spec[i])\n    u, v = get_velocity(mode_path + filename(file_order[i]))\n    u_list.append(u)\n    v_list.append(v)\n    vort = interp(get_vorticity(mode_path + filename(file_order[i])), Cx, Cy)\n    vorticities.append(np.reshape(vort, [nx, ny], order=\"F\").T)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "vorticities",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "vorticities = []\nvorticities_flat = []\nfor i in range(len(file_order)):\n    plt.subplot(spec[i])\n    u, v = get_velocity(mode_path + filename(file_order[i]))\n    u_list.append(u)\n    v_list.append(v)\n    vort = interp(get_vorticity(mode_path + filename(file_order[i])), Cx, Cy)\n    vorticities.append(np.reshape(vort, [nx, ny], order=\"F\").T)\n    vorticities_flat.append(get_vorticity(mode_path + filename(file_order[i])))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "vorticities_flat",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "vorticities_flat = []\nfor i in range(len(file_order)):\n    plt.subplot(spec[i])\n    u, v = get_velocity(mode_path + filename(file_order[i]))\n    u_list.append(u)\n    v_list.append(v)\n    vort = interp(get_vorticity(mode_path + filename(file_order[i])), Cx, Cy)\n    vorticities.append(np.reshape(vort, [nx, ny], order=\"F\").T)\n    vorticities_flat.append(get_vorticity(mode_path + filename(file_order[i])))\n    plot_field(np.reshape(vort, [nx, ny], order=\"F\").T, clim=clim, label=file_labels[i])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mass_matrix",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mass_matrix = np.loadtxt(\"../data/vonKarman_pod/pod_modes/mass_matrix.dat\")\nip1 = lambda a, b: np.dot(mass_matrix * a, b)  # noqa: E731\nip2 = lambda a, b, c, d: np.dot(a * mass_matrix, c) + np.dot(  # noqa: E731\n    b * mass_matrix, d\n)\nenergy_integrals = np.zeros((6, 6))\nenstrophy_integrals = np.zeros((6, 6))\nfor i, wi in enumerate(vorticities_flat):\n    for j, wj in enumerate(vorticities_flat):\n        if i == 0:",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "ip1",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "ip1 = lambda a, b: np.dot(mass_matrix * a, b)  # noqa: E731\nip2 = lambda a, b, c, d: np.dot(a * mass_matrix, c) + np.dot(  # noqa: E731\n    b * mass_matrix, d\n)\nenergy_integrals = np.zeros((6, 6))\nenstrophy_integrals = np.zeros((6, 6))\nfor i, wi in enumerate(vorticities_flat):\n    for j, wj in enumerate(vorticities_flat):\n        if i == 0:\n            enstrophy_integrals[i, j] = ip2(u_list[i], v_list[i], wj, wj)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "ip2",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "ip2 = lambda a, b, c, d: np.dot(a * mass_matrix, c) + np.dot(  # noqa: E731\n    b * mass_matrix, d\n)\nenergy_integrals = np.zeros((6, 6))\nenstrophy_integrals = np.zeros((6, 6))\nfor i, wi in enumerate(vorticities_flat):\n    for j, wj in enumerate(vorticities_flat):\n        if i == 0:\n            enstrophy_integrals[i, j] = ip2(u_list[i], v_list[i], wj, wj)\n        else:",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "energy_integrals",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "energy_integrals = np.zeros((6, 6))\nenstrophy_integrals = np.zeros((6, 6))\nfor i, wi in enumerate(vorticities_flat):\n    for j, wj in enumerate(vorticities_flat):\n        if i == 0:\n            enstrophy_integrals[i, j] = ip2(u_list[i], v_list[i], wj, wj)\n        else:\n            enstrophy_integrals[i, j] = ip1(wi, wj)\n        energy_integrals[i, j] = ip2(u_list[i], v_list[i], u_list[j], v_list[j])\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "enstrophy_integrals",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "enstrophy_integrals = np.zeros((6, 6))\nfor i, wi in enumerate(vorticities_flat):\n    for j, wj in enumerate(vorticities_flat):\n        if i == 0:\n            enstrophy_integrals[i, j] = ip2(u_list[i], v_list[i], wj, wj)\n        else:\n            enstrophy_integrals[i, j] = ip1(wi, wj)\n        energy_integrals[i, j] = ip2(u_list[i], v_list[i], u_list[j], v_list[j])\n# %% [markdown]\n# Do some checks to make sure energy eigenvalues and enstrophy eigenvalues make sense (energy eigenvalues should be identitity because we are using the eigenbasis of energy, and enstrophy eigenvalues should be positive since enstrophy is by construction a positive definite quantity).",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "P_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "P_energy = energy_integrals[1:, 1:]\neigs_energy, eigvecs_energy = np.linalg.eigh(P_energy)\nprint(eigs_energy)\n# Compute the enstrophy eigenvalues\nP_enstrophy = enstrophy_integrals[1:, 1:]\neigs_enstrophy, eigvecs_enstrophy = np.linalg.eigh(P_enstrophy)\nprint(eigs_enstrophy)\n# Define the linear part of the model,\n# rotated into the eigenbasis of enstrophy\nL_enstrophy = np.dot(P_enstrophy, galerkin5[\"L\"])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "P_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "P_enstrophy = enstrophy_integrals[1:, 1:]\neigs_enstrophy, eigvecs_enstrophy = np.linalg.eigh(P_enstrophy)\nprint(eigs_enstrophy)\n# Define the linear part of the model,\n# rotated into the eigenbasis of enstrophy\nL_enstrophy = np.dot(P_enstrophy, galerkin5[\"L\"])\n# %% [markdown]\n# ### Check global stability of the POD-Galerkin models\n#  Okay, so we have loaded in some DNS data from the von Karman Street and generated (analytic) 5D POD-Galerkin models for this system. The skew-symmetric models below are globally stable *if and only if* there exists a vector $\\mathbf{m}$ such that following matrix is negative definite:\n#  $$A^S_{ij} = L^S_{ij} + (Q_{ijk} + Q_{jik})m_k.$$",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "L_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "L_enstrophy = np.dot(P_enstrophy, galerkin5[\"L\"])\n# %% [markdown]\n# ### Check global stability of the POD-Galerkin models\n#  Okay, so we have loaded in some DNS data from the von Karman Street and generated (analytic) 5D POD-Galerkin models for this system. The skew-symmetric models below are globally stable *if and only if* there exists a vector $\\mathbf{m}$ such that following matrix is negative definite:\n#  $$A^S_{ij} = L^S_{ij} + (Q_{ijk} + Q_{jik})m_k.$$\n#  Note that if the quadratic term $Q_{ijk}$ has no totally-symmetric part this is equal to\n#  $$A^S_{ij} = L^S_{ij} - Q_{kij}m_k.$$\n#  A negative definite $\\mathbf{A}^S$ turns out to also be necessary when $Q_{ijk}$ does have nontrivial totally symmetric component, but in this case is not sufficient for global boundedness and we can promote local stability as in the trapping_extended.ipynb notebook.\n#\n#  Next we check with a simple nonlinear algorithm (simulated annealing) that our analytic models can be shown to be globally stable (there is an $\\mathbf{m}$ such that $\\mathbf{A}^S$ is negative definite) using both the energy or the enstrophy to construct $\\mathbf{A}^S$.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "boundvals",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "boundvals = np.zeros((r, 2))\nboundmax = 10\nboundmin = -10\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\nLs_enstrophy = 0.5 * (L_enstrophy + L_enstrophy.T)\nLs = 0.5 * (galerkin5[\"L\"] + galerkin5[\"L\"].T)\n# Run simulated annealing for the enstrophy eigenbasis\nalgo_sol = anneal_algo(\n    obj_function,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "boundmax",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "boundmax = 10\nboundmin = -10\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\nLs_enstrophy = 0.5 * (L_enstrophy + L_enstrophy.T)\nLs = 0.5 * (galerkin5[\"L\"] + galerkin5[\"L\"].T)\n# Run simulated annealing for the enstrophy eigenbasis\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "boundmin",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "boundmin = -10\nboundvals[:, 0] = boundmin\nboundvals[:, 1] = boundmax\nLs_enstrophy = 0.5 * (L_enstrophy + L_enstrophy.T)\nLs = 0.5 * (galerkin5[\"L\"] + galerkin5[\"L\"].T)\n# Run simulated annealing for the enstrophy eigenbasis\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,\n    args=(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Ls_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Ls_enstrophy = 0.5 * (L_enstrophy + L_enstrophy.T)\nLs = 0.5 * (galerkin5[\"L\"] + galerkin5[\"L\"].T)\n# Run simulated annealing for the enstrophy eigenbasis\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,\n    args=(\n        galerkin5[\"L\"],\n        galerkin5[\"Q_ep\"],\n        P_enstrophy,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Ls",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Ls = 0.5 * (galerkin5[\"L\"] + galerkin5[\"L\"].T)\n# Run simulated annealing for the enstrophy eigenbasis\nalgo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,\n    args=(\n        galerkin5[\"L\"],\n        galerkin5[\"Q_ep\"],\n        P_enstrophy,\n    ),  # Factors of P_enstrophy taken care of in obj_func",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "algo_sol",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "algo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,\n    args=(\n        galerkin5[\"L\"],\n        galerkin5[\"Q_ep\"],\n        P_enstrophy,\n    ),  # Factors of P_enstrophy taken care of in obj_func\n    maxiter=200,\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "opt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Enstrophy model result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "opt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Enstrophy model result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)\n# Repeat using the energy",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_result",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "opt_result = algo_sol.message\nprint(\"Enstrophy model result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)\n# Repeat using the energy\nalgo_sol = anneal_algo(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "algo_sol",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "algo_sol = anneal_algo(\n    obj_function,\n    bounds=boundvals,\n    args=(galerkin5[\"L\"], galerkin5[\"Q_ep\"], P_energy),\n    maxiter=1000,\n)\nopt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Energy model result:\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "opt_m = algo_sol.x\nopt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Energy model result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "opt_energy = algo_sol.fun\nopt_result = algo_sol.message\nprint(\"Energy model result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "opt_result",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "opt_result = algo_sol.message\nprint(\"Energy model result:\")\nprint(\"Optimal m = \", opt_m)\nprint(\n    \"Algorithm managed to reduce the largest eigenvalue of A^S to eig1 = \",\n    opt_energy,\n    \"\\n\",\n)\n# %% [markdown]\n# #### We have proven that both the models, with totally symmetric quadratic tensors, are globally stable.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "N = 500\nalphas = np.linspace(0, 20, N)\nr = 5\nm = np.zeros(r)\n# m[:-1] = [4.40596938e-04, 2.68248063e-04, 1.44130186e-01, 4.11438479e-02]\nm_enstrophy = np.zeros(r)\n# m_enstrophy[:-1] = [5.99535702e-04, -1.32512857e-04,  1.15691624e-01,  1.80317529e-02]\nobj_energy = np.zeros(N)\nobj_enstrophy = np.zeros(N)\nRm_energy = np.zeros(N)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "alphas",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "alphas = np.linspace(0, 20, N)\nr = 5\nm = np.zeros(r)\n# m[:-1] = [4.40596938e-04, 2.68248063e-04, 1.44130186e-01, 4.11438479e-02]\nm_enstrophy = np.zeros(r)\n# m_enstrophy[:-1] = [5.99535702e-04, -1.32512857e-04,  1.15691624e-01,  1.80317529e-02]\nobj_energy = np.zeros(N)\nobj_enstrophy = np.zeros(N)\nRm_energy = np.zeros(N)\nRm_enstrophy = np.zeros(N)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "r = 5\nm = np.zeros(r)\n# m[:-1] = [4.40596938e-04, 2.68248063e-04, 1.44130186e-01, 4.11438479e-02]\nm_enstrophy = np.zeros(r)\n# m_enstrophy[:-1] = [5.99535702e-04, -1.32512857e-04,  1.15691624e-01,  1.80317529e-02]\nobj_energy = np.zeros(N)\nobj_enstrophy = np.zeros(N)\nRm_energy = np.zeros(N)\nRm_enstrophy = np.zeros(N)\n# Extract maximum and minimum eigenvalues,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "m = np.zeros(r)\n# m[:-1] = [4.40596938e-04, 2.68248063e-04, 1.44130186e-01, 4.11438479e-02]\nm_enstrophy = np.zeros(r)\n# m_enstrophy[:-1] = [5.99535702e-04, -1.32512857e-04,  1.15691624e-01,  1.80317529e-02]\nobj_energy = np.zeros(N)\nobj_enstrophy = np.zeros(N)\nRm_energy = np.zeros(N)\nRm_enstrophy = np.zeros(N)\n# Extract maximum and minimum eigenvalues,\n# and compute radius of the trapping region",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "m_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "m_enstrophy = np.zeros(r)\n# m_enstrophy[:-1] = [5.99535702e-04, -1.32512857e-04,  1.15691624e-01,  1.80317529e-02]\nobj_energy = np.zeros(N)\nobj_enstrophy = np.zeros(N)\nRm_energy = np.zeros(N)\nRm_enstrophy = np.zeros(N)\n# Extract maximum and minimum eigenvalues,\n# and compute radius of the trapping region\nmax_eig_energy = np.sort(eigs_energy)[-1]\nmax_eig_enstrophy = np.sort(eigs_enstrophy)[-1]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "obj_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "obj_energy = np.zeros(N)\nobj_enstrophy = np.zeros(N)\nRm_energy = np.zeros(N)\nRm_enstrophy = np.zeros(N)\n# Extract maximum and minimum eigenvalues,\n# and compute radius of the trapping region\nmax_eig_energy = np.sort(eigs_energy)[-1]\nmax_eig_enstrophy = np.sort(eigs_enstrophy)[-1]\nfor i, alpha in enumerate(alphas):\n    m[-1] = alpha",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "obj_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "obj_enstrophy = np.zeros(N)\nRm_energy = np.zeros(N)\nRm_enstrophy = np.zeros(N)\n# Extract maximum and minimum eigenvalues,\n# and compute radius of the trapping region\nmax_eig_energy = np.sort(eigs_energy)[-1]\nmax_eig_enstrophy = np.sort(eigs_enstrophy)[-1]\nfor i, alpha in enumerate(alphas):\n    m[-1] = alpha\n    m_enstrophy[-1] = alpha",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Rm_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Rm_energy = np.zeros(N)\nRm_enstrophy = np.zeros(N)\n# Extract maximum and minimum eigenvalues,\n# and compute radius of the trapping region\nmax_eig_energy = np.sort(eigs_energy)[-1]\nmax_eig_enstrophy = np.sort(eigs_enstrophy)[-1]\nfor i, alpha in enumerate(alphas):\n    m[-1] = alpha\n    m_enstrophy[-1] = alpha\n    obj_energy[i] = obj_function(m, Ls, galerkin5[\"Q_ep\"], P_energy)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Rm_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Rm_enstrophy = np.zeros(N)\n# Extract maximum and minimum eigenvalues,\n# and compute radius of the trapping region\nmax_eig_energy = np.sort(eigs_energy)[-1]\nmax_eig_enstrophy = np.sort(eigs_enstrophy)[-1]\nfor i, alpha in enumerate(alphas):\n    m[-1] = alpha\n    m_enstrophy[-1] = alpha\n    obj_energy[i] = obj_function(m, Ls, galerkin5[\"Q_ep\"], P_energy)\n    obj_enstrophy[i] = obj_function(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_eig_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "max_eig_energy = np.sort(eigs_energy)[-1]\nmax_eig_enstrophy = np.sort(eigs_enstrophy)[-1]\nfor i, alpha in enumerate(alphas):\n    m[-1] = alpha\n    m_enstrophy[-1] = alpha\n    obj_energy[i] = obj_function(m, Ls, galerkin5[\"Q_ep\"], P_energy)\n    obj_enstrophy[i] = obj_function(\n        m_enstrophy, galerkin5[\"L\"], galerkin5[\"Q_ep\"], P_enstrophy\n    )\n    d_energy = np.dot(galerkin5[\"L\"], m) + np.dot(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_eig_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "max_eig_enstrophy = np.sort(eigs_enstrophy)[-1]\nfor i, alpha in enumerate(alphas):\n    m[-1] = alpha\n    m_enstrophy[-1] = alpha\n    obj_energy[i] = obj_function(m, Ls, galerkin5[\"Q_ep\"], P_energy)\n    obj_enstrophy[i] = obj_function(\n        m_enstrophy, galerkin5[\"L\"], galerkin5[\"Q_ep\"], P_enstrophy\n    )\n    d_energy = np.dot(galerkin5[\"L\"], m) + np.dot(\n        np.tensordot(galerkin5[\"Q_ep\"], m, axes=([2], [0])), m",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin_ep",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin_ep = (\n    gQ\n    + np.transpose(gQ, [1, 0, 2])\n    + np.transpose(gQ, [2, 1, 0])\n    + np.transpose(gQ, [0, 2, 1])\n    + np.transpose(gQ, [2, 0, 1])\n    + np.transpose(gQ, [1, 2, 0])\n) / 6.0\nprint(np.max(abs(galerkin_ep)))\ngQ_enstrophy = enstrophy_integrals[1:, 1:] @ gQ[inds5]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "gQ_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "gQ_enstrophy = enstrophy_integrals[1:, 1:] @ gQ[inds5]\ngalerkin_ep = (\n    gQ_enstrophy\n    + np.transpose(gQ_enstrophy, [1, 0, 2])\n    + np.transpose(gQ_enstrophy, [2, 1, 0])\n    + np.transpose(gQ_enstrophy, [0, 2, 1])\n    + np.transpose(gQ_enstrophy, [2, 0, 1])\n    + np.transpose(gQ_enstrophy, [1, 2, 0])\n) / 6.0\nprint(np.max(abs(galerkin_ep)))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "galerkin_ep",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "galerkin_ep = (\n    gQ_enstrophy\n    + np.transpose(gQ_enstrophy, [1, 0, 2])\n    + np.transpose(gQ_enstrophy, [2, 1, 0])\n    + np.transpose(gQ_enstrophy, [0, 2, 1])\n    + np.transpose(gQ_enstrophy, [2, 0, 1])\n    + np.transpose(gQ_enstrophy, [1, 2, 0])\n) / 6.0\nprint(np.max(abs(galerkin_ep)))\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "max_iter = 10000\neta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "eta = 1.0\n# don't need a reg_weight_lam if eta is sufficiently small\n# which is good news because CVXPY is much slower\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "reg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "alpha_m = 1e-1 * eta\n# run trapping SINDy\nsindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    verbose=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    verbose=True,\n)\nmodel = ps.SINDy(",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library_no_bias,\n    differentiation_method=ps.FiniteDifference(drop_endpoints=True),\n)\nmodel.fit(a, t=t)\nXi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# %% [markdown]\n# The previous model finds an $\\mathbf{m}$ such that $\\mathbf{A}^S$ is negative definite, while also fitting the data. Now we can repeat but in the eigenbasis of enstrophy. If the enstrophy is $H = \\mathbf{y}^T\\mathcal{P}\\mathbf{A}^S \\mathbf{y}$, now we are searching for an $\\mathbf{m}$ such that $\\mathcal{P}\\mathbf{A}^S$ is negative definite.\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# %% [markdown]\n# The previous model finds an $\\mathbf{m}$ such that $\\mathbf{A}^S$ is negative definite, while also fitting the data. Now we can repeat but in the eigenbasis of enstrophy. If the enstrophy is $H = \\mathbf{y}^T\\mathcal{P}\\mathbf{A}^S \\mathbf{y}$, now we are searching for an $\\mathbf{m}$ such that $\\mathcal{P}\\mathbf{A}^S$ is negative definite.\n# %%\nmax_iter = 2000",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nL = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# %% [markdown]\n# The previous model finds an $\\mathbf{m}$ such that $\\mathbf{A}^S$ is negative definite, while also fitting the data. Now we can repeat but in the eigenbasis of enstrophy. If the enstrophy is $H = \\mathbf{y}^T\\mathcal{P}\\mathbf{A}^S \\mathbf{y}$, now we are searching for an $\\mathbf{m}$ such that $\\mathcal{P}\\mathbf{A}^S$ is negative definite.\n# %%\nmax_iter = 2000\neta = 1.0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "L = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQ = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# %% [markdown]\n# The previous model finds an $\\mathbf{m}$ such that $\\mathbf{A}^S$ is negative definite, while also fitting the data. Now we can repeat but in the eigenbasis of enstrophy. If the enstrophy is $H = \\mathbf{y}^T\\mathcal{P}\\mathbf{A}^S \\mathbf{y}$, now we are searching for an $\\mathbf{m}$ such that $\\mathcal{P}\\mathbf{A}^S$ is negative definite.\n# %%\nmax_iter = 2000\neta = 1.0\nreg_weight_lam = 0",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Q = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# %% [markdown]\n# The previous model finds an $\\mathbf{m}$ such that $\\mathbf{A}^S$ is negative definite, while also fitting the data. Now we can repeat but in the eigenbasis of enstrophy. If the enstrophy is $H = \\mathbf{y}^T\\mathcal{P}\\mathbf{A}^S \\mathbf{y}$, now we are searching for an $\\mathbf{m}$ such that $\\mathcal{P}\\mathbf{A}^S$ is negative definite.\n# %%\nmax_iter = 2000\neta = 1.0\nreg_weight_lam = 0\nalpha_m = 1e-2 * eta",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Max deviation from the constraints = \", Q_sum)\n# %% [markdown]\n# The previous model finds an $\\mathbf{m}$ such that $\\mathbf{A}^S$ is negative definite, while also fitting the data. Now we can repeat but in the eigenbasis of enstrophy. If the enstrophy is $H = \\mathbf{y}^T\\mathcal{P}\\mathbf{A}^S \\mathbf{y}$, now we are searching for an $\\mathbf{m}$ such that $\\mathcal{P}\\mathbf{A}^S$ is negative definite.\n# %%\nmax_iter = 2000\neta = 1.0\nreg_weight_lam = 0\nalpha_m = 1e-2 * eta\nmod_matrix = enstrophy_integrals[1:, 1:]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "max_iter = 2000\neta = 1.0\nreg_weight_lam = 0\nalpha_m = 1e-2 * eta\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "eta = 1.0\nreg_weight_lam = 0\nalpha_m = 1e-2 * eta\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "reg_weight_lam = 0\nalpha_m = 1e-2 * eta\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "alpha_m = 1e-2 * eta\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mod_matrix",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    mod_matrix=mod_matrix,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"global\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    alpha_m=alpha_m,\n    max_iter=max_iter,\n    mod_matrix=mod_matrix,\n    verbose=True,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library_no_bias,\n)\nmodel.fit(a, t=t)\nXi = model.coefficients().T\nLenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nLenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\n# Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\n# print(\"Maximum deviation from the constraints = \", Q_sum)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Lenstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Lenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\n# Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\n# print(\"Maximum deviation from the constraints = \", Q_sum)\nmake_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Qenstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Qenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\n# Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\n# print(\"Maximum deviation from the constraints = \", Q_sum)\nmake_progress_plots(r, sindy_opt)\n# %% [markdown]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\n# Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\n# print(\"Maximum deviation from the constraints = \", Q_sum)\nmake_progress_plots(r, sindy_opt)\n# %% [markdown]\n# Enstrophy model was successful!",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\n# Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\n# print(\"Maximum deviation from the constraints = \", Q_sum)\nmake_progress_plots(r, sindy_opt)\n# %% [markdown]\n# Enstrophy model was successful!\n#  #### We have built two data-driven models, one using the energy as a Lyapunov function for trapping SINDy, and the other using the enstrophy. Now we compare the distribution of coefficients in each model.",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "enstrophy_model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "enstrophy_model = model\n# Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\n# Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\n# print(\"Maximum deviation from the constraints = \", Q_sum)\nmake_progress_plots(r, sindy_opt)\n# %% [markdown]\n# Enstrophy model was successful!\n#  #### We have built two data-driven models, one using the energy as a Lyapunov function for trapping SINDy, and the other using the enstrophy. Now we compare the distribution of coefficients in each model.\n# %%\nmake_bar(galerkin5, L, Q, Lenstrophy, Qenstrophy)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "t_traj",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "t_traj = np.linspace(t[0], t[-1], len(t) * 1)\n# simulate trapping SINDy results\nxtraj_energy = model.simulate(a0, t_traj)\nxtraj_enstrophy = enstrophy_model.simulate(a0, t_traj)\n# simulate and plot 5D von Karman trajectory results\nt_span = (t_traj[0], t_traj[-1])\nxtraj_pod9 = solve_ivp(model5, t_span, a0, t_eval=t_traj, **integrator_keywords).y.T\n# Make awesome plot\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\ndata = [",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "xtraj_energy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "xtraj_energy = model.simulate(a0, t_traj)\nxtraj_enstrophy = enstrophy_model.simulate(a0, t_traj)\n# simulate and plot 5D von Karman trajectory results\nt_span = (t_traj[0], t_traj[-1])\nxtraj_pod9 = solve_ivp(model5, t_span, a0, t_eval=t_traj, **integrator_keywords).y.T\n# Make awesome plot\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\ndata = [\n    a[:, [0, 1, -1]],\n    xtraj_energy[:, [0, 1, -1]],",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "xtraj_enstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "xtraj_enstrophy = enstrophy_model.simulate(a0, t_traj)\n# simulate and plot 5D von Karman trajectory results\nt_span = (t_traj[0], t_traj[-1])\nxtraj_pod9 = solve_ivp(model5, t_span, a0, t_eval=t_traj, **integrator_keywords).y.T\n# Make awesome plot\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\ndata = [\n    a[:, [0, 1, -1]],\n    xtraj_energy[:, [0, 1, -1]],\n    a[:, [0, 1, -1]],",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "t_span",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "t_span = (t_traj[0], t_traj[-1])\nxtraj_pod9 = solve_ivp(model5, t_span, a0, t_eval=t_traj, **integrator_keywords).y.T\n# Make awesome plot\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\ndata = [\n    a[:, [0, 1, -1]],\n    xtraj_energy[:, [0, 1, -1]],\n    a[:, [0, 1, -1]],\n    xtraj_pod9[:, [0, 1, -1]],\n    a[:, [0, 1, -1]],",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "xtraj_pod9",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "xtraj_pod9 = solve_ivp(model5, t_span, a0, t_eval=t_traj, **integrator_keywords).y.T\n# Make awesome plot\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\ndata = [\n    a[:, [0, 1, -1]],\n    xtraj_energy[:, [0, 1, -1]],\n    a[:, [0, 1, -1]],\n    xtraj_pod9[:, [0, 1, -1]],\n    a[:, [0, 1, -1]],\n    xtraj_enstrophy[:, [0, 1, -1]],",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "data = [\n    a[:, [0, 1, -1]],\n    xtraj_energy[:, [0, 1, -1]],\n    a[:, [0, 1, -1]],\n    xtraj_pod9[:, [0, 1, -1]],\n    a[:, [0, 1, -1]],\n    xtraj_enstrophy[:, [0, 1, -1]],\n    a[:, [0, 1, 2]],\n    xtraj_energy[:, [0, 1, 2]],\n    a[:, [0, 1, 2]],",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "data_labels",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "data_labels = [\n    [r\"$a_1$\", r\"$a_2$\", r\"$a_{shift}$\"],\n    [r\"$a_1$\", r\"$a_2$\", r\"$a_3$\"],\n    [r\"$a_2$\", r\"$a_3$\", r\"$a_{shift}$\"],\n]\nfor i in range(3):\n    ax[i, 0].plot(\n        data[6 * i][:, 0],\n        data[6 * i][:, 1],\n        data[6 * i][:, 2],",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "max_iter",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "max_iter = 5000\neta = 1.0e4\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# alpha = 1e10\nbeta = 1e-10\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=5,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "eta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "eta = 1.0e4\nreg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# alpha = 1e10\nbeta = 1e-10\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=5,\n    _include_bias=False,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "reg_weight_lam",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "reg_weight_lam = 0\nalpha_m = 1e-1 * eta\n# alpha = 1e10\nbeta = 1e-10\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "alpha_m",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "alpha_m = 1e-1 * eta\n# alpha = 1e10\nbeta = 1e-10\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "beta",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "beta = 1e-10\nmod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    gamma=-1,\n    alpha_m=alpha_m,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mod_matrix",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mod_matrix = enstrophy_integrals[1:, 1:]\nsindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    gamma=-1,\n    alpha_m=alpha_m,\n    # alpha=alpha,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "sindy_opt",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "sindy_opt = ps.TrappingSR3(\n    method=\"local\",\n    _n_tgts=5,\n    _include_bias=False,\n    reg_weight_lam=reg_weight_lam,\n    eta=eta,\n    gamma=-1,\n    alpha_m=alpha_m,\n    # alpha=alpha,\n    beta=beta,",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "model = ps.SINDy(\n    optimizer=sindy_opt,\n    feature_library=sindy_library_no_bias,\n)\nmodel.fit(a, t=t)\nXi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Xi",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Xi = model.coefficients().T\nPL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "PL_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "PL_tensor = sindy_opt.PL_\nPQ_tensor = sindy_opt.PQ_\nLenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "PQ_tensor",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "PQ_tensor = sindy_opt.PQ_\nLenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Lenstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Lenstrophy = np.tensordot(PL_tensor, Xi, axes=([3, 2], [0, 1]))\nQenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Qenstrophy",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Qenstrophy = np.tensordot(PQ_tensor, Xi, axes=([4, 3], [0, 1]))\nmean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mean_val = np.mean(a, axis=0)\nmean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\n# %%",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "mean_val",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "mean_val = np.sqrt(np.sum(mean_val**2))\ncheck_local_stability(Xi, sindy_opt, mean_val)\nenstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\n# %%\nmake_progress_plots(r, sindy_opt)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "enstrophy_model",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "enstrophy_model = model\nQ = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\n# %%\nmake_progress_plots(r, sindy_opt)\n# %%\nfs = 18",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Q = np.tensordot(sindy_opt.PQ_, Xi, axes=([4, 3], [0, 1]))\nQ = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\n# %%\nmake_progress_plots(r, sindy_opt)\n# %%\nfs = 18\nt_traj = np.linspace(t[0], t[-1], len(t))  # * 2)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Q = np.tensordot(mod_matrix, Q, axes=([1], [0]))\nQ_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\n# %%\nmake_progress_plots(r, sindy_opt)\n# %%\nfs = 18\nt_traj = np.linspace(t[0], t[-1], len(t))  # * 2)\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "Q_sum",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "Q_sum = np.max(np.abs((Q + np.transpose(Q, [1, 2, 0]) + np.transpose(Q, [2, 0, 1]))))\nprint(\"Maximum deviation from the constraints = \", Q_sum)\nrhos_minus, rhos_plus = make_trap_progress_plots(r, sindy_opt)\n# %%\nmake_progress_plots(r, sindy_opt)\n# %%\nfs = 18\nt_traj = np.linspace(t[0], t[-1], len(t))  # * 2)\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\na0s = [(np.random.rand(5) - 0.5) * 20 for i in range(2)]",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "fs",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "fs = 18\nt_traj = np.linspace(t[0], t[-1], len(t))  # * 2)\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\na0s = [(np.random.rand(5) - 0.5) * 20 for i in range(2)]\nfor a0 in a0s:\n    print(a0)\n    # simulate trapping SINDy results\n    xtraj_energy = model.simulate(a0, t_traj)\n    xtraj_enstrophy = enstrophy_model.simulate(a0, t_traj)\n    # simulate and plot 5D von Karman trajectory results",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "t_traj",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "t_traj = np.linspace(t[0], t[-1], len(t))  # * 2)\nfig, ax = plt.subplots(3, 3, subplot_kw={\"projection\": \"3d\"}, figsize=(16, 16))\na0s = [(np.random.rand(5) - 0.5) * 20 for i in range(2)]\nfor a0 in a0s:\n    print(a0)\n    # simulate trapping SINDy results\n    xtraj_energy = model.simulate(a0, t_traj)\n    xtraj_enstrophy = enstrophy_model.simulate(a0, t_traj)\n    # simulate and plot 5D von Karman trajectory results\n    t_span = (t_traj[0], t_traj[-1])",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "a0s",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "a0s = [(np.random.rand(5) - 0.5) * 20 for i in range(2)]\nfor a0 in a0s:\n    print(a0)\n    # simulate trapping SINDy results\n    xtraj_energy = model.simulate(a0, t_traj)\n    xtraj_enstrophy = enstrophy_model.simulate(a0, t_traj)\n    # simulate and plot 5D von Karman trajectory results\n    t_span = (t_traj[0], t_traj[-1])\n    xtraj_pod9 = solve_ivp(model5, t_span, a0, t_eval=t_traj, **integrator_keywords).y.T\n    # Make awesome plot",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "E = np.sum(a**2, axis=1)\nE_galerkin5 = np.sum(xtraj_pod9**2, axis=1)\nE_sindy5 = np.sum(xtraj_energy**2, axis=1)\nE_sindy5_local = np.sum(xtraj_enstrophy**2, axis=1)\n# plot the energies\nplt.figure(figsize=(16, 4))\nplt.plot(t, E, \"r\", label=\"DNS\")\nplt.plot(t_traj, E_galerkin5, \"m\", label=\"POD-5\")\nplt.plot(t_traj, E_sindy5, \"k\", label=r\"SINDy-energy\")\nplt.plot(t_traj, E_sindy5_local, \"b\", label=r\"SINDy-enstrophy\")",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "E_galerkin5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "E_galerkin5 = np.sum(xtraj_pod9**2, axis=1)\nE_sindy5 = np.sum(xtraj_energy**2, axis=1)\nE_sindy5_local = np.sum(xtraj_enstrophy**2, axis=1)\n# plot the energies\nplt.figure(figsize=(16, 4))\nplt.plot(t, E, \"r\", label=\"DNS\")\nplt.plot(t_traj, E_galerkin5, \"m\", label=\"POD-5\")\nplt.plot(t_traj, E_sindy5, \"k\", label=r\"SINDy-energy\")\nplt.plot(t_traj, E_sindy5_local, \"b\", label=r\"SINDy-enstrophy\")\n# do some formatting and save",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "E_sindy5",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "E_sindy5 = np.sum(xtraj_energy**2, axis=1)\nE_sindy5_local = np.sum(xtraj_enstrophy**2, axis=1)\n# plot the energies\nplt.figure(figsize=(16, 4))\nplt.plot(t, E, \"r\", label=\"DNS\")\nplt.plot(t_traj, E_galerkin5, \"m\", label=\"POD-5\")\nplt.plot(t_traj, E_sindy5, \"k\", label=r\"SINDy-energy\")\nplt.plot(t_traj, E_sindy5_local, \"b\", label=r\"SINDy-enstrophy\")\n# do some formatting and save\nplt.legend(fontsize=22, loc=2)",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "E_sindy5_local",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "E_sindy5_local = np.sum(xtraj_enstrophy**2, axis=1)\n# plot the energies\nplt.figure(figsize=(16, 4))\nplt.plot(t, E, \"r\", label=\"DNS\")\nplt.plot(t_traj, E_galerkin5, \"m\", label=\"POD-5\")\nplt.plot(t_traj, E_sindy5, \"k\", label=r\"SINDy-energy\")\nplt.plot(t_traj, E_sindy5_local, \"b\", label=r\"SINDy-enstrophy\")\n# do some formatting and save\nplt.legend(fontsize=22, loc=2)\nplt.grid()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "description": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "peekOfCode": "ax = plt.gca()\nax.set_yticks([0, 10, 20])\nax.tick_params(axis=\"x\", labelsize=20)\nax.tick_params(axis=\"y\", labelsize=20)\nplt.ylabel(\"Total energy\", fontsize=20)\nplt.xlabel(\"t\", fontsize=20)\nplt.show()",
        "detail": "pysindy.examples.8_trapping_sindy_examples.von_karman_trapping_extended",
        "documentation": {}
    },
    {
        "label": "datalims",
        "kind": 6,
        "importPath": "pysindy.examples.data.vonKarman_pod.neksuite",
        "description": "pysindy.examples.data.vonKarman_pod.neksuite",
        "peekOfCode": "class datalims:\n    \"\"\"\n    datalims\n    A class containing the extrema of all quantities stored in the mesh\n    \"\"\"\n    def __init__(self, var):\n        self.pos = np.zeros((3, 2))\n        self.vel = np.zeros((3, 2))\n        self.pres = np.zeros((var[2], 2))\n        self.temp = np.zeros((var[3], 2))",
        "detail": "pysindy.examples.data.vonKarman_pod.neksuite",
        "documentation": {}
    },
    {
        "label": "elem",
        "kind": 6,
        "importPath": "pysindy.examples.data.vonKarman_pod.neksuite",
        "description": "pysindy.examples.data.vonKarman_pod.neksuite",
        "peekOfCode": "class elem:\n    \"\"\"\n    elem\n    A class containing one nek element/SIMSON flow field\n    \"\"\"\n    def __init__(self, var, lr1):\n        self.pos = np.zeros((3, lr1[2], lr1[1], lr1[0]))\n        self.curv = np.zeros((12, 1))\n        self.vel = np.zeros((3, lr1[2], lr1[1], lr1[0]))\n        self.pres = np.zeros((var[2], lr1[2], lr1[1], lr1[0]))",
        "detail": "pysindy.examples.data.vonKarman_pod.neksuite",
        "documentation": {}
    },
    {
        "label": "exadata",
        "kind": 6,
        "importPath": "pysindy.examples.data.vonKarman_pod.neksuite",
        "description": "pysindy.examples.data.vonKarman_pod.neksuite",
        "peekOfCode": "class exadata:\n    \"\"\"\n    data\n    A class containing data for reading/writing binary simulation files\n    \"\"\"\n    def __init__(self, ndim, nel, lr1, var):\n        self.ndim = ndim\n        self.nel = nel\n        self.ncurv = []\n        self.var = var",
        "detail": "pysindy.examples.data.vonKarman_pod.neksuite",
        "documentation": {}
    },
    {
        "label": "readnek",
        "kind": 2,
        "importPath": "pysindy.examples.data.vonKarman_pod.neksuite",
        "description": "pysindy.examples.data.vonKarman_pod.neksuite",
        "peekOfCode": "def readnek(fname):\n    \"\"\"\n    readnek\n    A function for reading binary data from the nek5000 binary format\n    input variable:\n    fname : file name\n    \"\"\"\n    try:\n        infile = open(fname, \"rb\")\n    except IOError as e:",
        "detail": "pysindy.examples.data.vonKarman_pod.neksuite",
        "documentation": {}
    },
    {
        "label": "notebook_dir",
        "kind": 5,
        "importPath": "pysindy.examples.publish_notebook",
        "description": "pysindy.examples.publish_notebook",
        "peekOfCode": "notebook_dir = Path(__file__).parent\nargparser = ArgumentParser(\n    description=\"Create and run a .ipynb file from a script named 'example.py'.\"\n)\nargparser.add_argument(\"target\", help=\"Directory containing example.py\")\ndef _create_kernel() -> str:\n    \"\"\"Create a IPython Kernel for the current executable.\"\"\"\n    kernel_name = __name__\n    app.launch_new_instance(argv=[\"install\", \"--user\", \"--name\", kernel_name])\n    return kernel_name",
        "detail": "pysindy.examples.publish_notebook",
        "documentation": {}
    },
    {
        "label": "argparser",
        "kind": 5,
        "importPath": "pysindy.examples.publish_notebook",
        "description": "pysindy.examples.publish_notebook",
        "peekOfCode": "argparser = ArgumentParser(\n    description=\"Create and run a .ipynb file from a script named 'example.py'.\"\n)\nargparser.add_argument(\"target\", help=\"Directory containing example.py\")\ndef _create_kernel() -> str:\n    \"\"\"Create a IPython Kernel for the current executable.\"\"\"\n    kernel_name = __name__\n    app.launch_new_instance(argv=[\"install\", \"--user\", \"--name\", kernel_name])\n    return kernel_name\nif __name__ == \"__main__\":",
        "detail": "pysindy.examples.publish_notebook",
        "documentation": {}
    },
    {
        "label": "SINDyEstimator",
        "kind": 6,
        "importPath": "pysindy.pysindy.deeptime.deeptime",
        "description": "pysindy.pysindy.deeptime.deeptime",
        "peekOfCode": "class SINDyEstimator(SINDy):\n    \"\"\"\n    Implementation of SINDy conforming to the API of a Deeptime\n    `Estimator \\\n    <https://deeptime-ml.github.io/api/generated/deeptime.base.Estimator.html>`_.\n    Parameters\n    ----------\n    optimizer : optimizer object, optional\n        Optimization method used to fit the SINDy model. This must be an object\n        extending :class:`pysindy.optimizers.BaseOptimizer`. Default is",
        "detail": "pysindy.pysindy.deeptime.deeptime",
        "documentation": {}
    },
    {
        "label": "SINDyModel",
        "kind": 6,
        "importPath": "pysindy.pysindy.deeptime.deeptime",
        "description": "pysindy.pysindy.deeptime.deeptime",
        "peekOfCode": "class SINDyModel(SINDy):\n    \"\"\"\n    Implementation of SINDy conforming to the API of a Deeptime\n    `Model <https://deeptime-ml.github.io/api/generated/deeptime.base.Model.html>`_.\n    The model is represented as a Scikit-learn pipeline object with three steps:\n    1. Map the raw input data to nonlinear features according to the selected\n    ``feature_library``\n    2. Reshape the data from input shape to an optimization problem\n    3. Multiply the nonlinear features with a coefficient matrix encapuslated\n    in ``optimizer``.",
        "detail": "pysindy.pysindy.deeptime.deeptime",
        "documentation": {}
    },
    {
        "label": "BaseDifferentiation",
        "kind": 6,
        "importPath": "pysindy.pysindy.differentiation.base",
        "description": "pysindy.pysindy.differentiation.base",
        "peekOfCode": "class BaseDifferentiation(BaseEstimator):\n    \"\"\"\n    Base class for differentiation methods.\n    Simply forces differentiation methods to implement a\n    ``_differentiate`` function.\n    Attributes:\n        smoothed_x_: Methods that smooth x before differentiating save\n            that value here.  Methods that do not simply save x here.\n    \"\"\"\n    def __init__(self):",
        "detail": "pysindy.pysindy.differentiation.base",
        "documentation": {}
    },
    {
        "label": "FiniteDifference",
        "kind": 6,
        "importPath": "pysindy.pysindy.differentiation.finite_difference",
        "description": "pysindy.pysindy.differentiation.finite_difference",
        "peekOfCode": "class FiniteDifference(BaseDifferentiation):\n    \"\"\"Finite difference derivatives.\n    Parameters\n    ----------\n    order: int, optional (default 2)\n        The order of the finite difference method to be used.\n        Currently only centered differences are implemented, for even order\n        and left-off-centered differences for odd order.\n    d : int, optional (default 1)\n        The order of derivative to take.  Must be positive integer.",
        "detail": "pysindy.pysindy.differentiation.finite_difference",
        "documentation": {}
    },
    {
        "label": "SINDyDerivative",
        "kind": 6,
        "importPath": "pysindy.pysindy.differentiation.sindy_derivative",
        "description": "pysindy.pysindy.differentiation.sindy_derivative",
        "peekOfCode": "class SINDyDerivative(BaseDifferentiation):\n    \"\"\"\n    Wrapper class for differentiation classes from the :doc:`derivative:index` package.\n    This class is meant to provide all the same functionality as the\n    `dxdt <https://derivative.readthedocs.io/en/latest/api.html\\\n        #derivative.differentiation.dxdt>`_ method.\n    This class also has ``_differentiate`` and ``__call__`` methods which are\n    used by PySINDy.\n    Parameters\n    ----------",
        "detail": "pysindy.pysindy.differentiation.sindy_derivative",
        "documentation": {}
    },
    {
        "label": "SmoothedFiniteDifference",
        "kind": 6,
        "importPath": "pysindy.pysindy.differentiation.smoothed_finite_difference",
        "description": "pysindy.pysindy.differentiation.smoothed_finite_difference",
        "peekOfCode": "class SmoothedFiniteDifference(FiniteDifference):\n    \"\"\"Smoothed finite difference derivatives.\n    Perform differentiation by smoothing input data then applying a finite\n    difference method.\n    Parameters\n    ----------\n    smoother: function, optional (default :code:`savgol_filter`)\n        Function to perform smoothing. Must be compatible with the\n        following call signature: :code:`x_smoothed = smoother(x, **smoother_kws)`\n    smoother_kws: dict, optional (default :code:`{}`)",
        "detail": "pysindy.pysindy.differentiation.smoothed_finite_difference",
        "documentation": {}
    },
    {
        "label": "SpectralDerivative",
        "kind": 6,
        "importPath": "pysindy.pysindy.differentiation.spectral_derivative",
        "description": "pysindy.pysindy.differentiation.spectral_derivative",
        "peekOfCode": "class SpectralDerivative(BaseDifferentiation):\n    \"\"\"Spectral derivatives.\n    Assumes uniform grid, and utilizes FFT to approximate a derivative.\n    Works well for derivatives in periodic dimensions.\n    Equivalent to a maximal-order finite difference, but runs in O(NlogN).\n    Parameters\n    ----------\n    d : int\n        The order of derivative to take\n    axis: int, optional (default 0)",
        "detail": "pysindy.pysindy.differentiation.spectral_derivative",
        "documentation": {}
    },
    {
        "label": "BaseFeatureLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.base",
        "description": "pysindy.pysindy.feature_library.base",
        "peekOfCode": "class BaseFeatureLibrary(TransformerMixin):\n    \"\"\"\n    Base class for feature libraries.\n    Forces subclasses to implement ``fit``, ``transform``,\n    and ``get_feature_names`` methods.\n    \"\"\"\n    def validate_input(self, x, *args, **kwargs):\n        return validate_no_reshape(x, *args, **kwargs)\n    def reshape_samples_to_spatial_grid(self, x: np.ndarray) -> AxesArray:\n        \"\"\"Adapt predictions to fitted spatial grid.\"\"\"",
        "detail": "pysindy.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "ConcatLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.base",
        "description": "pysindy.pysindy.feature_library.base",
        "peekOfCode": "class ConcatLibrary(BaseFeatureLibrary):\n    \"\"\"Concatenate multiple libraries into one library. All settings\n    provided to individual libraries will be applied.\n    Parameters\n    ----------\n    libraries : list of libraries\n        Library instances to be applied to the input matrix.\n    Attributes\n    ----------\n    n_features_in_ : int",
        "detail": "pysindy.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "TensoredLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.base",
        "description": "pysindy.pysindy.feature_library.base",
        "peekOfCode": "class TensoredLibrary(BaseFeatureLibrary):\n    \"\"\"Tensor multiple libraries together into one library. All settings\n    provided to individual libraries will be applied.\n    Parameters\n    ----------\n    libraries : list of libraries\n        Library instances to be applied to the input matrix.\n    inputs_per_library_ : Sequence of Sequences of ints (default None)\n        list that specifies which input indexes should be passed as\n        inputs for each of the individual feature libraries.",
        "detail": "pysindy.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "x_sequence_or_item",
        "kind": 2,
        "importPath": "pysindy.pysindy.feature_library.base",
        "description": "pysindy.pysindy.feature_library.base",
        "peekOfCode": "def x_sequence_or_item(wrapped_func):\n    \"\"\"Allow a feature library's method to handle list or item inputs.\"\"\"\n    @wraps(wrapped_func)\n    def func(self, x, *args, **kwargs):\n        if isinstance(x, Sequence):\n            if isinstance(x[0], jax.Array):\n                xs = x\n            else:\n                xs = [AxesArray(xi, comprehend_axes(xi)) for xi in x]\n            result = wrapped_func(self, xs, *args, **kwargs)",
        "detail": "pysindy.pysindy.feature_library.base",
        "documentation": {}
    },
    {
        "label": "CustomLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.custom_library",
        "description": "pysindy.pysindy.feature_library.custom_library",
        "peekOfCode": "class CustomLibrary(BaseFeatureLibrary):\n    \"\"\"Generate a library with custom functions.\n    Parameters\n    ----------\n    library_functions : list of mathematical functions\n        Functions to include in the library. Default is to use same functions\n        for all variables. Can also be used so that each variable has an\n        associated library, in this case library_functions is shape\n        (n_input_features, num_library_functions)\n    function_names : list of functions, optional (default None)",
        "detail": "pysindy.pysindy.feature_library.custom_library",
        "documentation": {}
    },
    {
        "label": "FourierLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.fourier_library",
        "description": "pysindy.pysindy.feature_library.fourier_library",
        "peekOfCode": "class FourierLibrary(BaseFeatureLibrary):\n    \"\"\"\n    Generate a library with trigonometric functions.\n    Parameters\n    ----------\n    n_frequencies : int, optional (default 1)\n        Number of frequencies to include in the library. The library will\n        include functions :math:`\\\\sin(x), \\\\sin(2x), \\\\dots\n        \\\\sin(n_{frequencies}x)` for each input feature :math:`x`\n        (depending on which of sine and/or cosine features are included).",
        "detail": "pysindy.pysindy.feature_library.fourier_library",
        "documentation": {}
    },
    {
        "label": "GeneralizedLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.generalized_library",
        "description": "pysindy.pysindy.feature_library.generalized_library",
        "peekOfCode": "class GeneralizedLibrary(BaseFeatureLibrary):\n    \"\"\"Put multiple libraries into one library. All settings\n    provided to individual libraries will be applied. Note that this class\n    allows one to specifically choose which input variables are used for\n    each library, and take tensor products of any pair of libraries. Tensored\n    libraries inherit the same input variables specified for the individual\n    libraries.\n    Parameters\n    ----------\n    libraries : list of libraries",
        "detail": "pysindy.pysindy.feature_library.generalized_library",
        "documentation": {}
    },
    {
        "label": "has_weak",
        "kind": 2,
        "importPath": "pysindy.pysindy.feature_library.generalized_library",
        "description": "pysindy.pysindy.feature_library.generalized_library",
        "peekOfCode": "def has_weak(lib):\n    if isinstance(lib, WeakPDELibrary):\n        return True\n    elif hasattr(lib, \"libraries_\"):\n        for lib_k in lib.libraries_:\n            if has_weak(lib_k):\n                return True\n    return False\ndef has_nonweak(lib):\n    if hasattr(lib, \"libraries_\"):",
        "detail": "pysindy.pysindy.feature_library.generalized_library",
        "documentation": {}
    },
    {
        "label": "has_nonweak",
        "kind": 2,
        "importPath": "pysindy.pysindy.feature_library.generalized_library",
        "description": "pysindy.pysindy.feature_library.generalized_library",
        "peekOfCode": "def has_nonweak(lib):\n    if hasattr(lib, \"libraries_\"):\n        for lib_k in lib.libraries_:\n            if has_nonweak(lib_k):\n                return True\n    elif not isinstance(lib, WeakPDELibrary):\n        return True\n    return False",
        "detail": "pysindy.pysindy.feature_library.generalized_library",
        "documentation": {}
    },
    {
        "label": "ParameterizedLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.parameterized_library",
        "description": "pysindy.pysindy.feature_library.parameterized_library",
        "peekOfCode": "class ParameterizedLibrary(GeneralizedLibrary):\n    \"\"\"A tensor product of two libraries with different inputs.\n    Typically, this is a feature library of the input data and a\n    parameter library of input control, making the SINDyCP method.  If\n    the input libraries are weak, the temporal derivatives are\n    automatically rescaled by the appropriate domain volumes.\n    Parameters\n    ----------\n    parameter_library : BaseFeatureLibrary, optional (default PolynomialLibrary).\n    Specifies the library function to apply to the input control features.",
        "detail": "pysindy.pysindy.feature_library.parameterized_library",
        "documentation": {}
    },
    {
        "label": "PDELibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.pde_library",
        "description": "pysindy.pysindy.feature_library.pde_library",
        "peekOfCode": "class PDELibrary(BaseFeatureLibrary):\n    \"\"\"Generate a PDE library with custom functions.\n    Parameters\n    ----------\n    function_library : BaseFeatureLibrary, optional (default\n        PolynomialLibrary(degree=3,include_bias=False))\n        SINDy library with output features representing library_functions to include\n        in the library, in place of library_functions.\n    derivative_order : int, optional (default 0)\n        Order of derivative to take on each input variable,",
        "detail": "pysindy.pysindy.feature_library.pde_library",
        "documentation": {}
    },
    {
        "label": "PolynomialLibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.polynomial_library",
        "description": "pysindy.pysindy.feature_library.polynomial_library",
        "peekOfCode": "class PolynomialLibrary(PolynomialFeatures, BaseFeatureLibrary):\n    \"\"\"Generate polynomial and interaction features.\n    This is the same as :code:`sklearn.preprocessing.PolynomialFeatures`,\n    but also adds the option to omit interaction features from the library.\n    Parameters\n    ----------\n    degree : integer, optional (default 2)\n        The degree of the polynomial features.\n    include_interaction : boolean, optional (default True)\n        Determines whether interaction features are produced.",
        "detail": "pysindy.pysindy.feature_library.polynomial_library",
        "documentation": {}
    },
    {
        "label": "n_poly_features",
        "kind": 2,
        "importPath": "pysindy.pysindy.feature_library.polynomial_library",
        "description": "pysindy.pysindy.feature_library.polynomial_library",
        "peekOfCode": "def n_poly_features(\n    n_in_feat: int,\n    degree: int,\n    include_bias: bool = False,\n    include_interation: bool = True,\n    interaction_only: bool = False,\n) -> int:\n    \"\"\"Calculate number of polynomial features\n    Args:\n        n_in_feat: number of input features, e.g. 3 for x, y, z",
        "detail": "pysindy.pysindy.feature_library.polynomial_library",
        "documentation": {}
    },
    {
        "label": "IdentityLibrary",
        "kind": 2,
        "importPath": "pysindy.pysindy.feature_library.polynomial_library",
        "description": "pysindy.pysindy.feature_library.polynomial_library",
        "peekOfCode": "def IdentityLibrary():\n    \"\"\"\n    Generate an identity library which maps all input features to\n    themselves. An alias for creating a degree-1 polynomial library\n    with no constant term.\n    \"\"\"\n    return PolynomialLibrary(degree=1, include_bias=False)",
        "detail": "pysindy.pysindy.feature_library.polynomial_library",
        "documentation": {}
    },
    {
        "label": "SINDyPILibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.sindy_pi_library",
        "description": "pysindy.pysindy.feature_library.sindy_pi_library",
        "peekOfCode": "class SINDyPILibrary(BaseFeatureLibrary):\n    \"\"\"\n    WARNING: This library is deprecated in PySINDy versions > 1.7. Please\n    use the PDE or WeakPDE libraries instead.\n    Generate a library with custom functions. The Library takes custom\n    libraries for X and Xdot respectively, and then tensor-products them\n    together. For a 3D system, a library of constant and linear terms in x_dot,\n    i.e. [1, x_dot0, ..., x_dot3], is good\n    enough for most problems and implicit terms. The function names list\n    should include both X and Xdot functions, without the mixed terms.",
        "detail": "pysindy.pysindy.feature_library.sindy_pi_library",
        "documentation": {}
    },
    {
        "label": "WeakPDELibrary",
        "kind": 6,
        "importPath": "pysindy.pysindy.feature_library.weak_pde_library",
        "description": "pysindy.pysindy.feature_library.weak_pde_library",
        "peekOfCode": "class WeakPDELibrary(BaseFeatureLibrary):\n    \"\"\"Generate a weak formulation library with custom functions and,\n       optionally, any spatial derivatives in arbitrary dimensions.\n       The features in the weak formulation are integrals of derivatives of input data\n       multiplied by a test function phi, which are evaluated on K subdomains\n       randomly sampled across the spatiotemporal grid. Each subdomain\n       is initial generated with a size H_xt along each axis, and is then shrunk\n       such that the left and right boundaries lie on spatiotemporal grid points.\n       The expressions are integrated by parts to remove as many derivatives from the\n       input data as possible and put the derivatives onto the test functions.",
        "detail": "pysindy.pysindy.feature_library.weak_pde_library",
        "documentation": {}
    },
    {
        "label": "_BaseOptimizer",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.base",
        "description": "pysindy.pysindy.optimizers.base",
        "peekOfCode": "class _BaseOptimizer(BaseEstimator, abc.ABC):\n    coef_: np.ndarray[tuple[NTarget, NFeat], FloatDType]\n    intercept_: np.ndarray[tuple[NTarget], FloatDType]\n    @property\n    def complexity(self):\n        check_is_fitted(self)\n        return np.count_nonzero(self.coef_) + np.count_nonzero(self.intercept_)\nclass BaseOptimizer(LinearRegression, _BaseOptimizer):\n    \"\"\"\n    Base class for SINDy optimizers. Subclasses must implement",
        "detail": "pysindy.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "BaseOptimizer",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.base",
        "description": "pysindy.pysindy.optimizers.base",
        "peekOfCode": "class BaseOptimizer(LinearRegression, _BaseOptimizer):\n    \"\"\"\n    Base class for SINDy optimizers. Subclasses must implement\n    a _reduce method for carrying out the bulk of the work of\n    fitting a model.\n    Parameters\n    ----------\n    normalize_columns : boolean, optional (default False)\n        Normalize the columns of x (the SINDy library terms) before regression\n        by dividing by the L2-norm.",
        "detail": "pysindy.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "EnsembleOptimizer",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.base",
        "description": "pysindy.pysindy.optimizers.base",
        "peekOfCode": "class EnsembleOptimizer(BaseOptimizer):\n    \"\"\"Wrapper class for ensembling methods.\n    Parameters\n    ----------\n    opt: BaseOptimizer\n        The underlying optimizer to run on each ensemble\n    bagging : boolean, optional (default False)\n        This parameter is used to allow for \"ensembling\", i.e. the\n        generation of many SINDy models (n_models) by choosing a random\n        temporal subset of the input data (n_subset) for each sparse",
        "detail": "pysindy.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "NFeat",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.base",
        "description": "pysindy.pysindy.optimizers.base",
        "peekOfCode": "NFeat = NewType(\"NFeat\", int)\nNTarget = NewType(\"NTarget\", int)\ndef _rescale_data(X, y, sample_weight):\n    \"\"\"Rescale data so as to support sample_weight\"\"\"\n    n_samples = X.shape[0]\n    sample_weight = np.asarray(sample_weight)\n    if sample_weight.ndim == 0:\n        sample_weight = np.full(n_samples, sample_weight, dtype=sample_weight.dtype)\n    sample_weight = np.sqrt(sample_weight)\n    sw_matrix = sparse.dia_matrix((sample_weight, 0), shape=(n_samples, n_samples))",
        "detail": "pysindy.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "NTarget",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.base",
        "description": "pysindy.pysindy.optimizers.base",
        "peekOfCode": "NTarget = NewType(\"NTarget\", int)\ndef _rescale_data(X, y, sample_weight):\n    \"\"\"Rescale data so as to support sample_weight\"\"\"\n    n_samples = X.shape[0]\n    sample_weight = np.asarray(sample_weight)\n    if sample_weight.ndim == 0:\n        sample_weight = np.full(n_samples, sample_weight, dtype=sample_weight.dtype)\n    sample_weight = np.sqrt(sample_weight)\n    sw_matrix = sparse.dia_matrix((sample_weight, 0), shape=(n_samples, n_samples))\n    X = safe_sparse_dot(sw_matrix, X)",
        "detail": "pysindy.pysindy.optimizers.base",
        "documentation": {}
    },
    {
        "label": "ConstrainedSR3",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.constrained_sr3",
        "description": "pysindy.pysindy.optimizers.constrained_sr3",
        "peekOfCode": "class ConstrainedSR3(SR3):\n    \"\"\"\n    Sparse relaxed regularized regression with linear (in)equality constraints.\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)\n        + (0.5 / \\\\nu)\\\\|w-u\\\\|^2_2\n    .. math::\n        \\\\text{subject to } Cw = d\n    over u and w, where :math:`R(u)` is a regularization function, C is a",
        "detail": "pysindy.pysindy.optimizers.constrained_sr3",
        "documentation": {}
    },
    {
        "label": "FROLS",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.frols",
        "description": "pysindy.pysindy.optimizers.frols",
        "peekOfCode": "class FROLS(BaseOptimizer):\n    \"\"\"Forward Regression Orthogonal Least-Squares (FROLS) optimizer.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteractively selecting the most correlated\n    function in the library. This is a greedy algorithm.\n    See the following reference for more details:\n        Billings, Stephen A. Nonlinear system identification:\n        NARMAX methods in the time, frequency, and spatio-temporal domains.\n        John Wiley & Sons, 2013.",
        "detail": "pysindy.pysindy.optimizers.frols",
        "documentation": {}
    },
    {
        "label": "MIOSR",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.miosr",
        "description": "pysindy.pysindy.optimizers.miosr",
        "peekOfCode": "class MIOSR(BaseOptimizer):\n    \"\"\"Mixed-Integer Optimized Sparse Regression.\n    Solves the sparsity constrained regression problem to provable optimality\n    .. math::\n        \\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)\n    .. math::\n        \\\\text{subject to } \\\\|w\\\\|_0 \\\\leq k\n    by using type-1 specially ordered sets (SOS1) to encode the support of\n    the coefficients. Can optionally add additional constraints on the\n    coefficients or access the gurobi model directly for advanced usage.",
        "detail": "pysindy.pysindy.optimizers.miosr",
        "documentation": {}
    },
    {
        "label": "SBR",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.sbr",
        "description": "pysindy.pysindy.optimizers.sbr",
        "peekOfCode": "class SBR(BaseOptimizer):\n    \"\"\"\n    Sparse Bayesian Regression (SBR) optimizer. This uses the regularised\n    horseshoe prior over the SINDy coefficients to achieve sparsification.\n    The horseshoe prior contains a \"spike\" of nonzero probability at the\n    origin, and a Student's-T-shaped \"slab\" of distribution in cases where a\n    coefficient is nonzero.\n    The SINDy coefficients are set as the posterior means of the MCMC NUTS samples.\n    Additional statistics can be computed from the MCMC samples stored in\n    the mcmc attribute using e.g. ArviZ.",
        "detail": "pysindy.pysindy.optimizers.sbr",
        "documentation": {}
    },
    {
        "label": "SINDyPI",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.sindy_pi",
        "description": "pysindy.pysindy.optimizers.sindy_pi",
        "peekOfCode": "class SINDyPI(SR3):\n    \"\"\"\n    SINDy-PI optimizer\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|X-Xw\\\\|^2_2 + \\\\lambda R(w)\n    over w where :math:`R(v)` is a regularization function. See the following\n    reference for more details:\n        Kaheman, Kadierdan, J. Nathan Kutz, and Steven L. Brunton. SINDy-PI:\n        a robust algorithm for parallel implicit sparse identification of",
        "detail": "pysindy.pysindy.optimizers.sindy_pi",
        "documentation": {}
    },
    {
        "label": "SR3",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.sr3",
        "description": "pysindy.pysindy.optimizers.sr3",
        "peekOfCode": "class SR3(BaseOptimizer):\n    \"\"\"\n    Sparse relaxed regularized regression.\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)\n        + (0.5 / \\\\nu)\\\\|w-u\\\\|^2_2\n    where :math:`R(u)` is a regularization function.\n    See the following references for more details:\n        Zheng, Peng, et al. \"A unified framework for sparse relaxed",
        "detail": "pysindy.pysindy.optimizers.sr3",
        "documentation": {}
    },
    {
        "label": "SSR",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.ssr",
        "description": "pysindy.pysindy.optimizers.ssr",
        "peekOfCode": "class SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.\n        \"Sparse learning of stochastic dynamical equations.\"\n        The Journal of chemical physics 148.24 (2018): 241723.\n    Parameters",
        "detail": "pysindy.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Rows",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.ssr",
        "description": "pysindy.pysindy.optimizers.ssr",
        "peekOfCode": "Rows = TypeVar(\"Rows\", covariant=True, bound=int)\nCols = TypeVar(\"Cols\", covariant=True, bound=int)\nFloat2D = np.ndarray[tuple[Rows, Cols], np.dtype[np.floating[NBitBase]]]\nFeatures = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`",
        "detail": "pysindy.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Cols",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.ssr",
        "description": "pysindy.pysindy.optimizers.ssr",
        "peekOfCode": "Cols = TypeVar(\"Cols\", covariant=True, bound=int)\nFloat2D = np.ndarray[tuple[Rows, Cols], np.dtype[np.floating[NBitBase]]]\nFeatures = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient",
        "detail": "pysindy.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Float2D",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.ssr",
        "description": "pysindy.pysindy.optimizers.ssr",
        "peekOfCode": "Float2D = np.ndarray[tuple[Rows, Cols], np.dtype[np.floating[NBitBase]]]\nFeatures = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:",
        "detail": "pysindy.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Features",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.ssr",
        "description": "pysindy.pysindy.optimizers.ssr",
        "peekOfCode": "Features = NewType(\"Features\", int)\nTargets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.",
        "detail": "pysindy.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Targets",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.ssr",
        "description": "pysindy.pysindy.optimizers.ssr",
        "peekOfCode": "Targets = NewType(\"Targets\", int)\nSamples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.\n        \"Sparse learning of stochastic dynamical equations.\"",
        "detail": "pysindy.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "Samples",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.ssr",
        "description": "pysindy.pysindy.optimizers.ssr",
        "peekOfCode": "Samples = NewType(\"Samples\", int)\nclass SSR(BaseOptimizer):\n    \"\"\"Stepwise sparse regression (SSR) greedy algorithm.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively eliminating the smallest coefficient\n    See the following reference for more details:\n        Boninsegna, Lorenzo, Feliks Nüske, and Cecilia Clementi.\n        \"Sparse learning of stochastic dynamical equations.\"\n        The Journal of chemical physics 148.24 (2018): 241723.",
        "detail": "pysindy.pysindy.optimizers.ssr",
        "documentation": {}
    },
    {
        "label": "StableLinearSR3",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.stable_linear_sr3",
        "description": "pysindy.pysindy.optimizers.stable_linear_sr3",
        "peekOfCode": "class StableLinearSR3(ConstrainedSR3):\n    \"\"\"\n    Sparse relaxed regularized regression for building a-priori\n    stable linear models. This requires making a matrix negative definite,\n    which can be challenging. Here we use a similar method to the\n    TrappingOptimizer algorithm. Linear equality and linear inequality\n    constraints are both allowed, as in the ConstrainedSR3 optimizer.\n    Attempts to minimize the objective function\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda R(u)",
        "detail": "pysindy.pysindy.optimizers.stable_linear_sr3",
        "documentation": {}
    },
    {
        "label": "STLSQ",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.stlsq",
        "description": "pysindy.pysindy.optimizers.stlsq",
        "peekOfCode": "class STLSQ(BaseOptimizer):\n    \"\"\"Sequentially thresholded least squares algorithm.\n    Defaults to doing Sequentially thresholded Ridge regression.\n    Attempts to minimize the objective function\n    :math:`\\\\|y - Xw\\\\|^2_2 + \\\\alpha \\\\|w\\\\|^2_2`\n    by iteratively performing least squares and masking out\n    elements of the weight array w that are below a given threshold.\n    See the following reference for more details:\n        Brunton, Steven L., Joshua L. Proctor, and J. Nathan Kutz.\n        \"Discovering governing equations from data by sparse",
        "detail": "pysindy.pysindy.optimizers.stlsq",
        "documentation": {}
    },
    {
        "label": "EnstrophyMat",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "class EnstrophyMat:\n    \"\"\"Pre-compute some useful factors of an enstrophy matrix\n    The matrix, root, and root inverse are frequently used in transformation\n    between the original and enstrophy bases\n    \"\"\"\n    P: Float2D\n    P_root: Float2D\n    P_root_inv: Float2D\n    def __init__(self, P):\n        self.P = P",
        "detail": "pysindy.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "TrappingSR3",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "class TrappingSR3(ConstrainedSR3):\n    \"\"\"\n    Generalized trapping variant of sparse relaxed regularized regression.\n    This optimizer can be used to identify quadratically nonlinear systems with\n    either a-priori globally or locally stable (bounded) solutions.\n    This optimizer can be used to minimize five different objective functions:\n    .. math::\n        0.5\\\\|y-Xw\\\\|^2_2 + \\\\lambda \\\\times R(w)\n        + 0.5\\\\|Pw-A\\\\|^2_2/\\\\eta + \\\\delta_0(Cw-d)\n        + \\\\delta_{\\\\Lambda}(A) + \\\\alpha \\\\|Qijk\\\\|",
        "detail": "pysindy.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "TwoOrFourD",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "TwoOrFourD = TypeVar(\"TwoOrFourD\", Float2D, Float4D)\ndef _create_A_symm(\n    L_obj: TwoOrFourD,\n    M_obj: Union[Float3D, Float5D],\n    trap_ctr: Float1D,\n    ens: EnstrophyMat,\n) -> TwoOrFourD:\n    r\"\"\"Create the enstrophy/energy growth quadratic form\n    In the paper, this is :math:`A^S`.  This function can be used\n    to create either the matrix itself or a projector from SINDy coefficient",
        "detail": "pysindy.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "Q_Arr",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.trapping_sr3",
        "description": "pysindy.pysindy.optimizers.trapping_sr3",
        "peekOfCode": "Q_Arr = TypeVar(\"Q_Arr\", Float3D, Float5D)\ndef _permutation_asymmetry(Q_obj: Q_Arr) -> Q_Arr:\n    r\"\"\"Calculate the permutation-asymmetric part of the first 3 axes of Q\n    In the paper, this defines the directions of cubic energy growth.  It is\n    used to create :math:`\\tilde{Q}'`, its 2D flattening, :math:`H_0`,\n    and its enstrophy-basis (z-space) version, :math:`\\tilde {H_0}`\n    This works on both the true quadratic terms as well as the projector\n    onto the quadratic terms.\n    Note: The paper uses three times this quantity.\n    \"\"\"",
        "detail": "pysindy.pysindy.optimizers.trapping_sr3",
        "documentation": {}
    },
    {
        "label": "WrappedOptimizer",
        "kind": 6,
        "importPath": "pysindy.pysindy.optimizers.wrapped_optimizer",
        "description": "pysindy.pysindy.optimizers.wrapped_optimizer",
        "peekOfCode": "class WrappedOptimizer(BaseOptimizer):\n    \"\"\"Wrapper class for generic optimizers/sparse regression methods\n    Enables single target regressors (i.e. those whose predictions are\n    1-dimensional) to perform multi target regression (i.e. predictions\n    are 2-dimensional).  Also allows unbiasing & normalization for\n    optimizers that would otherwise not include it.\n    Args:\n        optimizer: wrapped optimizer/sparse regression method\n    Parameters\n    ----------",
        "detail": "pysindy.pysindy.optimizers.wrapped_optimizer",
        "documentation": {}
    },
    {
        "label": "COEF_THRESHOLD",
        "kind": 5,
        "importPath": "pysindy.pysindy.optimizers.wrapped_optimizer",
        "description": "pysindy.pysindy.optimizers.wrapped_optimizer",
        "peekOfCode": "COEF_THRESHOLD = 1e-14\nclass WrappedOptimizer(BaseOptimizer):\n    \"\"\"Wrapper class for generic optimizers/sparse regression methods\n    Enables single target regressors (i.e. those whose predictions are\n    1-dimensional) to perform multi target regression (i.e. predictions\n    are 2-dimensional).  Also allows unbiasing & normalization for\n    optimizers that would otherwise not include it.\n    Args:\n        optimizer: wrapped optimizer/sparse regression method\n    Parameters",
        "detail": "pysindy.pysindy.optimizers.wrapped_optimizer",
        "documentation": {}
    },
    {
        "label": "AX_TIME",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils._axis_conventions",
        "description": "pysindy.pysindy.utils._axis_conventions",
        "peekOfCode": "AX_TIME = -2\nAX_COORD = -1",
        "detail": "pysindy.pysindy.utils._axis_conventions",
        "documentation": {}
    },
    {
        "label": "AX_COORD",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils._axis_conventions",
        "description": "pysindy.pysindy.utils._axis_conventions",
        "peekOfCode": "AX_COORD = -1",
        "detail": "pysindy.pysindy.utils._axis_conventions",
        "documentation": {}
    },
    {
        "label": "_Sentinels",
        "kind": 6,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "class _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(\n        self,\n        axes: dict[str, Union[int, Sequence[int]]],",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "_AxisMapping",
        "kind": 6,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "class _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(\n        self,\n        axes: dict[str, Union[int, Sequence[int]]],\n        in_ndim: int,\n    ):\n        self.fwd_map = {}",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "AxesArray",
        "kind": 6,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "class AxesArray(np.lib.mixins.NDArrayOperatorsMixin, np.ndarray):\n    \"\"\"A numpy-like array that keeps track of the meaning of its axes.\n    Limitations:\n    * Not all numpy functions, such as ``np.flatten()``, have an\n      implementation for ``AxesArray``.  In such cases a regular numpy array\n      is returned.\n    * For functions that are implemented for `AxesArray`, such as\n      ``np.reshape()``, use the numpy function rather than the bound\n      method (e.g. ``arr.reshape``)\n    * Such functions may raise ``ValueError`` where numpy would not, when",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "SampleConcatter",
        "kind": 6,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "class SampleConcatter(TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self, x_list, y_list):\n        return self\n    def __sklearn_is_fitted__(self):\n        return True\n    def transform(self, x_list):\n        return concat_sample_axis(x_list)\ndef concat_sample_axis(x_list: List[AxesArray]):",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "ravel",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def ravel(a, order=\"C\"):\n    out = np.ravel(np.asarray(a), order=order)\n    is_1d_already = len(a.shape) == 1\n    if is_1d_already:\n        return AxesArray(out, a.axes)\n    else:\n        return AxesArray(out, {\"ax_unk\": 0})\n@_implements(np.ix_)\ndef ix_(*args: AxesArray):\n    calc = np.ix_(*(np.asarray(arg) for arg in args))",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "ix_",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def ix_(*args: AxesArray):\n    calc = np.ix_(*(np.asarray(arg) for arg in args))\n    ax_names = [list(arr.axes)[0] for arr in args]\n    axes = fwd_from_names(ax_names)\n    return tuple(AxesArray(arr, axes) for arr in calc)\n@_implements(np.concatenate)\ndef concatenate(arrays, axis=0, out=None, dtype=None, casting=\"same_kind\"):\n    parents = [np.asarray(obj) for obj in arrays]\n    ax_list = [obj.axes for obj in arrays if isinstance(obj, AxesArray)]\n    for ax1, ax2 in zip(ax_list[:-1], ax_list[1:]):",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "concatenate",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def concatenate(arrays, axis=0, out=None, dtype=None, casting=\"same_kind\"):\n    parents = [np.asarray(obj) for obj in arrays]\n    ax_list = [obj.axes for obj in arrays if isinstance(obj, AxesArray)]\n    for ax1, ax2 in zip(ax_list[:-1], ax_list[1:]):\n        if ax1 != ax2:\n            raise ValueError(\"Concatenating >1 AxesArray with incompatible axes\")\n    result = np.concatenate(parents, axis, out=out, dtype=dtype, casting=casting)\n    if isinstance(out, AxesArray):\n        out._ax_map = _AxisMapping(ax_list[0], in_ndim=result.ndim)\n    return AxesArray(result, axes=ax_list[0])",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "reshape",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def reshape(a: AxesArray, newshape: int | tuple[int], order=\"C\"):\n    \"\"\"Gives a new shape to an array without changing its data.\n    Args:\n        a: Array to be reshaped\n        newshape: int or tuple of ints\n            The new shape should be compatible with the original shape.  In\n            addition, the axis labels must make sense when the data is\n            translated to a new shape.  Currently, the only use case supported\n            is to flatten an outer product of two or more axes with the same\n            label and size.",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "transpose",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def transpose(a: AxesArray, axes: Optional[Union[Tuple[int], List[int]]] = None):\n    \"\"\"Returns an array with axes transposed.\n    Args:\n        a: input array\n        axes: As the numpy function\n    \"\"\"\n    out = np.transpose(np.asarray(a), axes)\n    if axes is None:\n        axes = range(a.ndim)[::-1]\n    new_axes = {}",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "einsum",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def einsum(\n    subscripts: str, *operands: AxesArray, out: Optional[NDArray] = None, **kwargs\n) -> AxesArray:\n    calc = np.einsum(\n        subscripts, *(np.asarray(arr) for arr in operands), out=out, **kwargs\n    )\n    try:\n        # explicit mode\n        lscripts, rscript = subscripts.split(\"->\")\n    except ValueError:",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "linalg_solve",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def linalg_solve(a: AxesArray, b: AxesArray) -> AxesArray:\n    result = np.linalg.solve(np.asarray(a), np.asarray(b))\n    a_rev = a._ax_map.reverse_map\n    a_names = [a_rev[k] for k in sorted(a_rev)]\n    contracted_axis_name = a_names[-1]\n    b_rev = b._ax_map.reverse_map\n    b_names = [b_rev[k] for k in sorted(b_rev)]\n    match_axes_list = a_names[:-1]\n    start = max(b.ndim - a.ndim, 0)\n    end = start + len(match_axes_list)",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "tensordot",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def tensordot(\n    a: AxesArray, b: AxesArray, axes: Union[int, Sequence[Sequence[int]]] = 2\n) -> AxesArray:\n    sub = _tensordot_to_einsum(a.ndim, b.ndim, axes)\n    return einsum(sub, a, b)\ndef _tensordot_to_einsum(\n    a_ndim: int, b_ndim: int, axes: Union[int, Sequence[Sequence[int]]]\n) -> str:\n    lc_ord = range(97, 123)\n    sub_a = \"\".join([chr(code) for code in lc_ord[:a_ndim]])",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "comprehend_axes",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def comprehend_axes(x):\n    axes = {}\n    axes[\"ax_coord\"] = len(x.shape) - 1\n    axes[\"ax_time\"] = len(x.shape) - 2\n    if x.ndim > 2:\n        axes[\"ax_spatial\"] = list(range(len(x.shape) - 2))\n    return axes\nclass SampleConcatter(TransformerMixin):\n    def __init__(self):\n        pass",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "concat_sample_axis",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def concat_sample_axis(x_list: List[AxesArray]):\n    \"\"\"Concatenate all trajectories and axes used to create samples.\"\"\"\n    new_arrs = []\n    for x in x_list:\n        sample_ax_names = (\"ax_spatial\", \"ax_time\", \"ax_sample\")\n        sample_ax_inds = []\n        for name in sample_ax_names:\n            ax_inds = getattr(x, name, [])\n            if isinstance(ax_inds, int):\n                ax_inds = [ax_inds]",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "wrap_axes",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def wrap_axes(axes: dict, obj):\n    \"\"\"Add axes to object (usually, a sparse matrix)\"\"\"\n    for key in [\"ax_spatial\", \"ax_time\", \"ax_sample\", \"ax_coord\"]:\n        try:\n            obj.__setattr__(key, axes[key])\n        except KeyError:\n            pass\n    return obj\ndef compat_dict_append(\n    compat_dict: CompatDict[T],",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "compat_dict_append",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def compat_dict_append(\n    compat_dict: CompatDict[T],\n    key: str,\n    item_or_list: ItemOrList[T],\n) -> None:\n    \"\"\"Add an element or list of elements to a dictionary, preserving old values\"\"\"\n    try:\n        prev_val = compat_dict[key]\n    except KeyError:\n        compat_dict[key] = item_or_list",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "fwd_from_names",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "def fwd_from_names(names: List[str]) -> CompatDict[int]:\n    \"\"\"Create mapping of name: axis or name: [ax_1, ax_2, ...]\"\"\"\n    fwd_map: Dict[str, Sequence[int]] = {}\n    for ax_ind, name in enumerate(names):\n        compat_dict_append(fwd_map, name, [ax_ind])\n    return fwd_map",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "HANDLED_FUNCTIONS",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "HANDLED_FUNCTIONS = {}\nAxesWarning = type(\"AxesWarning\", (SyntaxWarning,), {})\nBasicIndexer = Union[slice, int, type(Ellipsis), None, str]\nIndexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "AxesWarning",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "AxesWarning = type(\"AxesWarning\", (SyntaxWarning,), {})\nBasicIndexer = Union[slice, int, type(Ellipsis), None, str]\nIndexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "BasicIndexer",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "BasicIndexer = Union[slice, int, type(Ellipsis), None, str]\nIndexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "Indexer",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "Indexer = Union[BasicIndexer, NDArray, List]\nStandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "StandardIndexer",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "StandardIndexer = Union[slice, int, None, NDArray[np.dtype(int)]]\nOldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "OldIndex",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "OldIndex = NewType(\"OldIndex\", int)  # Before moving advanced axes adajent\nKeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "KeyIndex",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "KeyIndex = NewType(\"KeyIndex\", int)\nNewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "NewIndex",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "NewIndex = NewType(\"NewIndex\", int)\nT = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "T = TypeVar(\"T\", bound=int)  # TODO: Bind to a non-sequence after type-negation PEP\nItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "ItemOrList",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "ItemOrList = Union[T, List[T]]\nCompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "CompatDict",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.axes",
        "description": "pysindy.pysindy.utils.axes",
        "peekOfCode": "CompatDict = Dict[str, ItemOrList[T]]\nclass _Sentinels(Enum):\n    ADV_NAME = object()\n    ADV_REMOVE = object()\nclass _AxisMapping:\n    \"\"\"Convenience wrapper for a two-way map between axis names and indexes.\"\"\"\n    fwd_map: Dict[str, List[int]]\n    reverse_map: Dict[int, str]\n    def __init__(\n        self,",
        "detail": "pysindy.pysindy.utils.axes",
        "documentation": {}
    },
    {
        "label": "flatten_2d_tall",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def flatten_2d_tall(x):\n    return x.reshape(x.size // x.shape[-1], x.shape[-1])\ndef validate_input(x, t=T_DEFAULT):\n    \"\"\"Forces input data to have compatible dimensions, if possible.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate\n        index on second axis.",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "validate_input",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def validate_input(x, t=T_DEFAULT):\n    \"\"\"Forces input data to have compatible dimensions, if possible.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate\n        index on second axis.\n    \"\"\"\n    if not isinstance(x, np.ndarray):",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "validate_no_reshape",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def validate_no_reshape(x, t: Union[float, np.ndarray, object] = T_DEFAULT):\n    \"\"\"Check types and numerical sensibility of arguments.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate\n        index on second axis.\n    \"\"\"\n    if not hasattr(x, \"shape\"):",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "validate_control_variables",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def validate_control_variables(\n    x: Sequence[AxesArray], u: Sequence[AxesArray], trim_last_point: bool = False\n) -> None:\n    \"\"\"Ensure that control variables u are compatible with the data x.\n    Args:\n        x: trajectories of system variables\n        u: trajectories of control variables\n        trim_last_point: whether to remove last time point of controls\n    \"\"\"\n    if not isinstance(x, Sequence):",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "drop_nan_samples",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def drop_nan_samples(x, y):\n    \"\"\"Drops samples from x and y where either has a nan value\"\"\"\n    x_non_sample_axes = tuple(ax for ax in range(x.ndim) if ax != x.ax_sample)\n    y_non_sample_axes = tuple(ax for ax in range(y.ndim) if ax != y.ax_sample)\n    x_good_samples = (~np.isnan(x)).any(axis=x_non_sample_axes)\n    y_good_samples = (~np.isnan(y)).any(axis=y_non_sample_axes)\n    good_sample_ind = np.nonzero(x_good_samples & y_good_samples)[0]\n    x = x.take(good_sample_ind, axis=x.ax_sample)\n    y = y.take(good_sample_ind, axis=y.ax_sample)\n    return x, y",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "reorder_constraints",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def reorder_constraints(arr, n_features, output_order=\"feature\"):\n    \"\"\"Switch between 'feature' and 'target' constraint order.\"\"\"\n    warnings.warn(\"Target format constraints are deprecated.\", stacklevel=2)\n    n_constraints = arr.shape[0] if arr.ndim > 1 else 1\n    n_tgt = arr.size // n_features // n_constraints\n    if output_order == \"feature\":\n        starting_shape = (n_constraints, n_tgt, n_features)\n    else:\n        starting_shape = (n_constraints, n_features, n_tgt)\n    return arr.reshape(starting_shape).transpose([0, 2, 1]).reshape((n_constraints, -1))",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "get_prox",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def get_prox(\n    regularization: str,\n) -> Callable[\n    [NDArray[np.float64], Union[float, NDArray[np.float64]]], NDArray[np.float64]\n]:\n    \"\"\"\n    Args:\n    -----\n    regularization: 'l0' | 'weighted_l0' | 'l1' | 'weighted_l1' | 'l2' | 'weighted_l2'\n    Returns:",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "get_regularization",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def get_regularization(\n    regularization: str,\n) -> Callable[[NDArray[np.float64], Union[float, NDArray[np.float64]]], float]:\n    \"\"\"\n    Args:\n    -----\n    regularization: 'l0' | 'weighted_l0' | 'l1' | 'weighted_l1' | 'l2' | 'weighted_l2'\n    Returns:\n    --------\n    regularization_function: (x: np.array, reg_weight: float | np.array) -> np.array",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "capped_simplex_projection",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def capped_simplex_projection(trimming_array, trimming_fraction):\n    \"\"\"Projection of trimming_array onto the capped simplex\"\"\"\n    a = np.min(trimming_array) - 1.0\n    b = np.max(trimming_array) - 0.0\n    def f(x):\n        return (\n            np.sum(np.maximum(np.minimum(trimming_array - x, 1.0), 0.0))\n            - (1.0 - trimming_fraction) * trimming_array.size\n        )\n    x = bisect(f, a, b)",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "supports_multiple_targets",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "def supports_multiple_targets(estimator):\n    \"\"\"Checks whether estimator supports multiple targets.\"\"\"\n    if isinstance(estimator, MultiOutputMixin):\n        return True\n    try:\n        return estimator._more_tags()[\"multioutput\"]\n    except (AttributeError, KeyError):\n        return False",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "T_DEFAULT",
        "kind": 5,
        "importPath": "pysindy.pysindy.utils.base",
        "description": "pysindy.pysindy.utils.base",
        "peekOfCode": "T_DEFAULT = object()\ndef flatten_2d_tall(x):\n    return x.reshape(x.size // x.shape[-1], x.shape[-1])\ndef validate_input(x, t=T_DEFAULT):\n    \"\"\"Forces input data to have compatible dimensions, if possible.\n    Args:\n        x: array of input data (measured coordinates across time)\n        t: time values for measurements.\n    Returns:\n        x as 2D array, with time dimension on first axis and coordinate",
        "detail": "pysindy.pysindy.utils.base",
        "documentation": {}
    },
    {
        "label": "linear_damped_SHO",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def linear_damped_SHO(t, x):\n    return [-0.1 * x[0] + 2 * x[1], -2 * x[0] - 0.1 * x[1]]\n# Cubic, damped harmonic oscillator\ndef cubic_damped_SHO(t, x):\n    return [\n        -0.1 * x[0] ** 3 + 2 * x[1] ** 3,\n        -2 * x[0] ** 3 - 0.1 * x[1] ** 3,\n    ]\n# Linear 3D toy system\ndef linear_3D(t, x):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "cubic_damped_SHO",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def cubic_damped_SHO(t, x):\n    return [\n        -0.1 * x[0] ** 3 + 2 * x[1] ** 3,\n        -2 * x[0] ** 3 - 0.1 * x[1] ** 3,\n    ]\n# Linear 3D toy system\ndef linear_3D(t, x):\n    return [-0.1 * x[0] + 2 * x[1], -2 * x[0] - 0.1 * x[1], -0.3 * x[2]]\n# Van der Pol ODE\ndef van_der_pol(t, x, p=[0.5]):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "linear_3D",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def linear_3D(t, x):\n    return [-0.1 * x[0] + 2 * x[1], -2 * x[0] - 0.1 * x[1], -0.3 * x[2]]\n# Van der Pol ODE\ndef van_der_pol(t, x, p=[0.5]):\n    return [x[1], p[0] * (1 - x[0] ** 2) * x[1] - x[0]]\n# Duffing ODE\ndef duffing(t, x, p=[0.2, 0.05, 1]):\n    return [x[1], -p[0] * x[1] - p[1] * x[0] - p[2] * x[0] ** 3]\n# Lotka model\ndef lotka(t, x, p=[1, 10]):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "van_der_pol",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def van_der_pol(t, x, p=[0.5]):\n    return [x[1], p[0] * (1 - x[0] ** 2) * x[1] - x[0]]\n# Duffing ODE\ndef duffing(t, x, p=[0.2, 0.05, 1]):\n    return [x[1], -p[0] * x[1] - p[1] * x[0] - p[2] * x[0] ** 3]\n# Lotka model\ndef lotka(t, x, p=[1, 10]):\n    return [p[0] * x[0] - p[1] * x[0] * x[1], p[1] * x[0] * x[1] - 2 * p[0] * x[1]]\n# Generic cubic oscillator model\ndef cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "duffing",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def duffing(t, x, p=[0.2, 0.05, 1]):\n    return [x[1], -p[0] * x[1] - p[1] * x[0] - p[2] * x[0] ** 3]\n# Lotka model\ndef lotka(t, x, p=[1, 10]):\n    return [p[0] * x[0] - p[1] * x[0] * x[1], p[1] * x[0] * x[1] - 2 * p[0] * x[1]]\n# Generic cubic oscillator model\ndef cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):\n    return [p[0] * x[0] ** 3 + p[1] * x[1] ** 3, p[2] * x[0] ** 3 + p[3] * x[1] ** 3]\n# Rossler model\ndef rossler(t, x, p=[0.2, 0.2, 5.7]):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lotka",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def lotka(t, x, p=[1, 10]):\n    return [p[0] * x[0] - p[1] * x[0] * x[1], p[1] * x[0] * x[1] - 2 * p[0] * x[1]]\n# Generic cubic oscillator model\ndef cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):\n    return [p[0] * x[0] ** 3 + p[1] * x[1] ** 3, p[2] * x[0] ** 3 + p[3] * x[1] ** 3]\n# Rossler model\ndef rossler(t, x, p=[0.2, 0.2, 5.7]):\n    return [-x[1] - x[2], x[0] + p[0] * x[1], p[1] + (x[0] - p[2]) * x[2]]\n# Hopf bifurcation model\ndef hopf(t, x, mu=-0.05, omega=1, A=1):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "cubic_oscillator",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def cubic_oscillator(t, x, p=[-0.1, 2, -2, -0.1]):\n    return [p[0] * x[0] ** 3 + p[1] * x[1] ** 3, p[2] * x[0] ** 3 + p[3] * x[1] ** 3]\n# Rossler model\ndef rossler(t, x, p=[0.2, 0.2, 5.7]):\n    return [-x[1] - x[2], x[0] + p[0] * x[1], p[1] + (x[0] - p[2]) * x[2]]\n# Hopf bifurcation model\ndef hopf(t, x, mu=-0.05, omega=1, A=1):\n    return [\n        mu * x[0] - omega * x[1] - A * x[0] * (x[0] ** 2 + x[1] ** 2),\n        omega * x[0] + mu * x[1] - A * x[1] * (x[0] ** 2 + x[1] ** 2),",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "rossler",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def rossler(t, x, p=[0.2, 0.2, 5.7]):\n    return [-x[1] - x[2], x[0] + p[0] * x[1], p[1] + (x[0] - p[2]) * x[2]]\n# Hopf bifurcation model\ndef hopf(t, x, mu=-0.05, omega=1, A=1):\n    return [\n        mu * x[0] - omega * x[1] - A * x[0] * (x[0] ** 2 + x[1] ** 2),\n        omega * x[0] + mu * x[1] - A * x[1] * (x[0] ** 2 + x[1] ** 2),\n    ]\n# Logistic map model\ndef logistic_map(x, mu):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "hopf",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def hopf(t, x, mu=-0.05, omega=1, A=1):\n    return [\n        mu * x[0] - omega * x[1] - A * x[0] * (x[0] ** 2 + x[1] ** 2),\n        omega * x[0] + mu * x[1] - A * x[1] * (x[0] ** 2 + x[1] ** 2),\n    ]\n# Logistic map model\ndef logistic_map(x, mu):\n    return mu * x * (1 - x)\n# Logistic map model with linear control input\ndef logistic_map_control(x, mu, u):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def logistic_map(x, mu):\n    return mu * x * (1 - x)\n# Logistic map model with linear control input\ndef logistic_map_control(x, mu, u):\n    return mu * x * (1 - x) + u\n# Logistic map model with other control input\ndef logistic_map_multicontrol(x, mu, u):\n    return mu * x * (1 - x) + u[0] * u[1]\n# Lorenz model\ndef lorenz(t, x, sigma=10, beta=2.66667, rho=28):",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map_control",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def logistic_map_control(x, mu, u):\n    return mu * x * (1 - x) + u\n# Logistic map model with other control input\ndef logistic_map_multicontrol(x, mu, u):\n    return mu * x * (1 - x) + u[0] * u[1]\n# Lorenz model\ndef lorenz(t, x, sigma=10, beta=2.66667, rho=28):\n    return [\n        sigma * (x[1] - x[0]),\n        x[0] * (rho - x[2]) - x[1],",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "logistic_map_multicontrol",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def logistic_map_multicontrol(x, mu, u):\n    return mu * x * (1 - x) + u[0] * u[1]\n# Lorenz model\ndef lorenz(t, x, sigma=10, beta=2.66667, rho=28):\n    return [\n        sigma * (x[1] - x[0]),\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2],\n    ]\n# Sample control input for Lorenz + control",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def lorenz(t, x, sigma=10, beta=2.66667, rho=28):\n    return [\n        sigma * (x[1] - x[0]),\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2],\n    ]\n# Sample control input for Lorenz + control\ndef lorenz_u(t):\n    return np.column_stack([np.sin(2 * t) ** 2, t**2])\n# Lorenz equations with control input",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz_u",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def lorenz_u(t):\n    return np.column_stack([np.sin(2 * t) ** 2, t**2])\n# Lorenz equations with control input\ndef lorenz_control(t, x, u_fun, sigma=10, beta=2.66667, rho=28):\n    u = u_fun(t)\n    return [\n        sigma * (x[1] - x[0]) + u[0, 0],\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2] - u[0, 1],\n    ]",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "lorenz_control",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def lorenz_control(t, x, u_fun, sigma=10, beta=2.66667, rho=28):\n    u = u_fun(t)\n    return [\n        sigma * (x[1] - x[0]) + u[0, 0],\n        x[0] * (rho - x[2]) - x[1],\n        x[0] * x[1] - beta * x[2] - u[0, 1],\n    ]\n# Mean field model from Noack et al. 2003\n# \"A hierarchy of low-dimensional models for the transient and post-transient\n# cylinder wake\", B.R. Noack et al.",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "meanfield",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def meanfield(t, x, mu=0.01):\n    return [\n        mu * x[0] - x[1] - x[0] * x[2],\n        mu * x[1] + x[0] - x[1] * x[2],\n        -x[2] + x[0] ** 2 + x[1] ** 2,\n    ]\n# Atmospheric oscillator from Tuwankotta et al and Trapping SINDy paper\ndef oscillator(t, x, mu1=0.05, mu2=-0.01, omega=3.0, alpha=-2.0, beta=-5.0, sigma=1.1):\n    return [\n        mu1 * x[0] + sigma * x[0] * x[1],",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "oscillator",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def oscillator(t, x, mu1=0.05, mu2=-0.01, omega=3.0, alpha=-2.0, beta=-5.0, sigma=1.1):\n    return [\n        mu1 * x[0] + sigma * x[0] * x[1],\n        mu2 * x[1] + (omega + alpha * x[1] + beta * x[2]) * x[2] - sigma * x[0] ** 2,\n        mu2 * x[2] - (omega + alpha * x[1] + beta * x[2]) * x[1],\n    ]\n# Carbone and Veltri triadic MHD model\ndef mhd(t, x, nu=0.0, mu=0.0, sigma=0.0):\n    return [\n        -2 * nu * x[0] + 4.0 * (x[1] * x[2] - x[4] * x[5]),",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "mhd",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def mhd(t, x, nu=0.0, mu=0.0, sigma=0.0):\n    return [\n        -2 * nu * x[0] + 4.0 * (x[1] * x[2] - x[4] * x[5]),\n        -5 * nu * x[1] - 7.0 * (x[0] * x[2] - x[3] * x[5]),\n        -9 * nu * x[2] + 3.0 * (x[0] * x[1] - x[3] * x[4]),\n        -2 * mu * x[4] + 2.0 * (x[5] * x[1] - x[2] * x[4]),\n        -5 * mu * x[4] + sigma * x[5] + 5.0 * (x[2] * x[3] - x[0] * x[5]),\n        -9 * mu * x[5] + sigma * x[4] + 9.0 * (x[4] * x[0] - x[1] * x[3]),\n    ]\n# Galerkin coefficients for the Burgers' equation in Noack et al. 2008",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "burgers_galerkin",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def burgers_galerkin(sigma=0.1, nu=0.025, U=1.0):\n    r = 10\n    L = np.zeros([r, r])\n    for i in range(r // 2):\n        # Dissipation\n        L[2 * i, 2 * i] = -nu * (i + 1) ** 2\n        L[2 * i + 1, 2 * i + 1] = -nu * (i + 1) ** 2\n        # Mean flow advection\n        L[2 * i, 2 * i + 1] = -(i + 1) * U\n        L[2 * i + 1, 2 * i] = (i + 1) * U",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "enzyme",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def enzyme(t, x, jx=0.6, Vmax=1.5, Km=0.3):\n    return jx - Vmax * x / (Km + x)\n# Bacterial competence system (Mangan et al. 2016)\ndef bacterial(t, x, a1=0.004, a2=0.07, a3=0.04, b1=0.82, b2=1854.5):\n    return [\n        a1 + a2 * x[0] ** 2 / (a3 + x[0] ** 2) - x[0] / (1 + x[0] + x[1]),\n        b1 / (1 + b2 * x[0] ** 5) - x[1] / (1 + x[0] + x[1]),\n    ]\n# yeast glycolysis model, note that there are many typos in the sindy-pi paper\ndef yeast(",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "bacterial",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def bacterial(t, x, a1=0.004, a2=0.07, a3=0.04, b1=0.82, b2=1854.5):\n    return [\n        a1 + a2 * x[0] ** 2 / (a3 + x[0] ** 2) - x[0] / (1 + x[0] + x[1]),\n        b1 / (1 + b2 * x[0] ** 5) - x[1] / (1 + x[0] + x[1]),\n    ]\n# yeast glycolysis model, note that there are many typos in the sindy-pi paper\ndef yeast(\n    t,\n    x,\n    c1=2.5,",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "yeast",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def yeast(\n    t,\n    x,\n    c1=2.5,\n    c2=-100,\n    c3=13.6769,\n    d1=200,\n    d2=13.6769,\n    d3=-6,\n    d4=-6,",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "pendulum_on_cart",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def pendulum_on_cart(t, x, m=1, M=1, L=1, F=0, g=9.81):\n    return [\n        x[2],\n        x[3],\n        (\n            (M + m) * g * np.sin(x[0])\n            - F * np.cos(x[0])\n            - m * L * np.sin(x[0]) * np.cos(x[0]) * x[2] ** 2\n        )\n        / (L * (M + m * np.sin(x[0]) ** 2)),",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "f_steer",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def f_steer(\n    x,\n    u,\n    min_sangle=-0.91,\n    max_sangle=0.91,\n    min_svel=-0.4,\n    max_svel=0.4,\n    min_vel=-13.9,\n    max_vel=45.8,\n    switch_vel=4.755,",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "f_acc",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def f_acc(\n    y,\n    u,\n    min_sangle=-0.91,\n    max_sangle=0.91,\n    min_svel=-0.4,\n    max_svel=0.4,\n    min_vel=-13.9,\n    max_vel=45.8,\n    switch_vel=4.755,",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "kinematic_commonroad",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def kinematic_commonroad(t, x, u_fun, amax=11.5, lwb=2.391):\n    u = u_fun(t)\n    return [\n        x[3] * np.cos(x[4]),\n        x[3] * np.sin(x[4]),\n        f_steer(x[0], u[0, 0]),\n        f_acc(x[1], u[0, 1]),\n        x[1] * np.tan(x[0]) / lwb,\n    ]\n# Infamous double pendulum problem (frictionless if k1=k2=0)",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "double_pendulum",
        "kind": 2,
        "importPath": "pysindy.pysindy.utils.odes",
        "description": "pysindy.pysindy.utils.odes",
        "peekOfCode": "def double_pendulum(\n    t,\n    x,\n    m1=0.2704,\n    m2=0.2056,\n    a1=0.191,\n    a2=0.1621,\n    L1=0.2667,\n    L2=0.2667,\n    I1=0.003,",
        "detail": "pysindy.pysindy.utils.odes",
        "documentation": {}
    },
    {
        "label": "NpFlt",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "NpFlt = np.floating[npt.NBitBase]\nFloatDType = np.dtype[np.floating[npt.NBitBase]]\nInt1D = np.ndarray[tuple[int], np.dtype[np.int_]]\nFloat1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "FloatDType",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "FloatDType = np.dtype[np.floating[npt.NBitBase]]\nInt1D = np.ndarray[tuple[int], np.dtype[np.int_]]\nFloat1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Int1D",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "Int1D = np.ndarray[tuple[int], np.dtype[np.int_]]\nFloat1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float1D",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "Float1D = np.ndarray[tuple[int], FloatDType]\nFloat2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float2D",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "Float2D = np.ndarray[tuple[int, int], FloatDType]\nFloat3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float3D",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "Float3D = np.ndarray[tuple[int, int, int], FloatDType]\nFloat4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float4D",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "Float4D = np.ndarray[tuple[int, int, int, int], FloatDType]\nFloat5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "Float5D",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "Float5D = np.ndarray[tuple[int, int, int, int, int], FloatDType]\nFloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "FloatND",
        "kind": 5,
        "importPath": "pysindy.pysindy._typing",
        "description": "pysindy.pysindy._typing",
        "peekOfCode": "FloatND = npt.NDArray[NpFlt]",
        "detail": "pysindy.pysindy._typing",
        "documentation": {}
    },
    {
        "label": "_BaseSINDy",
        "kind": 6,
        "importPath": "pysindy.pysindy.pysindy",
        "description": "pysindy.pysindy.pysindy",
        "peekOfCode": "class _BaseSINDy(BaseEstimator, ABC):\n    feature_library: BaseFeatureLibrary\n    optimizer: _BaseOptimizer\n    discrete_time: bool\n    model: Pipeline\n    feature_names: Optional[list[str]]\n    # Hacks to remove later\n    discrete_time: bool = False\n    n_control_features_: int = 0\n    @abstractmethod",
        "detail": "pysindy.pysindy.pysindy",
        "documentation": {}
    },
    {
        "label": "SINDy",
        "kind": 6,
        "importPath": "pysindy.pysindy.pysindy",
        "description": "pysindy.pysindy.pysindy",
        "peekOfCode": "class SINDy(_BaseSINDy):\n    \"\"\"\n    Sparse Identification of Nonlinear Dynamical Systems (SINDy).\n    Uses sparse regression to learn a dynamical systems model from measurement data.\n    Parameters\n    ----------\n    optimizer : optimizer object, optional\n        Optimization method used to fit the SINDy model. This must be a class\n        extending :class:`pysindy.optimizers.BaseOptimizer`.\n        The default is :class:`STLSQ`.",
        "detail": "pysindy.pysindy.pysindy",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pysindy.pysindy.version",
        "description": "pysindy.pysindy.version",
        "peekOfCode": "__all__ = [\"__version__\", \"__version_tuple__\", \"version\", \"version_tuple\"]\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\nversion: str\n__version__: str",
        "detail": "pysindy.pysindy.version",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "pysindy.pysindy.version",
        "description": "pysindy.pysindy.version",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE",
        "detail": "pysindy.pysindy.version",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "pysindy.pysindy.version",
        "description": "pysindy.pysindy.version",
        "peekOfCode": "__version__ = version = '1.7.6.dev523+g04f2dc2'\n__version_tuple__ = version_tuple = (1, 7, 6, 'dev523', 'g04f2dc2')",
        "detail": "pysindy.pysindy.version",
        "documentation": {}
    },
    {
        "label": "__version_tuple__",
        "kind": 5,
        "importPath": "pysindy.pysindy.version",
        "description": "pysindy.pysindy.version",
        "peekOfCode": "__version_tuple__ = version_tuple = (1, 7, 6, 'dev523', 'g04f2dc2')",
        "detail": "pysindy.pysindy.version",
        "documentation": {}
    },
    {
        "label": "DummyLinearModel",
        "kind": 6,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "class DummyLinearModel(BaseEstimator):\n    # Does not natively support multiple targets\n    def fit(self, x, y):\n        self.coef_ = np.ones(x.shape[1])\n        self.intercept_ = 0\n        return self\n    def predict(self, x):\n        return x\nclass DummyEmptyModel(BaseEstimator):\n    # Does not have fit or predict methods",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "DummyEmptyModel",
        "kind": 6,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "class DummyEmptyModel(BaseEstimator):\n    # Does not have fit or predict methods\n    def __init__(self):\n        self.fit_intercept = False\n        self.normalize_columns = False\nclass DummyModelNoCoef(BaseEstimator):\n    # Does not set the coef_ attribute\n    def fit(self, x, y):\n        self.intercept_ = 0\n        return self",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "DummyModelNoCoef",
        "kind": 6,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "class DummyModelNoCoef(BaseEstimator):\n    # Does not set the coef_ attribute\n    def fit(self, x, y):\n        self.intercept_ = 0\n        return self\n    def predict(self, x):\n        return x\ndef _align_optimizer_and_1dfeatures(\n    opt: BaseOptimizer, features: NDArray\n) -> tuple[BaseOptimizer, NDArray]:",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_supports_multiple_targets",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_supports_multiple_targets(cls, support):\n    assert supports_multiple_targets(cls()) == support\n@pytest.fixture(params=[\"data_derivative_1d\", \"data_derivative_2d\"])\ndef data(request):\n    return request.getfixturevalue(request.param)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [\n        STLSQ(),\n        SSR(),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def data(request):\n    return request.getfixturevalue(request.param)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [\n        STLSQ(),\n        SSR(),\n        SSR(criteria=\"model_residual\"),\n        FROLS(),\n        SR3(),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_fit",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_fit(data_derivative_1d, optimizer):\n    x, x_dot = data_derivative_1d\n    if len(x.shape) == 1:\n        x = x.reshape(-1, 1)\n    optimizer, x = _align_optimizer_and_1dfeatures(optimizer, x)\n    opt = WrappedOptimizer(optimizer, unbias=False)\n    opt.fit(x, x_dot)\n    check_is_fitted(opt)\n    assert opt.complexity >= 0\n    if len(x_dot.shape) > 1:",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_not_fitted",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_not_fitted(optimizer):\n    with pytest.raises(NotFittedError):\n        optimizer.predict(np.ones((1, 3)))\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [\n        STLSQ(),\n        SR3(),\n        SBR(\n            num_warmup=1,",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_complexity_not_fitted",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_complexity_not_fitted(optimizer, data_derivative_2d):\n    with pytest.raises(NotFittedError):\n        optimizer.complexity\n    x, _ = data_derivative_2d\n    optimizer.fit(x, x)\n    assert optimizer.complexity > 0\n@pytest.mark.parametrize(\"kwargs\", [{\"normalize_columns\": True}, {\"copy_X\": False}])\ndef test_alternate_parameters(data_derivative_1d, kwargs):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_alternate_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_alternate_parameters(data_derivative_1d, kwargs):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    model = STLSQ(**kwargs)\n    model.fit(x, x_dot)\n    model.fit(x, x_dot, sample_weight=x[:, 0])\n    check_is_fitted(model)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sample_weight_optimizers",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sample_weight_optimizers(data_1d, optimizer):\n    y, t = data_1d\n    opt = optimizer()\n    opt, x = _align_optimizer_and_1dfeatures(opt, y)\n    sample_weight = np.ones(x[:, 0].shape)\n    sample_weight[::2] = 0\n    opt.fit(x, y, sample_weight=sample_weight)\n    check_is_fitted(opt)\n@pytest.mark.parametrize(\"params\", [dict(threshold=-1), dict(max_iter=0)])\ndef test_STLSQ_bad_parameters(params):",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_STLSQ_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_STLSQ_bad_parameters(params):\n    with pytest.raises(ValueError):\n        STLSQ(**params)\n@pytest.mark.parametrize(\n    \"optimizer\", [SR3, ConstrainedSR3, StableLinearSR3, TrappingSR3]\n)\n@pytest.mark.parametrize(\"params\", [dict(reg_weight_lam=-1), dict(max_iter=0)])\ndef test_general_bad_parameters(optimizer, params):\n    with pytest.raises(ValueError):\n        optimizer(**params)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_general_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_general_bad_parameters(optimizer, params):\n    with pytest.raises(ValueError):\n        optimizer(**params)\n@pytest.mark.parametrize(\"optimizer\", [SR3, ConstrainedSR3, StableLinearSR3])\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(relax_coeff_nu=0),\n        dict(tol=0),\n        dict(trimming_fraction=-1),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sr3_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sr3_bad_parameters(optimizer, params):\n    with pytest.raises(ValueError):\n        optimizer(**params)\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(eta=-1),\n        dict(tol=0),\n        dict(tol_m=0),\n        dict(eps_solver=0),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_trapping_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_trapping_bad_parameters(params):\n    with pytest.raises(ValueError):\n        TrappingSR3(_n_tgts=1, **params)\ndef test_trapping_objective_print():\n    # test error in verbose print logic when max_iter < 10\n    opt = TrappingSR3(_n_tgts=1, max_iter=2, verbose=True)\n    arr = np.ones((1, 1))\n    opt.PQ_ = np.ones((1, 1, 1, 1, 1))\n    opt._objective(arr, arr, arr, arr, arr, 1)\n@pytest.mark.parametrize(",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_trapping_objective_print",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_trapping_objective_print():\n    # test error in verbose print logic when max_iter < 10\n    opt = TrappingSR3(_n_tgts=1, max_iter=2, verbose=True)\n    arr = np.ones((1, 1))\n    opt.PQ_ = np.ones((1, 1, 1, 1, 1))\n    opt._objective(arr, arr, arr, arr, arr, 1)\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(tol=0),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sindypi_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sindypi_bad_parameters(data_lorenz, params):\n    x, t = data_lorenz\n    with pytest.raises(ValueError):\n        opt = SINDyPI(**params)\n        model = SINDy(optimizer=opt)\n        model.fit(x, t=t)\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(tol=1e-3),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sindypi_fit",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sindypi_fit(params):\n    dt = 0.01\n    T = 5\n    t = np.arange(0, T + dt, dt)\n    x0_train = [0.55]\n    x_train = solve_ivp(enzyme, (t[0], t[-1]), x0_train, t_eval=t).y.T\n    # initialize a quartic polynomial library for x\n    x_library_functions = [\n        lambda x: x,\n        lambda x, y: x * y,",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sbr_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sbr_bad_parameters(params):\n    with pytest.raises(ValueError):\n        SBR(**params)\ndef test_sbr_accurate():\n    # It's really hard to tune SBR to get desired shrinkage\n    # This just tests that SBR fits \"close\" to unregularized regression\n    x = np.tile(np.eye(2), 4).reshape((-1, 2))\n    y = np.tile([[1], [1e-1]], 4).reshape((-1, 1))\n    opt = SBR(num_warmup=50, num_samples=50).fit(x, y)\n    result = opt.coef_",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sbr_accurate",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sbr_accurate():\n    # It's really hard to tune SBR to get desired shrinkage\n    # This just tests that SBR fits \"close\" to unregularized regression\n    x = np.tile(np.eye(2), 4).reshape((-1, 2))\n    y = np.tile([[1], [1e-1]], 4).reshape((-1, 1))\n    opt = SBR(num_warmup=50, num_samples=50).fit(x, y)\n    result = opt.coef_\n    unregularized = np.array([[1, 1e-1]])\n    np.testing.assert_allclose(result, unregularized, atol=1e-3)\n    assert hasattr(opt, \"mcmc_\")",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sr3_quadratic_library",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sr3_quadratic_library(params):\n    x = np.random.standard_normal((100, 3))\n    library_functions = [\n        lambda x: x,\n        lambda x, y: x * y,\n        lambda x: x**2,\n    ]\n    library_function_names = [\n        lambda x: str(x),\n        lambda x, y: \"{} * {}\".format(x, y),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_constrained_sr3_quadratic_library",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_constrained_sr3_quadratic_library(params):\n    x = np.random.standard_normal((100, 3))\n    library_functions = [\n        lambda x: x,\n        lambda x, y: x * y,\n        lambda x: x**2,\n    ]\n    library_function_names = [\n        lambda x: str(x),\n        lambda x, y: \"{} * {}\".format(x, y),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_constrained_sr3_penalty_term",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_constrained_sr3_penalty_term(regularizer, lam, expected):\n    xi = cp.Variable(3)\n    penalty = ConstrainedSR3._calculate_penalty(regularizer, np.ravel(lam), xi)\n    xi.value = np.array([-2, 3, 5])\n    np.testing.assert_allclose(penalty.value, expected)\ndef test_stable_linear_sr3_linear_library():\n    x = np.ones((2, 1))\n    opt = StableLinearSR3()\n    opt.fit(x, x)\n    check_is_fitted(opt)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_stable_linear_sr3_linear_library",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_stable_linear_sr3_linear_library():\n    x = np.ones((2, 1))\n    opt = StableLinearSR3()\n    opt.fit(x, x)\n    check_is_fitted(opt)\n    constraint_rhs = np.zeros((1, 1))\n    constraint_matrix = np.eye(1)\n    opt = StableLinearSR3(\n        constraint_lhs=constraint_matrix, constraint_rhs=constraint_rhs\n    )",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_trapping_sr3_quadratic_library",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_trapping_sr3_quadratic_library(bias, method, reg_weight):\n    t = np.arange(0, 1, 0.1)\n    x = np.exp(-t).reshape((-1, 1))\n    x_dot = -x\n    features = np.hstack([x, x**2])\n    if bias:\n        features = np.hstack([np.ones_like(x), features])\n    params = {\n        \"_n_tgts\": 1,\n        \"_include_bias\": bias,",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_specific_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_specific_bad_parameters(error, optimizer, params, data_lorenz):\n    x, t = data_lorenz\n    with pytest.raises(error):\n        opt = optimizer(**params)\n        model = SINDy(optimizer=opt)\n        model.fit(x, t=t)\ndef test_bad_optimizers(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    x_dot = x_dot.reshape(-1, 1)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_bad_optimizers",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_bad_optimizers(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    x_dot = x_dot.reshape(-1, 1)\n    with pytest.raises(InvalidParameterError):\n        # Error: optimizer does not have a callable fit method\n        opt = WrappedOptimizer(DummyEmptyModel())\n        opt.fit(x, x_dot)\n    with pytest.raises(AttributeError):\n        # Error: object has no attribute 'coef_'",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_initial_guess_sr3",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_initial_guess_sr3(optimizer):\n    x = np.random.standard_normal((10, 3))\n    x_dot = np.random.standard_normal((10, 2))\n    control_model = optimizer(max_iter=1).fit(x, x_dot)\n    initial_guess = np.random.standard_normal((x_dot.shape[1], x.shape[1]))\n    guess_model = optimizer(max_iter=1, initial_guess=initial_guess).fit(x, x_dot)\n    assert np.any(np.not_equal(control_model.coef_, guess_model.coef_))\n# The different capitalizations are intentional;\n# I want to make sure different versions are recognized\n@pytest.mark.parametrize(\"optimizer\", [SR3, ConstrainedSR3])",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_prox_functions",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_prox_functions(data_derivative_1d, optimizer, regularizer):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    model = optimizer(regularizer=regularizer)\n    model.fit(x, x_dot)\n    check_is_fitted(model)\n@pytest.mark.parametrize(\"regularizer\", [\"weighted_l0\", \"weighted_l1\"])\ndef test_weighted_prox_functions(data, regularizer):\n    x, x_dot = data\n    if x.ndim == 1:",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_weighted_prox_functions",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_weighted_prox_functions(data, regularizer):\n    x, x_dot = data\n    if x.ndim == 1:\n        x = x.reshape(-1, 1)\n        reg_weight_lam = np.ones((1, 1))\n    else:\n        reg_weight_lam = np.ones((x_dot.shape[1], x.shape[1]))\n    model = ConstrainedSR3(regularizer=regularizer, reg_weight_lam=reg_weight_lam)\n    model.fit(x, x_dot)\n    check_is_fitted(model)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_constrained_sr3_prox_functions",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_constrained_sr3_prox_functions(data_derivative_1d, regularizer):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    model = ConstrainedSR3(regularizer=regularizer)\n    model.fit(x, x_dot)\n    check_is_fitted(model)\n@pytest.mark.parametrize(\n    (\"opt_cls\", \"opt_args\"),\n    (\n        (SR3, {\"trimming_fraction\": 0.1}),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_illegal_unbias",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_illegal_unbias(data_derivative_1d, opt_cls, opt_args):\n    x, x_dot = data_derivative_1d\n    with pytest.raises(ValueError):\n        opt_cls(unbias=True, **opt_args).fit(x, x_dot)\ndef test_unbias(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    x_dot = x_dot.reshape(-1, 1)\n    optimizer_biased = STLSQ(threshold=0.01, alpha=0.1, max_iter=1, unbias=False)\n    optimizer_biased.fit(x, x_dot)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_unbias",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_unbias(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    x_dot = x_dot.reshape(-1, 1)\n    optimizer_biased = STLSQ(threshold=0.01, alpha=0.1, max_iter=1, unbias=False)\n    optimizer_biased.fit(x, x_dot)\n    optimizer_unbiased = STLSQ(threshold=0.01, alpha=0.1, max_iter=1, unbias=True)\n    optimizer_unbiased.fit(x, x_dot)\n    assert (\n        norm(optimizer_biased.coef_ - optimizer_unbiased.coef_)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_unbias_external",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_unbias_external(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    x_dot = x_dot.reshape(-1, 1)\n    optimizer_biased = WrappedOptimizer(\n        Lasso(alpha=0.1, fit_intercept=False, max_iter=1), unbias=False\n    )\n    optimizer_biased.fit(x, x_dot)\n    optimizer_unbiased = WrappedOptimizer(\n        Lasso(alpha=0.1, fit_intercept=False, max_iter=1), unbias=True",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sr3_trimming",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sr3_trimming(OptCls, data_linear_oscillator_corrupted):\n    X, X_dot, trimming_array = data_linear_oscillator_corrupted\n    optimizer_without_trimming = OptCls(unbias=False)\n    optimizer_without_trimming.fit(X, X_dot)\n    optimizer_trimming = OptCls(trimming_fraction=0.15, unbias=False)\n    optimizer_trimming.fit(X, X_dot)\n    # Check that trimming found the right samples to remove\n    np.testing.assert_array_equal(optimizer_trimming.trimming_array, trimming_array)\n    # Check that the coefficients found by the optimizer with trimming\n    # are closer to the true coefficients than the coefficients found by the",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sr3_disable_trimming",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sr3_disable_trimming(optimizer, data_linear_oscillator_corrupted):\n    x, x_dot, _ = data_linear_oscillator_corrupted\n    model_plain = optimizer()\n    model_plain.fit(x, x_dot)\n    model_trimming = optimizer(trimming_fraction=0.5)\n    model_trimming.disable_trimming()\n    model_trimming.fit(x, x_dot)\n    np.testing.assert_allclose(model_plain.coef_, model_trimming.coef_)\n@pytest.mark.parametrize(\"optimizer\", [SR3, ConstrainedSR3])\ndef test_sr3_enable_trimming(optimizer, data_linear_oscillator_corrupted):",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sr3_enable_trimming",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sr3_enable_trimming(optimizer, data_linear_oscillator_corrupted):\n    x, x_dot, _ = data_linear_oscillator_corrupted\n    model_plain = optimizer()\n    model_plain.enable_trimming(trimming_fraction=0.5)\n    model_plain.fit(x, x_dot)\n    model_trimming = optimizer(trimming_fraction=0.5)\n    model_trimming.fit(x, x_dot)\n    np.testing.assert_allclose(model_plain.coef_, model_trimming.coef_)\n@pytest.mark.parametrize(\n    \"optimizer\",",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_fit_warn",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_fit_warn(data_derivative_1d, optimizer):\n    x, x_dot = data_derivative_1d\n    x = x.reshape(-1, 1)\n    optimizer.max_iter = 0  # normally prohibited in constructor\n    with pytest.warns(ConvergenceWarning):\n        optimizer.fit(x, x_dot)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [\n        (ConstrainedSR3, {\"max_iter\": 80}),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_feature_format_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_feature_format_constraints(data_linear_combination, optimizer, target_value):\n    # Solution is x_dot = x.dot(np.array([[1, 1, 0], [0, 1, 1]]))\n    x, y = data_linear_combination\n    constraint_rhs = target_value * np.ones(2)\n    constraint_lhs = np.zeros((2, x.shape[1], y.shape[1]))\n    # Should force corresponding entries of coef_ to be target_value\n    constraint_lhs[0, 1, 1] = 1\n    constraint_lhs[1, 2, 2] = 1\n    # reshape to \"feature\" order\n    constraint_lhs = np.reshape(constraint_lhs, (constraint_lhs.shape[0], -1))",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_target_format_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_target_format_constraints(data_linear_combination, optimizer, target_value):\n    x, y = data_linear_combination\n    constraint_rhs = target_value * np.ones(2)\n    constraint_lhs = np.zeros((2, x.shape[1], y.shape[1]))\n    # Should force corresponding entries of coef_ to be target_value\n    constraint_lhs[0, 2, 1] = 1\n    constraint_lhs[1, 1, 2] = 1\n    # reshape to \"target\" order\n    constraint_lhs = np.reshape(\n        np.transpose(constraint_lhs, [0, 2, 1]), (constraint_lhs.shape[0], -1)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_constrained_inequality_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_constrained_inequality_constraints(data_lorenz, params):\n    x, t = data_lorenz\n    constraint_rhs = np.array([-10.0, 28.0])\n    constraint_matrix = np.zeros((2, 30))\n    constraint_matrix[0, 1] = 1.0\n    constraint_matrix[1, 11] = 1.0\n    feature_names = [\"x\", \"y\", \"z\"]\n    poly_lib = PolynomialLibrary(degree=2)\n    # Run constrained SR3\n    opt = ConstrainedSR3(",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_trapping_cost_function",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_trapping_cost_function(params):\n    # TODO: are all these parameters necessary?  What are we testing?\n    expected = params.pop(\"expected\")\n    opt = TrappingSR3(**params)\n    x = np.eye(2)\n    y = np.ones(2)\n    xi, cost = opt._create_var_and_part_cost(2, x, y)\n    xi.value = np.array([0.5, 0.5])\n    np.testing.assert_allclose(cost.value, expected)\ndef test_trapping_inequality_constraints():",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_trapping_inequality_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_trapping_inequality_constraints():\n    t = np.arange(0, 1, 0.1)\n    x = np.stack((t, t**2)).T\n    y = x[:, 0] + 0.1 * x[:, 1]\n    constraint_rhs = np.array([0.1])\n    constraint_matrix = np.zeros((1, 2))\n    constraint_matrix[0, 1] = 0.1\n    # Run Trapping SR3\n    opt = TrappingSR3(\n        constraint_lhs=constraint_matrix,",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_miosr_equality_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_miosr_equality_constraints(data_lorenz, params):\n    x, t = data_lorenz\n    constraint_rhs = np.array([-10.0, 28.0])\n    constraint_matrix = np.zeros((2, 30))\n    constraint_matrix[0, 1] = 1.0\n    constraint_matrix[1, 11] = 1.0\n    feature_names = [\"x\", \"y\", \"z\"]\n    opt = MIOSR(\n        constraint_lhs=constraint_matrix,\n        constraint_rhs=constraint_rhs,",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_inequality_constraints_reqs",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_inequality_constraints_reqs():\n    constraint_rhs = np.array([-10.0, -2.0])\n    constraint_matrix = np.zeros((2, 30))\n    constraint_matrix[0, 6] = 1.0\n    constraint_matrix[1, 17] = 1.0\n    with pytest.raises(ValueError):\n        TrappingSR3(\n            reg_weight_lam=0.0,\n            constraint_lhs=constraint_matrix,\n            constraint_rhs=constraint_rhs,",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_normalize_columns",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_normalize_columns(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    x = np.reshape(x, (-1, 1))\n    x_dot = np.reshape(x_dot, (-1, 1))\n    cols = np.hstack((x, x_dot))\n    norm, ncols = _normalize_features(cols)\n    result = np.linalg.norm(ncols, axis=0)\n    expected = [1.0, 1.0]\n    np.testing.assert_allclose(result, expected)\n    np.testing.assert_allclose(ncols * norm, cols)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_ensemble_optimizer",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_ensemble_optimizer(data_lorenz, optimizer_params):\n    x, t = data_lorenz\n    optimizer = EnsembleOptimizer(STLSQ(), **optimizer_params)\n    optimizer.fit(x, x)\n    assert optimizer.coef_.shape == (3, 3)\n    assert len(optimizer.coef_list) == 2\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_bad_ensemble_params",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_bad_ensemble_params(data_lorenz, params):\n    with pytest.raises(ValueError):\n        EnsembleOptimizer(opt=STLSQ(), **params)\ndef test_ssr_criteria(data_lorenz):\n    x, t = data_lorenz\n    opt = SSR(normalize_columns=True, criteria=\"model_residual\", kappa=1e-3)\n    model = SINDy(optimizer=opt)\n    model.fit(x)\n    assert np.shape(opt.coef_) == (3, 10)\n@pytest.mark.parametrize(",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_ssr_criteria",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_ssr_criteria(data_lorenz):\n    x, t = data_lorenz\n    opt = SSR(normalize_columns=True, criteria=\"model_residual\", kappa=1e-3)\n    model = SINDy(optimizer=opt)\n    model.fit(x)\n    assert np.shape(opt.coef_) == (3, 10)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [\n        STLSQ,",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_optimizers_verbose",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_optimizers_verbose(data_1d, optimizer):\n    y, _ = data_1d\n    opt = optimizer(verbose=True)\n    opt, x = _align_optimizer_and_1dfeatures(opt, y)\n    opt.verbose = True\n    opt.fit(x, y)\n    check_is_fitted(opt)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_optimizers_verbose_cvxpy",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_optimizers_verbose_cvxpy(data_1d, optimizer):\n    y, _ = data_1d\n    opt = optimizer(verbose_cvxpy=True)\n    opt, x = _align_optimizer_and_1dfeatures(opt, y)\n    opt.fit(x, y)\n    check_is_fitted(opt)\ndef test_frols_error_linear_dependence():\n    opt = FROLS(normalize_columns=True)\n    x = np.array([[1.0, 1.0]])\n    y = np.array([[1.0, 1.0]])",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_frols_error_linear_dependence",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_frols_error_linear_dependence():\n    opt = FROLS(normalize_columns=True)\n    x = np.array([[1.0, 1.0]])\n    y = np.array([[1.0, 1.0]])\n    with pytest.raises(ValueError):\n        opt.fit(x, y)\ndef test_sparse_subset_multitarget():\n    A = np.eye(4)\n    b = np.array([[1, 1, 0.5, 1], [1, 1, 1, 0.5]]).T\n    opt = STLSQ(unbias=False, threshold=0.5, alpha=0.1, sparse_ind=[2, 3])",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sparse_subset_multitarget",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sparse_subset_multitarget():\n    A = np.eye(4)\n    b = np.array([[1, 1, 0.5, 1], [1, 1, 1, 0.5]]).T\n    opt = STLSQ(unbias=False, threshold=0.5, alpha=0.1, sparse_ind=[2, 3])\n    opt.fit(A, b)\n    X = opt.coef_\n    Y = opt.optvar_non_sparse_\n    assert X[0, 0] == 0.0\n    assert 0.0 < X[0, 1] < 1.0\n    np.testing.assert_equal(Y[:, :2], np.ones((2, 2)))",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sparse_subset_off_diagonal",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sparse_subset_off_diagonal():\n    A = np.array([[1, 1], [0, 1]])\n    b = np.array([1, 1])\n    opt = STLSQ(unbias=False, threshold=0.1, alpha=0.1, sparse_ind=[1])\n    opt.fit(A, b)\n    X = opt.coef_\n    Y = opt.optvar_non_sparse_\n    assert Y[0, 0] > 0.0 and Y[0, 0] < 0.5\n    assert X[0, 0] > 0.5 and X[0, 0] < 1.0\ndef test_sparse_subset_unbias():",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_sparse_subset_unbias",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_sparse_subset_unbias():\n    A = np.array([[1, 1], [0, 1]])\n    b = np.array([1, 1])\n    opt = STLSQ(unbias=True, threshold=0.1, alpha=0.1, sparse_ind=[1])\n    opt.fit(A, b)\n    X = opt.coef_\n    Y = opt.optvar_non_sparse_\n    assert np.abs(Y[0, 0]) < 2e-16\n    assert np.abs(X[0, 0] - 1.0) < 2e-16\ndef test_remove_and_decrement():",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_remove_and_decrement",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_remove_and_decrement():\n    existing_vals = np.array([2, 3, 4, 5])\n    vals_to_remove = np.array([3, 5])\n    expected = np.array([2, 3])\n    result = _remove_and_decrement(\n        existing_vals=existing_vals, vals_to_remove=vals_to_remove\n    )\n    np.testing.assert_array_equal(expected, result)\n@pytest.mark.parametrize(\n    (\"opt_cls\", \"opt_args\"),",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_pickle",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_pickle(data_lorenz, opt_cls, opt_args):\n    x, t = data_lorenz\n    y = PolynomialLibrary(degree=2).fit_transform(x)\n    opt = opt_cls(**opt_args).fit(y, x)\n    expected = opt.coef_\n    new_opt = pickle.loads(pickle.dumps(opt))\n    result = new_opt.coef_\n    np.testing.assert_array_equal(result, expected)\n@pytest.mark.parametrize(\"kappa\", (None, 0.1), ids=[\"inflection\", \"L0\"])\ndef test_ssr_history_selection(kappa):",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_ssr_history_selection",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_ssr_history_selection(kappa):\n    rng = np.random.default_rng(1)\n    x = rng.normal(size=(30, 8))\n    expected = np.array([[1, 1, 1, 0, 0, 0, 0, 0]])\n    y = x @ expected.T\n    x += np.random.normal(size=(30, 8), scale=1e-2)\n    opt = SSR(kappa=kappa)\n    result = opt.fit(x, y).coef_\n    assert len(opt.history_) == len(opt.err_history_)\n    np.testing.assert_allclose(result, expected, atol=1e-2)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_ssr_inflection",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_ssr_inflection(errs, expected):\n    result = _ind_inflection(errs)\n    assert result == expected\n@pytest.mark.parametrize(\n    [\"errs\", \"expected\", \"message\"],\n    (\n        ([1], ValueError, \"single point\"),\n        ([-1, 1, 1], ValueError, \"\"),\n    ),\n    ids=[\"length-1\", \"negative\"],",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "test_ssr_inflection_bad_args",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_optimizers",
        "description": "pysindy.test.test_optimizers.test_optimizers",
        "peekOfCode": "def test_ssr_inflection_bad_args(errs, expected, message):\n    with pytest.raises(expected, match=message):\n        _ind_inflection(errs)",
        "detail": "pysindy.test.test_optimizers.test_optimizers",
        "documentation": {}
    },
    {
        "label": "poly_lib_terms_coef_bias",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def poly_lib_terms_coef_bias(scope=\"session\"):\n    lib = PolynomialLibrary(2, include_bias=True).fit(np.zeros((1, 2)))\n    # terms are [1, x, y, x^2 , xy, y^2]\n    polyterms = [(t_ind, exps) for t_ind, exps in enumerate(lib.powers_)]\n    coeffs = np.array([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]])\n    return lib, polyterms, coeffs\n@pytest.fixture\ndef poly_lib_terms_coef_nobias(scope=\"session\"):\n    lib = PolynomialLibrary(2, include_bias=False).fit(np.zeros((1, 2)))\n    # terms are [x, y, x^2 , xy, y^2]",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "poly_lib_terms_coef_nobias",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def poly_lib_terms_coef_nobias(scope=\"session\"):\n    lib = PolynomialLibrary(2, include_bias=False).fit(np.zeros((1, 2)))\n    # terms are [x, y, x^2 , xy, y^2]\n    polyterms = [(t_ind, exps) for t_ind, exps in enumerate(lib.powers_)]\n    coeffs = np.array([[2, 3, 4, 5, 6], [8, 9, 10, 11, 12]])\n    return lib, polyterms, coeffs\n@pytest.mark.parametrize(\n    \"lib_terms_coeffs\",\n    (\n        pytest.lazy_fixture(\"poly_lib_terms_coef_bias\"),",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_PL",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_PL(lib_terms_coeffs):\n    _, terms, coeffs = lib_terms_coeffs\n    PL_symm, PL_unsymm = TrappingSR3._build_PL(terms)\n    expected_symm = np.array([[2.0, 5.5], [5.5, 9.0]])\n    expected_unsymm = np.array([[2.0, 3.0], [8.0, 9.0]])\n    result = np.einsum(\"ijkl,kl\", PL_symm, coeffs)\n    np.testing.assert_array_equal(result, expected_symm)\n    result = np.einsum(\"ijkl,kl\", PL_unsymm, coeffs)\n    np.testing.assert_array_equal(result, expected_unsymm)\n@pytest.mark.parametrize(",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_PQ",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_PQ(lib_terms_coeffs):\n    _, terms, coeffs = lib_terms_coeffs\n    PQ = TrappingSR3._build_PQ(terms)\n    expected = np.array([[[4.0, 2.5], [2.5, 6]], [[10.0, 5.5], [5.5, 12.0]]])\n    result = np.einsum(\"ijklm,lm\", PQ, coeffs)\n    np.testing.assert_array_equal(result, expected)\ndef test_enstrophy_constraints_imply_enstrophy_symmetry():\n    n_tgts = 4\n    root = np.random.normal(size=(n_tgts, n_tgts))\n    mod_matrix = root @ root.T",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_enstrophy_constraints_imply_enstrophy_symmetry",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_enstrophy_constraints_imply_enstrophy_symmetry():\n    n_tgts = 4\n    root = np.random.normal(size=(n_tgts, n_tgts))\n    mod_matrix = root @ root.T\n    bias = False\n    lib = PolynomialLibrary(2, include_bias=bias).fit(np.ones((1, n_tgts)))\n    terms = [(t_ind, exps) for t_ind, exps in enumerate(lib.powers_)]\n    PQ = TrappingSR3._build_PQ(terms)\n    _, constraint_lhs = _make_constraints(n_tgts, include_bias=bias)\n    constraint_lhs = np.tensordot(constraint_lhs, mod_matrix, axes=1)",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_enstrophy_symmetry_implies_enstrophy_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_enstrophy_symmetry_implies_enstrophy_constraints():\n    n_tgts = 4\n    root = np.random.normal(size=(n_tgts, n_tgts))\n    mod_matrix = root @ root.T\n    u, _, vt = np.linalg.svd(mod_matrix)\n    mod_matrix = u @ vt\n    mod_inv = np.linalg.inv(mod_matrix)\n    bias = False\n    lib = PolynomialLibrary(2, include_bias=bias).fit(np.ones((1, n_tgts)))\n    terms = [(t_ind, exps) for t_ind, exps in enumerate(lib.powers_)]",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_constraints_imply_symmetry",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_constraints_imply_symmetry():\n    n_tgts = 4\n    bias = False\n    lib = PolynomialLibrary(2, include_bias=bias).fit(np.ones((1, n_tgts)))\n    terms = [(t_ind, exps) for t_ind, exps in enumerate(lib.powers_)]\n    PQ = TrappingSR3._build_PQ(terms)\n    _, constraint_lhs = _make_constraints(n_tgts, include_bias=bias)\n    n_constraint, n_features, _ = constraint_lhs.shape\n    constraint_mat = constraint_lhs.reshape((n_constraint, -1))\n    coeff_basis = scipy.linalg.null_space(constraint_mat)",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_symmetry_implies_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_symmetry_implies_constraints():\n    n_tgts = 4\n    bias = False\n    lib = PolynomialLibrary(2, include_bias=bias).fit(np.ones((1, n_tgts)))\n    terms = [(t_ind, exps) for t_ind, exps in enumerate(lib.powers_)]\n    PQ = TrappingSR3._build_PQ(terms)\n    PQinv = np.zeros_like(PQ)\n    PQinv[np.where(PQ != 0)] = 1\n    Q = np.random.normal(size=(n_tgts, n_tgts, n_tgts))\n    Q[(range(n_tgts),) * 3] = 0",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_trapping_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_trapping_constraints(include_bias):\n    # x, y, x^2, xy, y^2\n    constraint_rhs, constraint_lhs = _make_constraints(2, include_bias=include_bias)\n    stable_coefs = np.array([[0, 0, 0, 1, -1], [0, 0, -1, 1, 0]])\n    if include_bias:\n        stable_coefs = np.concatenate(([[0], [0]], stable_coefs), axis=1)\n    result = np.tensordot(constraint_lhs, stable_coefs, ((1, 2), (1, 0)))\n    np.testing.assert_array_equal(constraint_rhs, result)\n    _, lg_constraint = _make_constraints(4, include_bias=include_bias)\n    # constraint should be full-rank",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_trapping_triple_mixed_constraint",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_trapping_triple_mixed_constraint():\n    # xy, xz, yz\n    stable_coefs = np.array([[0, 0, -1], [0, 0.5, 0], [0.5, 0, 0]])\n    mixed_terms = {frozenset((0, 1)): 0, frozenset((0, 2)): 1, frozenset((1, 2)): 2}\n    constraint_lhs = _antisymm_triple_constraints(3, 3, mixed_terms)\n    result = np.tensordot(constraint_lhs, stable_coefs, ((1, 2), (1, 0)))\n    np.testing.assert_array_equal(result, np.zeros_like(result))\ndef test_trapping_double_constraint():\n    stable_coefs = np.array(\n        [",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_trapping_double_constraint",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers.test_trapping",
        "description": "pysindy.test.test_optimizers.test_trapping",
        "peekOfCode": "def test_trapping_double_constraint():\n    stable_coefs = np.array(\n        [\n            # w^2, wx, wy, wz, x^2, xy, xz, y^2, yz, z^2\n            [0, 1, 2, 3, -4, 0, 0, -8, 0, -9],  # w\n            [-1, 4, 0, 0, 0, 5, 6, -10, 0, -11],  # x\n            [-2, 0, 8, 0, -5, 10, 0, 0, 7, -12],  # y\n            [-3, 0, 0, 9, -6, 0, 11, -7, 12, 0],  # z\n        ]\n    )",
        "detail": "pysindy.test.test_optimizers.test_trapping",
        "documentation": {}
    },
    {
        "label": "test_axesarray_create",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_axesarray_create():\n    AxesArray(np.array(1), {})\ndef test_concat_out():\n    arr = AxesArray(np.arange(3).reshape(1, 3), {\"ax_a\": 0, \"ax_b\": 1})\n    arr_out = np.empty((2, 3)).view(AxesArray)\n    result = np.concatenate((arr, arr), axis=0, out=arr_out)\n    assert_equal(result, arr_out)\ndef test_bad_concat():\n    arr = AxesArray(np.arange(3).reshape(1, 3), {\"ax_a\": 0, \"ax_b\": 1})\n    arr2 = AxesArray(np.arange(3).reshape(1, 3), {\"ax_b\": 0, \"ax_c\": 1})",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_concat_out",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_concat_out():\n    arr = AxesArray(np.arange(3).reshape(1, 3), {\"ax_a\": 0, \"ax_b\": 1})\n    arr_out = np.empty((2, 3)).view(AxesArray)\n    result = np.concatenate((arr, arr), axis=0, out=arr_out)\n    assert_equal(result, arr_out)\ndef test_bad_concat():\n    arr = AxesArray(np.arange(3).reshape(1, 3), {\"ax_a\": 0, \"ax_b\": 1})\n    arr2 = AxesArray(np.arange(3).reshape(1, 3), {\"ax_b\": 0, \"ax_c\": 1})\n    with pytest.raises(ValueError):\n        np.concatenate((arr, arr2), axis=0)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_bad_concat",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_bad_concat():\n    arr = AxesArray(np.arange(3).reshape(1, 3), {\"ax_a\": 0, \"ax_b\": 1})\n    arr2 = AxesArray(np.arange(3).reshape(1, 3), {\"ax_b\": 0, \"ax_c\": 1})\n    with pytest.raises(ValueError):\n        np.concatenate((arr, arr2), axis=0)\ndef test_reduce_mean_noinf_recursion():\n    arr = AxesArray(np.array([[1]]), {\"ax_a\": [0, 1]})\n    np.mean(arr, axis=0)\ndef test_repr():\n    a = AxesArray(np.arange(5.0), {\"ax_time\": 0})",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reduce_mean_noinf_recursion",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reduce_mean_noinf_recursion():\n    arr = AxesArray(np.array([[1]]), {\"ax_a\": [0, 1]})\n    np.mean(arr, axis=0)\ndef test_repr():\n    a = AxesArray(np.arange(5.0), {\"ax_time\": 0})\n    result = a.__repr__()\n    expected = \"AxesArray([0., 1., 2., 3., 4.])\"\n    assert result == expected\ndef test_ufunc_override():\n    # This is largely a clone of test_ufunc_override_with_super() from",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_repr",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_repr():\n    a = AxesArray(np.arange(5.0), {\"ax_time\": 0})\n    result = a.__repr__()\n    expected = \"AxesArray([0., 1., 2., 3., 4.])\"\n    assert result == expected\ndef test_ufunc_override():\n    # This is largely a clone of test_ufunc_override_with_super() from\n    # numpy/core/tests/test_umath.py\n    class B:\n        def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_ufunc_override",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_ufunc_override():\n    # This is largely a clone of test_ufunc_override_with_super() from\n    # numpy/core/tests/test_umath.py\n    class B:\n        def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n            if any(isinstance(input_, AxesArray) for input_ in inputs):\n                return \"A!\"\n            else:\n                return NotImplemented\n    d = np.arange(5.0)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_n_elements",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_n_elements():\n    arr = np.empty(np.arange(1, 5))\n    arr = AxesArray(arr, {\"ax_spatial\": [0, 1], \"ax_time\": 2, \"ax_coord\": 3})\n    assert arr.n_spatial == (1, 2)\n    assert arr.n_time == 3\n    assert arr.n_coord == 4\n    arr2 = np.concatenate((arr, arr), axis=arr.ax_time)\n    assert arr2.n_spatial == (1, 2)\n    assert arr2.n_time == 6\n    assert arr2.n_coord == 4",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reshape_outer_product",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reshape_outer_product():\n    arr = AxesArray(np.arange(4).reshape((2, 2)), {\"ax_a\": [0, 1]})\n    merge = np.reshape(arr, (4,))\n    assert merge.axes == {\"ax_a\": 0}\ndef test_reshape_bad_divmod():\n    arr = AxesArray(np.arange(12).reshape((2, 3, 2)), {\"ax_a\": [0, 1], \"ax_b\": 2})\n    with pytest.raises(\n        ValueError, match=\"Cannot reshape an AxesArray this way.  Array dimension\"\n    ):\n        np.reshape(arr, (4, 3))",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reshape_bad_divmod",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reshape_bad_divmod():\n    arr = AxesArray(np.arange(12).reshape((2, 3, 2)), {\"ax_a\": [0, 1], \"ax_b\": 2})\n    with pytest.raises(\n        ValueError, match=\"Cannot reshape an AxesArray this way.  Array dimension\"\n    ):\n        np.reshape(arr, (4, 3))\ndef test_reshape_fill_outer_product():\n    arr = AxesArray(np.arange(4).reshape((2, 2)), {\"ax_a\": [0, 1]})\n    merge = np.reshape(arr, (-1,))\n    assert merge.axes == {\"ax_a\": 0}",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reshape_fill_outer_product",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reshape_fill_outer_product():\n    arr = AxesArray(np.arange(4).reshape((2, 2)), {\"ax_a\": [0, 1]})\n    merge = np.reshape(arr, (-1,))\n    assert merge.axes == {\"ax_a\": 0}\ndef test_reshape_fill_regular():\n    arr = AxesArray(np.arange(8).reshape((2, 2, 2)), {\"ax_a\": [0, 1], \"ax_b\": 2})\n    merge = np.reshape(arr, (4, -1))\n    assert merge.axes == {\"ax_a\": 0, \"ax_b\": 1}\ndef test_illegal_reshape():\n    arr = AxesArray(np.arange(4).reshape((2, 2)), {\"ax_a\": [0, 1]})",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reshape_fill_regular",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reshape_fill_regular():\n    arr = AxesArray(np.arange(8).reshape((2, 2, 2)), {\"ax_a\": [0, 1], \"ax_b\": 2})\n    merge = np.reshape(arr, (4, -1))\n    assert merge.axes == {\"ax_a\": 0, \"ax_b\": 1}\ndef test_illegal_reshape():\n    arr = AxesArray(np.arange(4).reshape((2, 2)), {\"ax_a\": [0, 1]})\n    # melding across axes\n    with pytest.raises(ValueError, match=\"Cannot reshape an AxesArray\"):\n        np.reshape(arr, (4, 1))\n    # Add a hidden 1 in the middle!  maybe a matching 1",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_illegal_reshape",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_illegal_reshape():\n    arr = AxesArray(np.arange(4).reshape((2, 2)), {\"ax_a\": [0, 1]})\n    # melding across axes\n    with pytest.raises(ValueError, match=\"Cannot reshape an AxesArray\"):\n        np.reshape(arr, (4, 1))\n    # Add a hidden 1 in the middle!  maybe a matching 1\n    # different name outer product\n    arr = AxesArray(np.arange(4).reshape((2, 2)), {\"ax_a\": 0, \"ax_b\": 1})\n    with pytest.raises(ValueError, match=\"Cannot reshape an AxesArray\"):\n        np.reshape(arr, (4,))",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_warn_toofew_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_warn_toofew_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 1}\n    with pytest.warns(AxesWarning):\n        AxesArray(np.ones(8).reshape((2, 2, 2)), axes)\ndef test_toomany_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 2}\n    with pytest.raises(ValueError):\n        AxesArray(np.ones(4).reshape((2, 2)), axes)\ndef test_conflicting_axes_defn():\n    axes = {\"ax_time\": 0, \"ax_coord\": 0}",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_toomany_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_toomany_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 2}\n    with pytest.raises(ValueError):\n        AxesArray(np.ones(4).reshape((2, 2)), axes)\ndef test_conflicting_axes_defn():\n    axes = {\"ax_time\": 0, \"ax_coord\": 0}\n    with pytest.raises(ValueError):\n        AxesArray(np.ones(4), axes)\ndef test_missing_axis_errors():\n    axes = {\"ax_time\": 0}",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_conflicting_axes_defn",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_conflicting_axes_defn():\n    axes = {\"ax_time\": 0, \"ax_coord\": 0}\n    with pytest.raises(ValueError):\n        AxesArray(np.ones(4), axes)\ndef test_missing_axis_errors():\n    axes = {\"ax_time\": 0}\n    arr = AxesArray(np.arange(3), axes)\n    with pytest.raises(AttributeError):\n        arr.ax_spatial\n    with pytest.raises(AttributeError):",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_missing_axis_errors",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_missing_axis_errors():\n    axes = {\"ax_time\": 0}\n    arr = AxesArray(np.arange(3), axes)\n    with pytest.raises(AttributeError):\n        arr.ax_spatial\n    with pytest.raises(AttributeError):\n        arr.n_spatial\ndef test_simple_slice():\n    arr = AxesArray(np.ones(2), {\"ax_coord\": 0})\n    assert_array_equal(arr[:], arr)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_simple_slice",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_simple_slice():\n    arr = AxesArray(np.ones(2), {\"ax_coord\": 0})\n    assert_array_equal(arr[:], arr)\n    assert_array_equal(arr[slice(None)], arr)\n    assert arr[0] == 1\n# @pytest.mark.skip  # TODO: make this pass\ndef test_0d_indexer():\n    arr = AxesArray(np.ones(2), {\"ax_coord\": 0})\n    arr_out = arr[1, ...]\n    assert arr_out.ndim == 0",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_0d_indexer",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_0d_indexer():\n    arr = AxesArray(np.ones(2), {\"ax_coord\": 0})\n    arr_out = arr[1, ...]\n    assert arr_out.ndim == 0\n    assert arr_out.axes == {}\n    assert arr_out[()] == 1\ndef test_basic_indexing_modifies_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 1}\n    arr = AxesArray(np.ones(4).reshape((2, 2)), axes)\n    slim = arr[1, :, None]",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_basic_indexing_modifies_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_basic_indexing_modifies_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 1}\n    arr = AxesArray(np.ones(4).reshape((2, 2)), axes)\n    slim = arr[1, :, None]\n    with pytest.raises(AttributeError):\n        slim.ax_time\n    assert slim.ax_unk == 1\n    assert slim.ax_coord == 0\n    reverse_slim = arr[None, :, 1]\n    with pytest.raises(AttributeError):",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_insert_named_axis",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_insert_named_axis():\n    arr = AxesArray(np.ones(1), axes={\"ax_time\": 0})\n    expanded = arr[\"time\", :]\n    result = expanded.axes\n    expected = {\"ax_time\": [0, 1]}\n    assert result == expected\ndef test_adv_indexing_modifies_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 1}\n    arr = AxesArray(np.arange(4).reshape((2, 2)), axes)\n    flat = arr[[0, 1], [0, 1]]",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_adv_indexing_modifies_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_adv_indexing_modifies_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 1}\n    arr = AxesArray(np.arange(4).reshape((2, 2)), axes)\n    flat = arr[[0, 1], [0, 1]]\n    same = arr[[[0], [1]], [0, 1]]\n    tpose = arr[[0, 1], [[0], [1]]]\n    assert flat.shape == (2,)\n    np.testing.assert_array_equal(np.asarray(flat), np.array([0, 3]))\n    assert flat.ax_time_coord == 0\n    with pytest.raises(AttributeError):",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_adv_indexing_adds_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_adv_indexing_adds_axes():\n    axes = {\"ax_time\": 0, \"ax_coord\": 1}\n    arr = AxesArray(np.arange(4).reshape((2, 2)), axes)\n    fat = arr[[[0, 1], [0, 1]]]\n    assert fat.shape == (2, 2, 2)\n    assert fat.ax_time == [0, 1]\n    assert fat.ax_coord == 2\ndef test_standardize_basic_indexer():\n    arr = np.arange(6).reshape(2, 3)\n    result_indexer, result_fancy = axes._standardize_indexer(arr, Ellipsis)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_standardize_basic_indexer",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_standardize_basic_indexer():\n    arr = np.arange(6).reshape(2, 3)\n    result_indexer, result_fancy = axes._standardize_indexer(arr, Ellipsis)\n    assert result_indexer == [slice(None), slice(None)]\n    assert result_fancy == ()\n    result_indexer, result_fancy = axes._standardize_indexer(\n        arr, (np.newaxis, 1, 1, Ellipsis)\n    )\n    assert result_indexer == [None, 1, 1]\n    assert result_fancy == ()",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_standardize_advanced_indexer",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_standardize_advanced_indexer():\n    arr = np.arange(6).reshape(2, 3)\n    result_indexer, result_fancy = axes._standardize_indexer(arr, [1])\n    assert result_indexer == [np.ones(1), slice(None)]\n    assert result_fancy == (0,)\n    result_indexer, result_fancy = axes._standardize_indexer(\n        arr, (np.newaxis, [1], 1, Ellipsis)\n    )\n    assert result_indexer == [None, np.ones(1), 1]\n    assert result_fancy == (1,)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_standardize_bool_indexer",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_standardize_bool_indexer():\n    arr = np.ones((1, 2))\n    result, result_adv = axes._standardize_indexer(arr, [[True, True]])\n    assert_equal(result, [[0, 0], [0, 1]])\n    assert result_adv == (0, 1)\ndef test_reduce_AxisMapping():\n    ax_map = _AxisMapping(\n        {\"ax_a\": [0, 1], \"ax_b\": 2, \"ax_c\": 3, \"ax_d\": 4, \"ax_e\": [5, 6]},\n        7,\n    )",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reduce_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reduce_AxisMapping():\n    ax_map = _AxisMapping(\n        {\"ax_a\": [0, 1], \"ax_b\": 2, \"ax_c\": 3, \"ax_d\": 4, \"ax_e\": [5, 6]},\n        7,\n    )\n    result = ax_map.remove_axis(3)\n    expected = {\"ax_a\": [0, 1], \"ax_b\": 2, \"ax_d\": 3, \"ax_e\": [4, 5]}\n    assert result == expected\n    result = ax_map.remove_axis(-4)\n    assert result == expected",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reduce_all_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reduce_all_AxisMapping():\n    ax_map = _AxisMapping({\"ax_a\": [0, 1], \"ax_b\": 2}, 3)\n    result = ax_map.remove_axis()\n    expected = {}\n    assert result == expected\ndef test_reduce_multiple_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 1],\n            \"ax_b\": 2,",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reduce_multiple_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reduce_multiple_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 1],\n            \"ax_b\": 2,\n            \"ax_c\": 3,\n            \"ax_d\": 4,\n            \"ax_e\": [5, 6],\n        },\n        7,",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reduce_twisted_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reduce_twisted_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 6],\n            \"ax_b\": 2,\n            \"ax_c\": 3,\n            \"ax_d\": 4,\n            \"ax_e\": [1, 5],\n        },\n        7,",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_reduce_misordered_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_reduce_misordered_AxisMapping():\n    ax_map = _AxisMapping({\"ax_a\": [0, 1], \"ax_b\": 2, \"ax_c\": 3}, 4)\n    result = ax_map.remove_axis([2, 1])\n    expected = {\"ax_a\": 0, \"ax_c\": 1}\n    assert result == expected\ndef test_insert_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 1],\n            \"ax_b\": 2,",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_insert_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_insert_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 1],\n            \"ax_b\": 2,\n            \"ax_c\": 3,\n            \"ax_d\": [4, 5],\n        },\n        6,\n    )",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_insert_existing_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_insert_existing_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 1],\n            \"ax_b\": 2,\n            \"ax_c\": 3,\n            \"ax_d\": [4, 5],\n        },\n        6,\n    )",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_insert_multiple_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_insert_multiple_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 1],\n            \"ax_b\": 2,\n            \"ax_c\": 3,\n            \"ax_d\": [4, 5],\n        },\n        6,\n    )",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_insert_misordered_AxisMapping",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_insert_misordered_AxisMapping():\n    ax_map = _AxisMapping(\n        {\n            \"ax_a\": [0, 1],\n            \"ax_b\": 2,\n            \"ax_c\": 3,\n            \"ax_d\": [4, 5],\n        },\n        6,\n    )",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_determine_adv_broadcasting",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_determine_adv_broadcasting():\n    indexers = (1, np.ones(1), np.ones((4, 1)), np.ones(3))\n    res_nd, res_start = axes._determine_adv_broadcasting(indexers, [1, 2, 3])\n    assert res_nd == 2\n    assert res_start == 1\n    indexers = (None, np.ones(1), 2, np.ones(3))\n    res_nd, res_start = axes._determine_adv_broadcasting(indexers, [1, 3])\n    assert res_nd == 1\n    assert res_start == 0\n    res_nd, res_start = axes._determine_adv_broadcasting(indexers, [])",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_replace_ellipsis",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_replace_ellipsis():\n    key = [..., 0]\n    result = axes._expand_indexer_ellipsis(key, 2)\n    expected = [slice(None), 0]\n    assert result == expected\ndef test_strip_ellipsis():\n    key = [1, ...]\n    result = axes._expand_indexer_ellipsis(key, 1)\n    expected = [1]\n    assert result == expected",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_strip_ellipsis",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_strip_ellipsis():\n    key = [1, ...]\n    result = axes._expand_indexer_ellipsis(key, 1)\n    expected = [1]\n    assert result == expected\n    key = [..., 1]\n    result = axes._expand_indexer_ellipsis(key, 1)\n    expected = [1]\n    assert result == expected\ndef test_transpose():",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_transpose",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_transpose():\n    axes = {\"ax_a\": 0, \"ax_b\": [1, 2]}\n    arr = AxesArray(np.arange(8).reshape(2, 2, 2), axes)\n    tp = np.transpose(arr, [2, 0, 1])\n    result = tp.axes\n    expected = {\"ax_a\": 1, \"ax_b\": [0, 2]}\n    assert result == expected\n    assert_array_equal(tp, np.transpose(np.asarray(arr), [2, 0, 1]))\n    arr = arr[..., 0]\n    tp = arr.T",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_linalg_solve_align_left",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_linalg_solve_align_left():\n    axesA = {\"ax_prob\": 0, \"ax_sample\": 1, \"ax_coord\": 2}\n    arrA = AxesArray(np.arange(8).reshape(2, 2, 2), axesA)\n    axesb = {\"ax_prob\": 0, \"ax_sample\": 1}\n    arrb = AxesArray(np.arange(4).reshape(2, 2), axesb)\n    result = np.linalg.solve(arrA, arrb)\n    expected_axes = {\"ax_prob\": 0, \"ax_coord\": 1}\n    assert result.axes == expected_axes\n    super_result = np.linalg.solve(np.asarray(arrA), np.asarray(arrb))\n    assert_array_equal(result, super_result)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_linalg_solve_align_right",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_linalg_solve_align_right():\n    axesA = {\"ax_sample\": 0, \"ax_feature\": 1}\n    arrA = AxesArray(np.arange(4).reshape(2, 2), axesA)\n    axesb = {\"ax_sample\": 0, \"ax_target\": 1}\n    arrb = AxesArray(np.arange(4).reshape(2, 2), axesb)\n    result = np.linalg.solve(arrA, arrb)\n    expected_axes = {\"ax_feature\": 0, \"ax_target\": 1}\n    assert result.axes == expected_axes\n    super_result = np.linalg.solve(np.asarray(arrA), np.asarray(arrb))\n    assert_array_equal(result, super_result)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_linalg_solve_align_right_xl",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_linalg_solve_align_right_xl():\n    axesA = {\"ax_sample\": 0, \"ax_feature\": 1}\n    arrA = AxesArray(np.arange(4).reshape(2, 2), axesA)\n    axesb = {\"ax_prob\": 0, \"ax_sample\": 1, \"ax_target\": 2}\n    arrb = AxesArray(np.arange(8).reshape(2, 2, 2), axesb)\n    result = np.linalg.solve(arrA, arrb)\n    expected_axes = {\"ax_prob\": 0, \"ax_feature\": 1, \"ax_target\": 2}\n    assert result.axes == expected_axes\n    super_result = np.linalg.solve(np.asarray(arrA), np.asarray(arrb))\n    assert_array_equal(result, super_result)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_linalg_solve_incompatible_left",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_linalg_solve_incompatible_left():\n    axesA = {\"ax_prob\": 0, \"ax_sample\": 1, \"ax_coord\": 2}\n    arrA = AxesArray(np.arange(8).reshape(2, 2, 2), axesA)\n    axesb = {\"ax_foo\": 0, \"ax_sample\": 1}\n    arrb = AxesArray(np.arange(4).reshape(2, 2), axesb)\n    with pytest.raises(ValueError, match=\"Mismatch in operand axis names\"):\n        np.linalg.solve(arrA, arrb)\ndef test_ts_to_einsum_int_axes():\n    a_str, b_str = axes._tensordot_to_einsum(3, 3, 2).split(\",\")\n    # expecting 'abc,bcf",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_ts_to_einsum_int_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_ts_to_einsum_int_axes():\n    a_str, b_str = axes._tensordot_to_einsum(3, 3, 2).split(\",\")\n    # expecting 'abc,bcf\n    assert a_str[0] not in b_str\n    assert b_str[-1] not in a_str\n    assert a_str[1:] == b_str[:-1]\ndef test_ts_to_einsum_list_axes():\n    a_str, b_str = axes._tensordot_to_einsum(3, 3, [[1], [2]]).split(\",\")\n    # expecting 'abcd,efbh\n    assert a_str[1] == b_str[2]",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_ts_to_einsum_list_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_ts_to_einsum_list_axes():\n    a_str, b_str = axes._tensordot_to_einsum(3, 3, [[1], [2]]).split(\",\")\n    # expecting 'abcd,efbh\n    assert a_str[1] == b_str[2]\n    assert a_str[0] not in b_str\n    assert a_str[2] not in b_str\n    assert b_str[0] not in a_str\n    assert b_str[1] not in a_str\ndef test_tensordot_int_axes():\n    axes_a = {\"ax_a\": 0, \"ax_b\": [1, 2]}",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_tensordot_int_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_tensordot_int_axes():\n    axes_a = {\"ax_a\": 0, \"ax_b\": [1, 2]}\n    axes_b = {\"ax_b\": [0, 1], \"ax_c\": 2}\n    arr = np.arange(8).reshape((2, 2, 2))\n    arr_a = AxesArray(arr, axes_a)\n    arr_b = AxesArray(arr, axes_b)\n    super_result = np.tensordot(arr, arr, 2)\n    result = np.tensordot(arr_a, arr_b, 2)\n    expected_axes = {\"ax_a\": 0, \"ax_c\": 1}\n    assert result.axes == expected_axes",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_tensordot_list_axes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_tensordot_list_axes():\n    axes_a = {\"ax_a\": 0, \"ax_b\": [1, 2]}\n    axes_b = {\"ax_c\": [0, 1], \"ax_b\": 2}\n    arr = np.arange(8).reshape((2, 2, 2))\n    arr_a = AxesArray(arr, axes_a)\n    arr_b = AxesArray(arr, axes_b)\n    super_result = np.tensordot(arr, arr, [[1], [2]])\n    result = np.tensordot(arr_a, arr_b, [[1], [2]])\n    expected_axes = {\"ax_a\": 0, \"ax_b\": 1, \"ax_c\": [2, 3]}\n    assert result.axes == expected_axes",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_ravel_1d",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_ravel_1d():\n    arr = AxesArray(np.array([1, 2]), axes={\"ax_a\": 0})\n    result = np.ravel(arr)\n    assert_array_equal(result, arr)\n    assert result.axes == arr.axes\ndef test_ravel_nd():\n    arr = AxesArray(np.array([[1, 2], [3, 4]]), axes={\"ax_a\": 0, \"ax_b\": 1})\n    result = np.ravel(arr)\n    expected = np.ravel(np.asarray(arr))\n    assert_array_equal(result, expected)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_ravel_nd",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_ravel_nd():\n    arr = AxesArray(np.array([[1, 2], [3, 4]]), axes={\"ax_a\": 0, \"ax_b\": 1})\n    result = np.ravel(arr)\n    expected = np.ravel(np.asarray(arr))\n    assert_array_equal(result, expected)\n    assert result.axes == {\"ax_unk\": 0}\ndef test_ma_ravel():\n    arr = AxesArray(np.array([1, 2]), axes={\"ax_a\": 0})\n    marr = np.ma.MaskedArray(arr)\n    np.ma.ravel(marr)",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_ma_ravel",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_ma_ravel():\n    arr = AxesArray(np.array([1, 2]), axes={\"ax_a\": 0})\n    marr = np.ma.MaskedArray(arr)\n    np.ma.ravel(marr)\n@pytest.mark.skip\ndef test_einsum_implicit():\n    ...\n@pytest.mark.skip\ndef test_einsum_trace():\n    ...",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_implicit",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_implicit():\n    ...\n@pytest.mark.skip\ndef test_einsum_trace():\n    ...\n@pytest.mark.skip\ndef test_einsum_diag():\n    ...\n@pytest.mark.skip\ndef test_einsum_1dsum():",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_trace",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_trace():\n    ...\n@pytest.mark.skip\ndef test_einsum_diag():\n    ...\n@pytest.mark.skip\ndef test_einsum_1dsum():\n    ...\n@pytest.mark.skip\ndef test_einsum_alldsum():",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_diag",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_diag():\n    ...\n@pytest.mark.skip\ndef test_einsum_1dsum():\n    ...\n@pytest.mark.skip\ndef test_einsum_alldsum():\n    ...\n@pytest.mark.skip\ndef test_einsum_contraction():",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_1dsum",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_1dsum():\n    ...\n@pytest.mark.skip\ndef test_einsum_alldsum():\n    ...\n@pytest.mark.skip\ndef test_einsum_contraction():\n    ...\n@pytest.mark.skip\ndef test_einsum_explicit_ellipsis():",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_alldsum",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_alldsum():\n    ...\n@pytest.mark.skip\ndef test_einsum_contraction():\n    ...\n@pytest.mark.skip\ndef test_einsum_explicit_ellipsis():\n    ...\ndef test_einsum_scalar():\n    arr = AxesArray(np.ones(1), {\"ax_a\": 0})",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_contraction",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_contraction():\n    ...\n@pytest.mark.skip\ndef test_einsum_explicit_ellipsis():\n    ...\ndef test_einsum_scalar():\n    arr = AxesArray(np.ones(1), {\"ax_a\": 0})\n    expected = 1\n    result = np.einsum(\"i,i\", arr, arr)\n    assert result == expected",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_explicit_ellipsis",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_explicit_ellipsis():\n    ...\ndef test_einsum_scalar():\n    arr = AxesArray(np.ones(1), {\"ax_a\": 0})\n    expected = 1\n    result = np.einsum(\"i,i\", arr, arr)\n    assert result == expected\n@pytest.mark.skip\ndef test_einsum_mixed():\n    ...",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_scalar",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_scalar():\n    arr = AxesArray(np.ones(1), {\"ax_a\": 0})\n    expected = 1\n    result = np.einsum(\"i,i\", arr, arr)\n    assert result == expected\n@pytest.mark.skip\ndef test_einsum_mixed():\n    ...",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_einsum_mixed",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_axes",
        "description": "pysindy.test.utils.test_axes",
        "peekOfCode": "def test_einsum_mixed():\n    ...",
        "detail": "pysindy.test.utils.test_axes",
        "documentation": {}
    },
    {
        "label": "test_odes",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_odes",
        "description": "pysindy.test.utils.test_odes",
        "peekOfCode": "def test_odes(ode_params):\n    def u_fun(t):\n        return np.column_stack([np.sin(2 * t), t**2])\n    t = np.linspace(0, 10, 100)\n    x0 = np.random.rand(ode_params[1])\n    if np.shape(ode_params)[0] == 3:\n        x_sim = solve_ivp(ode_params[0], (t[0], t[-1]), x0, t_eval=t, args=(u_fun,)).y.T\n    else:\n        x_sim = solve_ivp(ode_params[0], (t[0], t[-1]), x0, t_eval=t).y.T\n    assert np.max(abs(x_sim)) <= 1e5  # avoided unbounded growth",
        "detail": "pysindy.test.utils.test_odes",
        "documentation": {}
    },
    {
        "label": "galerkin_model",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_odes",
        "description": "pysindy.test.utils.test_odes",
        "peekOfCode": "def galerkin_model(a, L, Q):\n    \"\"\"RHS of POD-Galerkin model, for time integration\"\"\"\n    return (L @ a) + np.einsum(\"ijk,j,k->i\", Q, a, a)\ndef test_galerkin_models():\n    # get analytic L and Q operators and galerkin model\n    L, Q = burgers_galerkin()\n    def rhs(t, a):\n        return galerkin_model(a, L, Q)\n    # Generate initial condition from unstable eigenvectors\n    lamb, Phi = np.linalg.eig(L)",
        "detail": "pysindy.test.utils.test_odes",
        "documentation": {}
    },
    {
        "label": "test_galerkin_models",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_odes",
        "description": "pysindy.test.utils.test_odes",
        "peekOfCode": "def test_galerkin_models():\n    # get analytic L and Q operators and galerkin model\n    L, Q = burgers_galerkin()\n    def rhs(t, a):\n        return galerkin_model(a, L, Q)\n    # Generate initial condition from unstable eigenvectors\n    lamb, Phi = np.linalg.eig(L)\n    idx = np.argsort(-np.real(lamb))\n    lamb, Phi = lamb[idx], Phi[:, idx]\n    a0 = np.real(1e-4 * Phi[:, :2] @ np.random.random((2)))",
        "detail": "pysindy.test.utils.test_odes",
        "documentation": {}
    },
    {
        "label": "test_reorder_constraints_1D",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_utils",
        "description": "pysindy.test.utils.test_utils",
        "peekOfCode": "def test_reorder_constraints_1D():\n    n_feats = 3\n    n_tgts = 2\n    target_order = np.array(\n        [f\"t{i}f{j}\" for i in range(n_tgts) for j in range(n_feats)]\n    )\n    feature_order = np.array(\n        [f\"t{i}f{j}\" for j in range(n_feats) for i in range(n_tgts)]\n    )\n    result = reorder_constraints(target_order, n_feats, output_order=\"feature\")",
        "detail": "pysindy.test.utils.test_utils",
        "documentation": {}
    },
    {
        "label": "test_reorder_constraints_2D",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_utils",
        "description": "pysindy.test.utils.test_utils",
        "peekOfCode": "def test_reorder_constraints_2D():\n    n_feats = 3\n    n_tgts = 2\n    n_const = 2\n    target_order = np.array(\n        [\n            [f\"c{k}t{i}f{j}\" for i in range(n_tgts) for j in range(n_feats)]\n            for k in range(n_const)\n        ]\n    )",
        "detail": "pysindy.test.utils.test_utils",
        "documentation": {}
    },
    {
        "label": "test_validate_controls",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_utils",
        "description": "pysindy.test.utils.test_utils",
        "peekOfCode": "def test_validate_controls():\n    with pytest.raises(ValueError):\n        validate_control_variables(1, [])\n    with pytest.raises(ValueError):\n        validate_control_variables([], 1)\n    with pytest.raises(ValueError):\n        validate_control_variables([], [1])\n    arr = AxesArray(np.ones(4).reshape((2, 2)), axes={\"ax_time\": 0, \"ax_coord\": 1})\n    with pytest.raises(ValueError):\n        validate_control_variables([arr], [arr[:1]])",
        "detail": "pysindy.test.utils.test_utils",
        "documentation": {}
    },
    {
        "label": "test_get_regularization",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_utils",
        "description": "pysindy.test.utils.test_utils",
        "peekOfCode": "def test_get_regularization(regularization, lam, expected):\n    data = np.array([[-2, 5]]).T\n    reg = get_regularization(regularization)\n    result = reg(data, lam)\n    assert result == expected\n@pytest.mark.parametrize(\"regularization\", [\"l0\", \"l1\", \"l2\"])\n@pytest.mark.parametrize(\n    \"lam\",\n    [\n        np.array([[1, 2]]),",
        "detail": "pysindy.test.utils.test_utils",
        "documentation": {}
    },
    {
        "label": "test_get_prox_and_regularization_bad_shape",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_utils",
        "description": "pysindy.test.utils.test_utils",
        "peekOfCode": "def test_get_prox_and_regularization_bad_shape(regularization, lam):\n    data = np.array([[-2, 5]]).T\n    reg = get_regularization(regularization)\n    with pytest.raises(ValueError):\n        reg(data, lam)\n    prox = get_prox(regularization)\n    with pytest.raises(ValueError):\n        prox(data, lam)\n@pytest.mark.parametrize(\"regularization\", [\"l0\", \"l1\", \"l2\"])\ndef test_get_weighted_prox_and_regularization_bad_shape(regularization):",
        "detail": "pysindy.test.utils.test_utils",
        "documentation": {}
    },
    {
        "label": "test_get_weighted_prox_and_regularization_bad_shape",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_utils",
        "description": "pysindy.test.utils.test_utils",
        "peekOfCode": "def test_get_weighted_prox_and_regularization_bad_shape(regularization):\n    lam = np.array([[1, 2]])\n    data = np.array([[-2, 5]]).T\n    reg = get_regularization(regularization)\n    with pytest.raises(ValueError):\n        reg(data, lam)\n    prox = get_prox(regularization)\n    with pytest.raises(ValueError):\n        prox(data, lam)\n@pytest.mark.parametrize(",
        "detail": "pysindy.test.utils.test_utils",
        "documentation": {}
    },
    {
        "label": "test_get_prox",
        "kind": 2,
        "importPath": "pysindy.test.utils.test_utils",
        "description": "pysindy.test.utils.test_utils",
        "peekOfCode": "def test_get_prox(regularization, lam, expected):\n    data = np.array([[2]])\n    prox = get_prox(regularization)\n    result = prox(data, lam)\n    assert_array_equal(result, expected)",
        "detail": "pysindy.test.utils.test_utils",
        "documentation": {}
    },
    {
        "label": "pytest_addoption",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def pytest_addoption(parser):\n    parser.addoption(\n        \"--external-notebook\",\n        action=\"append\",\n        default=[],\n        help=(\n            \"name of notebook to test.  Only valid if running\"\n            \" test_notebooks.test_external\"\n        ),\n    )",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "pytest_generate_tests",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def pytest_generate_tests(metafunc):\n    if \"external_notebook\" in metafunc.fixturenames:\n        metafunc.parametrize(\n            \"external_notebook\",\n            [\n                Path(f.lstrip('\"').rstrip('\"'))\n                for f in metafunc.config.getoption(\"external_notebook\")\n            ],\n        )\n@pytest.fixture(scope=\"session\")",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_1d",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_1d():\n    t = np.linspace(0, 1, 10)\n    x = 2 * t.reshape(-1, 1)\n    return x, t\n@pytest.fixture(scope=\"session\")\ndef data_1d_bad_shape():\n    t = np.linspace(0, 5, 10)\n    x = 2 * t\n    return x, t\n@pytest.fixture(scope=\"session\")",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_1d_bad_shape",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_1d_bad_shape():\n    t = np.linspace(0, 5, 10)\n    x = 2 * t\n    return x, t\n@pytest.fixture(scope=\"session\")\ndef data_lorenz():\n    t = np.linspace(0, 1, 12)\n    x0 = [8, 27, -7]\n    x = solve_ivp(lorenz, (t[0], t[-1]), x0, t_eval=t).y.T\n    return x, t",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_lorenz",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_lorenz():\n    t = np.linspace(0, 1, 12)\n    x0 = [8, 27, -7]\n    x = solve_ivp(lorenz, (t[0], t[-1]), x0, t_eval=t).y.T\n    return x, t\n@pytest.fixture\ndef data_multiple_trajectories():\n    n_points = [100, 200, 500]\n    initial_conditions = [\n        [8, 27, -7],",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_multiple_trajectories():\n    n_points = [100, 200, 500]\n    initial_conditions = [\n        [8, 27, -7],\n        [-10.9595724, 21.7346758, 24.5722540],\n        [-3.95406365, -9.21825124, 12.07459147],\n    ]\n    x_list = []\n    t_list = []\n    for n, x0 in zip(n_points, initial_conditions):",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "diffuse_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def diffuse_multiple_trajectories():\n    def diffuse(t, u, dx, nx):\n        u = np.reshape(u, nx)\n        du = SpectralDerivative(d=2, axis=0)._differentiate(u, dx)\n        return np.reshape(u * du, nx)\n    # Required for accurate solve_ivp results\n    integrator_keywords = {}\n    integrator_keywords[\"rtol\"] = 1e-8\n    integrator_keywords[\"method\"] = \"LSODA\"\n    integrator_keywords[\"atol\"] = 1e-8",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_discrete_time():\n    n_steps = 100\n    mu = 3.6\n    x = np.zeros((n_steps))\n    x[0] = 0.5\n    for i in range(1, n_steps):\n        x[i] = logistic_map(x[i - 1], mu)\n    return x\n@pytest.fixture(scope=\"session\")\ndef data_discrete_time_multiple_trajectories():",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_discrete_time_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_discrete_time_multiple_trajectories():\n    n_steps = 100\n    mus = [1, 2.3, 3.6]\n    x = [np.zeros((n_steps)) for mu in mus]\n    for i, mu in enumerate(mus):\n        x[i][0] = 0.5\n        for k in range(1, n_steps):\n            x[i][k] = logistic_map(x[i][k - 1], mu)\n    return x\n@pytest.fixture(scope=\"session\")",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_1d_random_pde",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_1d_random_pde():\n    n = 100\n    t = np.linspace(0, 10, n)\n    dt = t[1] - t[0]\n    x = np.linspace(0, 10, n)\n    u = np.random.randn(n, n, 1)\n    u_dot = FiniteDifference(axis=1)._differentiate(u, t=dt)\n    return t, x, u, u_dot\n@pytest.fixture(scope=\"session\")\ndef data_2d_random_pde():",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_2d_random_pde",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_2d_random_pde():\n    n = 4\n    t = np.linspace(0, 10, n)\n    dt = t[1] - t[0]\n    x = np.linspace(0, 10, n)\n    y = np.linspace(0, 10, n)\n    X, Y = np.meshgrid(x, y)\n    spatial_grid = np.asarray([X, Y]).T\n    u = np.random.randn(n, n, n, 2)\n    u_dot = FiniteDifference(axis=2)._differentiate(u, t=dt)",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_3d_random_pde",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_3d_random_pde():\n    n = 4\n    t = np.linspace(0, 10, n)\n    dt = t[1] - t[0]\n    x = np.linspace(0, 10, n)\n    y = np.linspace(0, 10, n)\n    z = np.linspace(0, 10, n)\n    (\n        X,\n        Y,",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_5d_random_pde",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_5d_random_pde():\n    n = 4\n    t = np.linspace(0, n, n)\n    dt = t[1] - t[0]\n    v = np.linspace(0, 10, n)\n    w = np.linspace(0, 10, n)\n    x = np.linspace(0, 10, n)\n    y = np.linspace(0, 10, n)\n    z = np.linspace(0, 10, n)\n    V, W, X, Y, Z = np.meshgrid(v, w, x, y, z, indexing=\"ij\")",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_2d_resolved_pde",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_2d_resolved_pde():\n    n = 8\n    nt = 1000\n    t = np.linspace(0, 10, nt)\n    dt = t[1] - t[0]\n    x = np.linspace(0, 10, n)\n    y = np.linspace(0, 10, n)\n    X, Y = np.meshgrid(x, y)\n    spatial_grid = np.asarray([X, Y]).T\n    u = np.random.randn(n, n, nt, 2)",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_derivative_1d",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_derivative_1d():\n    x = 2 * np.linspace(1, 100, 100)\n    x_dot = 2 * np.ones(100)\n    return x, x_dot\n@pytest.fixture(scope=\"session\")\ndef data_derivative_quasiperiodic_1d():\n    t = np.arange(1000) * 2 * np.pi / 1000\n    x = 2 * np.sin(t)\n    x_dot = 2 * np.cos(t)\n    return t, x, x_dot",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_derivative_quasiperiodic_1d",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_derivative_quasiperiodic_1d():\n    t = np.arange(1000) * 2 * np.pi / 1000\n    x = 2 * np.sin(t)\n    x_dot = 2 * np.cos(t)\n    return t, x, x_dot\n@pytest.fixture(scope=\"session\")\ndef data_derivative_2d():\n    x = np.zeros((100, 2))\n    x[:, 0] = 2 * np.linspace(1, 100, 100)\n    x[:, 1] = -10 * np.linspace(1, 100, 100)",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_derivative_2d",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_derivative_2d():\n    x = np.zeros((100, 2))\n    x[:, 0] = 2 * np.linspace(1, 100, 100)\n    x[:, 1] = -10 * np.linspace(1, 100, 100)\n    x_dot = np.ones((100, 2))\n    x_dot[:, 0] *= 2\n    x_dot[:, 1] *= -10\n    return x, x_dot\n@pytest.fixture(scope=\"session\")\ndef data_derivative_quasiperiodic_2d():",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_derivative_quasiperiodic_2d",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_derivative_quasiperiodic_2d():\n    t = np.arange(1000) * 2 * np.pi / 1000\n    x = np.zeros((1000, 2))\n    x[:, 0] = 2 * np.sin(t)\n    x[:, 1] = 2 * np.cos(2 * t)\n    x_dot = np.zeros((1000, 2))\n    x_dot[:, 0] = 2 * np.cos(t)\n    x_dot[:, 1] = -4 * np.sin(2 * t)\n    return t, x, x_dot\n@pytest.fixture(scope=\"session\")",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_2dspatial",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_2dspatial():\n    u = np.zeros((100, 50, 2))\n    x = np.linspace(1, 100, 100)\n    y = np.linspace(1, 50, 50)\n    X, Y = np.meshgrid(x, y, indexing=\"ij\")\n    u[:, :, 0] = np.cos(X) * np.sin(Y)\n    u[:, :, 1] = -np.sin(X) * np.cos(Y) ** 2\n    return x, y, u\n@pytest.fixture\ndef custom_library():",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "custom_library",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def custom_library():\n    library_functions = [\n        lambda x: x,\n        lambda x: x**2,\n        lambda x: 0 * x,\n        lambda x, y: x * y,\n    ]\n    function_names = [\n        lambda s: str(s),\n        lambda s: str(s) + \"^2\",",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "custom_library_bias",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def custom_library_bias():\n    library_functions = [\n        lambda x: x,\n        lambda x: x**2,\n        lambda x: 0 * x,\n        lambda x, y: x * y,\n    ]\n    function_names = [\n        lambda s: str(s),\n        lambda s: str(s) + \"^2\",",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "generalized_library",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def generalized_library():\n    tensor_array = [[1, 1]]\n    return GeneralizedLibrary(\n        [PolynomialLibrary(), FourierLibrary()],\n        tensor_array=tensor_array,\n    )\n@pytest.fixture\ndef sindypi_library(data_lorenz):\n    function_library = PolynomialLibrary(degree=2, include_bias=False)\n    _, t = data_lorenz",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "sindypi_library",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def sindypi_library(data_lorenz):\n    function_library = PolynomialLibrary(degree=2, include_bias=False)\n    _, t = data_lorenz\n    return PDELibrary(\n        function_library=function_library,\n        temporal_grid=t,\n        implicit_terms=True,\n        derivative_order=1,\n    )\n@pytest.fixture",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "ode_library",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def ode_library():\n    function_library = PolynomialLibrary(degree=2, include_bias=False)\n    return PDELibrary(\n        function_library=function_library,\n    )\n@pytest.fixture\ndef pde_library(data_lorenz):\n    _, spatial_grid = data_lorenz\n    function_library = PolynomialLibrary(degree=2, include_bias=False)\n    return PDELibrary(",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "pde_library",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def pde_library(data_lorenz):\n    _, spatial_grid = data_lorenz\n    function_library = PolynomialLibrary(degree=2, include_bias=False)\n    return PDELibrary(\n        function_library=function_library,\n        spatial_grid=spatial_grid,\n        derivative_order=4,\n    )\n@pytest.fixture(scope=\"session\")\ndef data_linear_oscillator_corrupted():",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_linear_oscillator_corrupted",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_linear_oscillator_corrupted():\n    t = np.linspace(0, 1, 100)\n    x = 3 * np.exp(-2 * t)\n    y = 0.5 * np.exp(t)\n    np.random.seed(1)\n    corrupt_idxs = np.random.choice(np.arange(1, t.size - 1), t.size // 20)\n    x[corrupt_idxs] = 0\n    X = np.stack((x, y), axis=-1)\n    X_dot = FiniteDifference(order=2)(X, t)\n    # build an array of the indices of samples that should be trimmed",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_linear_combination",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_linear_combination():\n    t = np.linspace(0, 3, 100).reshape((-1, 1))\n    lib = PolynomialLibrary(2, include_bias=False)\n    x = lib.fit_transform(np.hstack([t, -2 * t, 3 * t]))\n    y = np.stack((x[:, 0] + x[:, 1], x[:, 1] + x[:, 2], x[:, 0] + x[:, 2]), axis=-1)\n    return x, y\n# Datasets with control inputs\n@pytest.fixture(scope=\"session\")\ndef data_lorenz_c_1d():\n    def u_fun(t):",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_lorenz_c_1d",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_lorenz_c_1d():\n    def u_fun(t):\n        if len(np.shape(t)) == 0:\n            return np.column_stack([np.sin(2 * t), 0])\n        else:\n            return np.column_stack([np.sin(2 * t), np.zeros(len(t))])\n    t = np.linspace(0, 1, 100)\n    x0 = [8, 27, -7]\n    x = solve_ivp(lorenz_control, (t[0], t[-1]), x0, t_eval=t, args=(u_fun,)).y.T\n    u = u_fun(t)",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_lorenz_c_2d",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_lorenz_c_2d():\n    def u_fun(t):\n        return np.column_stack([np.sin(2 * t), t**2])\n    t = np.linspace(0, 1, 100)\n    x0 = [8, 27, -7]\n    x = solve_ivp(lorenz_control, (t[0], t[-1]), x0, t_eval=t, args=(u_fun,)).y.T\n    u = u_fun(t)\n    return x, t, u, u_fun\n@pytest.fixture(scope=\"session\")\ndef data_discrete_time_c():",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_discrete_time_c",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_discrete_time_c():\n    n_steps = 100\n    mu = 3.6\n    u = 0.01 * np.random.randn(n_steps)\n    x = np.zeros((n_steps))\n    x[0] = 0.5\n    for i in range(1, n_steps):\n        x[i] = logistic_map_control(x[i - 1], mu, u[i - 1])\n    return x, u\n@pytest.fixture(scope=\"session\")",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_discrete_time_c_multivariable",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_discrete_time_c_multivariable():\n    n_steps = 100\n    mu = 3.6\n    u1 = 0.1 * np.random.randn(n_steps)\n    u2 = 0.1 * np.random.randn(n_steps)\n    u = np.column_stack((u1, u2))\n    x = np.zeros((n_steps))\n    x[0] = 0.5\n    for i in range(1, n_steps):\n        x[i] = logistic_map_multicontrol(x[i - 1], mu, u[i - 1])",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "data_discrete_time_multiple_trajectories_c",
        "kind": 2,
        "importPath": "pysindy.test.conftest",
        "description": "pysindy.test.conftest",
        "peekOfCode": "def data_discrete_time_multiple_trajectories_c():\n    n_steps = 100\n    mus = [1, 2.3, 3.6]\n    u = [0.001 * np.random.randn(n_steps) for mu in mus]\n    x = [np.zeros((n_steps)) for mu in mus]\n    for i, mu in enumerate(mus):\n        x[i][0] = 0.5\n        for k in range(1, n_steps):\n            x[i][k] = logistic_map_control(x[i][k - 1], mu, u[i][k - 1])\n    return x, u",
        "detail": "pysindy.test.conftest",
        "documentation": {}
    },
    {
        "label": "test_methods_store_smoothed_x_",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_methods_store_smoothed_x_(data_derivative_1d, method):\n    x, _ = data_derivative_1d\n    assert not hasattr(method, \"smoothed_x_\")\n    method(x)\n    assert hasattr(method, \"smoothed_x_\")\n    assert x.shape == method.smoothed_x_.shape\ndef test_methods_smoothedfd_smooths(data_derivative_1d):\n    x, _ = data_derivative_1d\n    x_noisy = x + np.random.normal(size=x.shape)\n    method = SmoothedFiniteDifference()",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_methods_smoothedfd_smooths",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_methods_smoothedfd_smooths(data_derivative_1d):\n    x, _ = data_derivative_1d\n    x_noisy = x + np.random.normal(size=x.shape)\n    method = SmoothedFiniteDifference()\n    _ = method(x_noisy)\n    result = method.smoothed_x_\n    assert np.linalg.norm(result - x) < np.linalg.norm(x_noisy - x)\ndef test_methods_smoothedfd_not_save_smooth(data_derivative_1d):\n    x, _ = data_derivative_1d\n    method = SmoothedFiniteDifference(save_smooth=False)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_methods_smoothedfd_not_save_smooth",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_methods_smoothedfd_not_save_smooth(data_derivative_1d):\n    x, _ = data_derivative_1d\n    method = SmoothedFiniteDifference(save_smooth=False)\n    _ = method(x)\n    result = method.smoothed_x_\n    np.testing.assert_allclose(x, result)\ndef test_forward_difference_length():\n    x = 2 * np.linspace(1, 100, 100)\n    forward_difference = FiniteDifference(order=1)\n    assert len(forward_difference(x)) == len(x)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_forward_difference_length",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_forward_difference_length():\n    x = 2 * np.linspace(1, 100, 100)\n    forward_difference = FiniteDifference(order=1)\n    assert len(forward_difference(x)) == len(x)\n    forward_difference_nans = FiniteDifference(order=1, drop_endpoints=True)\n    assert len(forward_difference_nans(x)) == len(x)\ndef test_forward_difference_variable_timestep_length():\n    t = np.linspace(1, 10, 100) ** 2\n    x = 2 * t\n    forward_difference = FiniteDifference(order=1)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_forward_difference_variable_timestep_length",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_forward_difference_variable_timestep_length():\n    t = np.linspace(1, 10, 100) ** 2\n    x = 2 * t\n    forward_difference = FiniteDifference(order=1)\n    assert len(forward_difference(x, t) == len(x))\ndef test_centered_difference_length():\n    x = 2 * np.linspace(1, 100, 100)\n    centered_difference = FiniteDifference(order=2)\n    assert len(centered_difference(x)) == len(x)\n    centered_difference_nans = FiniteDifference(order=2, drop_endpoints=True)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_length",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_length():\n    x = 2 * np.linspace(1, 100, 100)\n    centered_difference = FiniteDifference(order=2)\n    assert len(centered_difference(x)) == len(x)\n    centered_difference_nans = FiniteDifference(order=2, drop_endpoints=True)\n    assert len(centered_difference_nans(x)) == len(x)\ndef test_centered_difference_variable_timestep_length():\n    t = np.linspace(1, 10, 100) ** 2\n    x = 2 * t\n    centered_difference = FiniteDifference(order=2)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_variable_timestep_length",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_variable_timestep_length():\n    t = np.linspace(1, 10, 100) ** 2\n    x = 2 * t\n    centered_difference = FiniteDifference(order=2)\n    assert len(centered_difference(x, t) == len(x))\ndef test_nan_derivatives(data_lorenz):\n    x, t = data_lorenz\n    x_dot = FiniteDifference(drop_endpoints=False)(x, t)\n    x_dot_nans = FiniteDifference(drop_endpoints=True)(x, t)\n    np.testing.assert_allclose(x_dot_nans[1:-1], x_dot[1:-1])",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_nan_derivatives",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_nan_derivatives(data_lorenz):\n    x, t = data_lorenz\n    x_dot = FiniteDifference(drop_endpoints=False)(x, t)\n    x_dot_nans = FiniteDifference(drop_endpoints=True)(x, t)\n    np.testing.assert_allclose(x_dot_nans[1:-1], x_dot[1:-1])\n    assert np.isnan(x_dot_nans[:1]).all() and np.isnan(x_dot_nans[-1:]).all()\ndef test_forward_difference_1d(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    forward_difference = FiniteDifference(order=1)\n    np.testing.assert_allclose(forward_difference(x), x_dot)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_forward_difference_1d",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_forward_difference_1d(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    forward_difference = FiniteDifference(order=1)\n    np.testing.assert_allclose(forward_difference(x), x_dot)\ndef test_forward_difference_2d(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    forward_difference = FiniteDifference(order=1)\n    np.testing.assert_allclose(forward_difference(x), x_dot)\ndef test_centered_difference_1d(data_derivative_1d):\n    x, x_dot = data_derivative_1d",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_forward_difference_2d",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_forward_difference_2d(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    forward_difference = FiniteDifference(order=1)\n    np.testing.assert_allclose(forward_difference(x), x_dot)\ndef test_centered_difference_1d(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    centered_difference = FiniteDifference(order=2)\n    np.testing.assert_allclose(centered_difference(x), x_dot)\ndef test_spectral_derivative_1d(data_derivative_quasiperiodic_1d):\n    t, x, x_dot = data_derivative_quasiperiodic_1d",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_1d",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_1d(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    centered_difference = FiniteDifference(order=2)\n    np.testing.assert_allclose(centered_difference(x), x_dot)\ndef test_spectral_derivative_1d(data_derivative_quasiperiodic_1d):\n    t, x, x_dot = data_derivative_quasiperiodic_1d\n    spectral_derivative = SpectralDerivative()\n    np.testing.assert_allclose(spectral_derivative(x, t), x_dot, atol=1e-12)\n    centered_difference = FiniteDifference(order=2, periodic=True)._differentiate(x, t)\n    np.testing.assert_allclose(",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_spectral_derivative_1d",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_spectral_derivative_1d(data_derivative_quasiperiodic_1d):\n    t, x, x_dot = data_derivative_quasiperiodic_1d\n    spectral_derivative = SpectralDerivative()\n    np.testing.assert_allclose(spectral_derivative(x, t), x_dot, atol=1e-12)\n    centered_difference = FiniteDifference(order=2, periodic=True)._differentiate(x, t)\n    np.testing.assert_allclose(\n        centered_difference[0], centered_difference[-1], rtol=1e-4\n    )\ndef test_centered_difference_2d(data_derivative_2d):\n    x, x_dot = data_derivative_2d",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_2d",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_2d(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    centered_difference = FiniteDifference(order=2)\n    np.testing.assert_allclose(centered_difference(x), x_dot)\ndef test_spectral_derivative_2d(data_derivative_quasiperiodic_2d):\n    t, x, x_dot = data_derivative_quasiperiodic_2d\n    spectral_derivative = SpectralDerivative()\n    np.testing.assert_allclose(spectral_derivative(x, t), x_dot, atol=1e-12)\n    centered_difference = FiniteDifference(order=2, periodic=True)._differentiate(x, t)\n    np.testing.assert_allclose(",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_spectral_derivative_2d",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_spectral_derivative_2d(data_derivative_quasiperiodic_2d):\n    t, x, x_dot = data_derivative_quasiperiodic_2d\n    spectral_derivative = SpectralDerivative()\n    np.testing.assert_allclose(spectral_derivative(x, t), x_dot, atol=1e-12)\n    centered_difference = FiniteDifference(order=2, periodic=True)._differentiate(x, t)\n    np.testing.assert_allclose(\n        centered_difference[0, 0], centered_difference[-1, 0], rtol=1e-4\n    )\ndef test_centered_difference_2d_uniform(data_derivative_2d):\n    x, x_dot = data_derivative_2d",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_2d_uniform",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_2d_uniform(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    centered_difference = FiniteDifference(order=2, is_uniform=True)\n    np.testing.assert_allclose(centered_difference(x), x_dot)\ndef test_centered_difference_2d_uniform_time(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    t = np.linspace(0, x.shape[0] - 1, x.shape[0])\n    centered_difference = FiniteDifference(order=2)\n    np.testing.assert_allclose(centered_difference(x, t), x_dot)\ndef test_centered_difference_2d_nonuniform_time(data_derivative_2d):",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_2d_uniform_time",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_2d_uniform_time(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    t = np.linspace(0, x.shape[0] - 1, x.shape[0])\n    centered_difference = FiniteDifference(order=2)\n    np.testing.assert_allclose(centered_difference(x, t), x_dot)\ndef test_centered_difference_2d_nonuniform_time(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    t = np.linspace(0, x.shape[0] - 1, x.shape[0])\n    centered_difference = FiniteDifference(order=2)\n    np.testing.assert_allclose(centered_difference(x, t), x_dot, atol=1e-8)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_2d_nonuniform_time",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_2d_nonuniform_time(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    t = np.linspace(0, x.shape[0] - 1, x.shape[0])\n    centered_difference = FiniteDifference(order=2)\n    np.testing.assert_allclose(centered_difference(x, t), x_dot, atol=1e-8)\ndef test_centered_difference_xy_yx(data_2dspatial):\n    x_grid, y_grid, u = data_2dspatial\n    u_xy = np.zeros(u.shape)\n    u_yx = np.zeros(u.shape)\n    u_y = FiniteDifference(order=2, d=1, axis=1)._differentiate(u, y_grid)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_xy_yx",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_xy_yx(data_2dspatial):\n    x_grid, y_grid, u = data_2dspatial\n    u_xy = np.zeros(u.shape)\n    u_yx = np.zeros(u.shape)\n    u_y = FiniteDifference(order=2, d=1, axis=1)._differentiate(u, y_grid)\n    u_x = FiniteDifference(order=2, d=1, axis=0)._differentiate(u, x_grid)\n    u_xy = FiniteDifference(order=2, d=1, axis=1)._differentiate(u_x, y_grid)\n    u_yx = FiniteDifference(order=2, d=1, axis=0)._differentiate(u_y, x_grid)\n    np.testing.assert_allclose(u_xy, u_yx)\n    u_y = FiniteDifference(order=1, d=1, axis=1)._differentiate(u, y_grid)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_hot",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_hot(data_derivative_2d):\n    x, _ = data_derivative_2d\n    t = np.linspace(0, x.shape[0], x.shape[0])\n    dt = t[1] - t[0]\n    atol = 1e-8\n    for d in range(1, 2):\n        forward_difference = FiniteDifference(order=1, d=d)._differentiate\n        np.testing.assert_allclose(\n            forward_difference(x, t=dt),\n            forward_difference(x, t=t),",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_finite_difference",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_finite_difference(data, order):\n    x, x_dot = data\n    method = FiniteDifference(order=order)\n    np.testing.assert_allclose(method(x), x_dot)\n    method = SmoothedFiniteDifference()\n    np.testing.assert_allclose(method(x), x_dot)\ndef test_order_error():\n    with pytest.raises(ValueError):\n        FiniteDifference(order=-1)\n    with pytest.raises(ValueError):",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_order_error",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_order_error():\n    with pytest.raises(ValueError):\n        FiniteDifference(order=-1)\n    with pytest.raises(ValueError):\n        FiniteDifference(d=-1)\n    with pytest.raises(ValueError):\n        FiniteDifference(d=2, order=1)\n    with pytest.raises(ValueError):\n        FiniteDifference(d=1, order=0.5)\n    with pytest.raises(ValueError):",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_base_class",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_base_class(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    with pytest.raises(NotImplementedError):\n        BaseDifferentiation()._differentiate(x)\n# Test smoothed finite difference method\n@pytest.mark.parametrize(\n    \"data\",\n    [\n        pytest.lazy_fixture(\"data_derivative_1d\"),\n        pytest.lazy_fixture(\"data_derivative_2d\"),",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_smoothed_finite_difference",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_smoothed_finite_difference(data):\n    x, x_dot = data\n    smoothed_centered_difference = SmoothedFiniteDifference()\n    np.testing.assert_allclose(smoothed_centered_difference(x), x_dot)\n@pytest.mark.parametrize(\n    \"data, derivative_kws\",\n    [\n        (pytest.lazy_fixture(\"data_derivative_1d\"), dict(kind=\"spectral\")),\n        (pytest.lazy_fixture(\"data_derivative_2d\"), dict(kind=\"spectral\")),\n        (pytest.lazy_fixture(\"data_derivative_1d\"), dict(kind=\"spline\", s=1e-2)),",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_wrapper_equivalence_with_dxdt",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_wrapper_equivalence_with_dxdt(data, derivative_kws):\n    x, _ = data\n    t = np.arange(x.shape[0])\n    if np.ndim(x) == 1:\n        np.testing.assert_allclose(\n            dxdt(x, t, axis=0, **derivative_kws),\n            SINDyDerivative(**derivative_kws)(x, t),\n        )\n    else:\n        np.testing.assert_allclose(",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_sindy_derivative_kwarg_update",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_sindy_derivative_kwarg_update():\n    method = SINDyDerivative(kind=\"spectral\", foo=2)\n    method.set_params(kwargs={\"kind\": \"spline\", \"foo\": 1})\n    assert method.kwargs[\"kind\"] == \"spline\"\n    assert method.kwargs[\"foo\"] == 1\n@pytest.mark.parametrize(\n    \"data, derivative_kws\",\n    [\n        (pytest.lazy_fixture(\"data_derivative_1d\"), dict(kind=\"spectral\")),\n        (pytest.lazy_fixture(\"data_derivative_2d\"), dict(kind=\"spectral\")),",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_derivative_output_shape",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_derivative_output_shape(data, derivative_kws):\n    x, x_dot = data\n    t = np.arange(x.shape[0])\n    method = SINDyDerivative(**derivative_kws)\n    assert x_dot.shape == method(x).shape\n    assert x_dot.shape == method(x, t).shape\ndef test_bad_t_values(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    method = SINDyDerivative(kind=\"finite_difference\", k=1)\n    with pytest.raises(ValueError):",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_bad_t_values",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_bad_t_values(data_derivative_1d):\n    x, x_dot = data_derivative_1d\n    method = SINDyDerivative(kind=\"finite_difference\", k=1)\n    with pytest.raises(ValueError):\n        method(x, t=-1)\n    with pytest.raises(ValueError):\n        method._differentiate(x, t=-1)\ndef test_centered_difference_hot_axis(data_2d_resolved_pde):\n    _, u_flat, u_dot_flat = data_2d_resolved_pde\n    x = np.reshape(u_flat, (8, 8, 1000, 2))",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_hot_axis",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_hot_axis(data_2d_resolved_pde):\n    _, u_flat, u_dot_flat = data_2d_resolved_pde\n    x = np.reshape(u_flat, (8, 8, 1000, 2))\n    t = np.linspace(0, 10, 1000)\n    dt = t[1] - t[0]\n    atol = 1e-8\n    for d in range(1, 2):\n        forward_difference = FiniteDifference(order=1, d=d, axis=-2)._differentiate\n        np.testing.assert_allclose(\n            forward_difference(x, t=dt),",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_centered_difference_noaxis_vs_axis",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_centered_difference_noaxis_vs_axis(data_2d_resolved_pde):\n    _, u_flat, u_dot_flat = data_2d_resolved_pde\n    n = 8\n    x = np.reshape(u_flat, (n, n, 1000, 2))\n    t = np.linspace(0, 10, 1000)\n    dt = t[1] - t[0]\n    atol = 1e-10\n    for d in range(1, 6):\n        centered_difference = FiniteDifference(order=2, d=d, axis=-2)._differentiate\n        slow_differences = np.zeros(x.shape)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_nd_differentiation",
        "kind": 2,
        "importPath": "pysindy.test.test_differentiation",
        "description": "pysindy.test.test_differentiation",
        "peekOfCode": "def test_nd_differentiation(derivative, kwargs):\n    t = np.arange(3)\n    x = np.random.random(size=(2, 3, 2))\n    x[1, :, 1] = 1\n    xdot = derivative(**kwargs)._differentiate(x, t)\n    expected = np.zeros(3)\n    np.testing.assert_array_almost_equal(xdot[1, :, 1], expected)",
        "detail": "pysindy.test.test_differentiation",
        "documentation": {}
    },
    {
        "label": "test_form_custom_library",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_form_custom_library():\n    library_functions = [lambda x: x, lambda x: x**2, lambda x: 0 * x]\n    function_names = [\n        lambda s: str(s),\n        lambda s: \"{}^2\".format(s),\n        lambda s: \"0\",\n    ]\n    # Test with user-supplied function names\n    CustomLibrary(library_functions=library_functions, function_names=function_names)\n    # Test without user-supplied function names",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_form_pde_library",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_form_pde_library():\n    function_library = PolynomialLibrary(degree=3, include_bias=False)\n    # Test with user-supplied function names\n    PDELibrary(function_library=function_library)\ndef test_form_sindy_pi_library():\n    library_functions = [lambda x: x, lambda x: x**2, lambda x: 0 * x]\n    function_names = [\n        lambda s: str(s),\n        lambda s: \"{}^2\".format(s),\n        lambda s: \"0\",",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_form_sindy_pi_library",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_form_sindy_pi_library():\n    library_functions = [lambda x: x, lambda x: x**2, lambda x: 0 * x]\n    function_names = [\n        lambda s: str(s),\n        lambda s: \"{}^2\".format(s),\n        lambda s: \"0\",\n    ]\n    # Test with user-supplied function names\n    SINDyPILibrary(library_functions=library_functions, function_names=function_names)\n    # Test without user-supplied function names",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_bad_parameters():\n    with pytest.raises(ValueError):\n        PolynomialLibrary(degree=-1).fit(np.array([]))\n    with pytest.raises(ValueError):\n        PolynomialLibrary(degree=1.5).fit(np.array([]))\n    with pytest.raises(ValueError):\n        PolynomialLibrary(include_interaction=False, interaction_only=True).fit(\n            np.array([])\n        )\n    with pytest.raises(ValueError):",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_pde_library_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_pde_library_bad_parameters(params):\n    with pytest.raises(ValueError):\n        PDELibrary(**params)\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(spatiotemporal_grid=range(10), p=-1),\n        dict(spatiotemporal_grid=range(10), H_xt=-1),\n        dict(spatiotemporal_grid=range(10), H_xt=11),\n        dict(spatiotemporal_grid=range(10), K=-1),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_weak_pde_library_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_weak_pde_library_bad_parameters(params):\n    with pytest.raises(ValueError):\n        WeakPDELibrary(**params)\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(libraries=[]),\n        dict(\n            libraries=[PolynomialLibrary(), PolynomialLibrary()], tensor_array=[[0, 0]]\n        ),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_generalized_library_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_generalized_library_bad_parameters(data_lorenz, params):\n    with pytest.raises(ValueError):\n        lib = GeneralizedLibrary(**params)\n        x, t = data_lorenz\n        lib.fit(x)\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(num_parameters=0, num_features=1),\n        dict(num_parameters=1, num_features=0),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_parameterized_library_bad_parameters",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_parameterized_library_bad_parameters(data_lorenz, params):\n    with pytest.raises(ValueError):\n        lib = ParameterizedLibrary(**params)\n        x, t = data_lorenz\n        lib.fit(x)\n@pytest.mark.parametrize(\n    \"params\",\n    [\n        dict(\n            library_functions=[lambda x: x, lambda x: x**2, lambda x: 0 * x],",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_sindypi_library_bad_params",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_sindypi_library_bad_params(params):\n    with pytest.raises(ValueError):\n        SINDyPILibrary(**params)\n@pytest.mark.parametrize(\n    \"library\",\n    [\n        PolynomialLibrary(),\n        PolynomialLibrary(include_bias=False),\n        FourierLibrary(),\n        IdentityLibrary() + PolynomialLibrary(),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_fit_transform",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_fit_transform(data_lorenz, library):\n    x, t = data_lorenz\n    library.fit_transform(x)\n    check_is_fitted(library)\n@pytest.mark.parametrize(\n    \"library\",\n    [\n        PolynomialLibrary(),\n        PolynomialLibrary(include_bias=False),\n        FourierLibrary(),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_change_in_data_shape",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_change_in_data_shape(data_lorenz, library):\n    x, t = data_lorenz\n    library.fit(x)\n    with pytest.raises(ValueError):\n        library.transform(x[:, 1:])\n@pytest.mark.parametrize(\n    \"library, shape\",\n    [\n        (PolynomialLibrary(include_bias=False), 9),\n        (PolynomialLibrary(), 10),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_output_shape",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_output_shape(data_lorenz, library, shape):\n    x, t = data_lorenz\n    y = library.fit_transform(x)\n    expected_shape = (x.shape[0], shape)\n    assert y.shape == expected_shape\n    assert library.size > 0\n@pytest.mark.parametrize(\n    \"library\",\n    [\n        PolynomialLibrary(),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_get_feature_names",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_get_feature_names(data_lorenz, library):\n    with pytest.raises(NotFittedError):\n        library.get_feature_names()\n    x, t = data_lorenz\n    library.fit_transform(x)\n    feature_names = library.get_feature_names()\n    assert isinstance(feature_names, list)\n    assert isinstance(feature_names[0], str)\n    input_features = [\"a\"] * x.shape[1]\n    library.get_feature_names(input_features=input_features)",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_polynomial_options",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_polynomial_options(data_lorenz, kwargs, sparse_format):\n    x, t = data_lorenz\n    library = PolynomialLibrary(**kwargs)\n    out = library.fit_transform(sparse_format(x))\n    check_is_fitted(library)\n    expected = len(library.powers_)\n    result = out.shape[1]\n    assert result == expected\n# Catch-all for various combinations of options and\n# inputs for Fourier features",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_fourier_options",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_fourier_options(data_lorenz):\n    x, t = data_lorenz\n    library = FourierLibrary(include_cos=False)\n    library.fit_transform(x)\n    check_is_fitted(library)\ndef test_not_implemented(data_lorenz):\n    x, t = data_lorenz\n    library = BaseFeatureLibrary()\n    with pytest.raises(NotImplementedError):\n        library.fit(x)",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_not_implemented",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_not_implemented(data_lorenz):\n    x, t = data_lorenz\n    library = BaseFeatureLibrary()\n    with pytest.raises(NotImplementedError):\n        library.fit(x)\n    with pytest.raises(NotImplementedError):\n        library.transform(x)\n    with pytest.raises(NotImplementedError):\n        library.get_feature_names(x)\ndef test_concat(data_lorenz):",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_concat",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_concat(data_lorenz):\n    x, t = data_lorenz\n    ident_lib = IdentityLibrary()\n    poly_lib = PolynomialLibrary()\n    concat_lib = ident_lib + poly_lib\n    assert isinstance(concat_lib, ConcatLibrary)\n    concat_lib.fit(x)\n    check_is_fitted(concat_lib)\n    concat_lib.fit_transform(x)\n    check_is_fitted(concat_lib)",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_tensored",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_tensored(data_lorenz):\n    x, t = data_lorenz\n    ident_lib = IdentityLibrary()\n    poly_lib = PolynomialLibrary()\n    tensored_lib = ident_lib * poly_lib\n    assert isinstance(tensored_lib, TensoredLibrary)\n    tensored_lib.fit(x)\n    check_is_fitted(tensored_lib)\n    tensored_lib.fit_transform(x)\n    check_is_fitted(tensored_lib)",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_not_fitted",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_not_fitted(data_lorenz, library):\n    x, t = data_lorenz\n    with pytest.raises(NotFittedError):\n        library.transform(x)\ndef test_generalized_library(data_lorenz):\n    x, t = data_lorenz\n    poly_library = PolynomialLibrary(include_bias=False)\n    fourier_library = FourierLibrary()\n    library_functions = [\n        lambda x: np.exp(x),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_generalized_library",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_generalized_library(data_lorenz):\n    x, t = data_lorenz\n    poly_library = PolynomialLibrary(include_bias=False)\n    fourier_library = FourierLibrary()\n    library_functions = [\n        lambda x: np.exp(x),\n        lambda x: 1.0 / x,\n        lambda x, y: np.sin(x + y),\n    ]\n    custom_library = CustomLibrary(",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_generalized_library_pde",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_generalized_library_pde(data_1d_random_pde):\n    t, x, u, u_dot = data_1d_random_pde\n    poly_library = PolynomialLibrary(include_bias=False)\n    fourier_library = FourierLibrary()\n    pde_library = PDELibrary(\n        function_library=PolynomialLibrary(degree=2, include_bias=False),\n        derivative_order=2,\n        spatial_grid=x,\n        include_bias=True,\n    )",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_generalized_library_weak_pde",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_generalized_library_weak_pde(data_1d_random_pde):\n    t, x, u, u_dot = data_1d_random_pde\n    X, T = np.meshgrid(x, t)\n    XT = np.array([X, T]).T\n    weak_library1 = WeakPDELibrary(\n        function_library=PolynomialLibrary(degree=2, include_bias=False),\n        derivative_order=2,\n        spatiotemporal_grid=XT,\n        include_bias=True,\n    )",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_parameterized_library",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_parameterized_library(diffuse_multiple_trajectories):\n    t, spatial_grid, xs = diffuse_multiple_trajectories\n    us = []\n    for i in range(len(xs)):\n        u = np.zeros(xs[0].shape)\n        us = us + [u]\n    feature_lib = PDELibrary(\n        function_library=PolynomialLibrary(degree=1, include_bias=False),\n        derivative_order=2,\n        spatial_grid=spatial_grid,",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "pde_library_helper",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def pde_library_helper(library, u):\n    base_opt = STLSQ(normalize_columns=True, alpha=1e-10, threshold=0)\n    model = SINDy(optimizer=base_opt, feature_library=library)\n    model.fit(u)\n    assert np.any(base_opt.coef_ != 0.0)\ndef test_1D_pdes(data_1d_random_pde):\n    _, spatial_grid, u, _ = data_1d_random_pde\n    pde_lib = PDELibrary(\n        function_library=PolynomialLibrary(degree=2, include_bias=False),\n        derivative_order=4,",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_1D_pdes",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_1D_pdes(data_1d_random_pde):\n    _, spatial_grid, u, _ = data_1d_random_pde\n    pde_lib = PDELibrary(\n        function_library=PolynomialLibrary(degree=2, include_bias=False),\n        derivative_order=4,\n        spatial_grid=spatial_grid,\n        include_bias=True,\n    )\n    pde_library_helper(pde_lib, u)\ndef test_1D_weak_pdes():",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_1D_weak_pdes",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_1D_weak_pdes():\n    n = 10\n    t = np.linspace(0, 10, n)\n    x = np.linspace(0, 10, n)\n    u = np.random.randn(n, n, 1)\n    X, T = np.meshgrid(x, t, indexing=\"ij\")\n    spatiotemporal_grid = np.asarray([X, T])\n    spatiotemporal_grid = np.transpose(spatiotemporal_grid, axes=[1, 2, 0])\n    pde_lib = WeakPDELibrary(\n        function_library=PolynomialLibrary(degree=2, include_bias=False),",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_sindypi_library",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_sindypi_library(data_lorenz):\n    x, t = data_lorenz\n    x_library_functions = [\n        lambda x: x,\n        lambda x, y: x * y,\n        lambda x: x**2,\n    ]\n    x_dot_library_functions = [lambda x: x]\n    library_function_names = [\n        lambda x: x,",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "test_polynomial_combinations",
        "kind": 2,
        "importPath": "pysindy.test.test_feature_library",
        "description": "pysindy.test.test_feature_library",
        "peekOfCode": "def test_polynomial_combinations(include_interaction, interaction_only, bias, expected):\n    combos = PolynomialLibrary._combinations(\n        n_features=2,\n        degree=2,\n        include_interaction=include_interaction,\n        interaction_only=interaction_only,\n        include_bias=bias,\n    )\n    result = tuple(sorted(list(combos)))\n    assert result == expected",
        "detail": "pysindy.test.test_feature_library",
        "documentation": {}
    },
    {
        "label": "purge_notebook_modules",
        "kind": 2,
        "importPath": "pysindy.test.test_notebooks",
        "description": "pysindy.test.test_notebooks",
        "peekOfCode": "def purge_notebook_modules():\n    \"\"\"Remove notebook modules from sys.modules after test.\n    Because these modules share common names in each notebook and\n    module names have a system-wide scope, import machinery will not\n    import new modules for successive notebooks unless old modules of\n    same name are removed from sys.modules.\n    This might be better served by fixing imports in notebooks using\n    importlib.\n    \"\"\"\n    local_modules = [",
        "detail": "pysindy.test.test_notebooks",
        "documentation": {}
    },
    {
        "label": "test_notebook_script",
        "kind": 2,
        "importPath": "pysindy.test.test_notebooks",
        "description": "pysindy.test.test_notebooks",
        "peekOfCode": "def test_notebook_script(directory: Path, purge_notebook_modules):\n    # Run in native directory with modified sys.path for imports to work\n    if \"17_\" in directory or \"5_\" in directory or \"8_\" in directory:\n        pytest.skip(\"Notebook runs too slowly.  Test manually\")\n    with _cwd(notebook_dir / directory):\n        try:\n            runpy.run_path(\n                str(notebook_dir / directory / \"example.py\"), run_name=\"testing\"\n            )\n        except SystemExit:",
        "detail": "pysindy.test.test_notebooks",
        "documentation": {}
    },
    {
        "label": "test_external",
        "kind": 2,
        "importPath": "pysindy.test.test_notebooks",
        "description": "pysindy.test.test_notebooks",
        "peekOfCode": "def test_external(external_notebook: Path, purge_notebook_modules):\n    with _cwd(external_notebook.resolve()):\n        try:\n            runpy.run_path(str(\"example.py\"), run_name=\"testing\")\n        except SystemExit:\n            pass\n@pytest.mark.parametrize(\"filename\", notebooks)\n@pytest.mark.slow\ndef test_notebook(filename):\n    nb = _load_notebook(notebook_dir / filename)",
        "detail": "pysindy.test.test_notebooks",
        "documentation": {}
    },
    {
        "label": "test_notebook",
        "kind": 2,
        "importPath": "pysindy.test.test_notebooks",
        "description": "pysindy.test.test_notebooks",
        "peekOfCode": "def test_notebook(filename):\n    nb = _load_notebook(notebook_dir / filename)\n    # Run in native directory to find data via relative path\n    with _cwd(notebook_dir):\n        ExecutePreprocessor(timeout=-1, kernel=_create_kernel).preprocess(nb)",
        "detail": "pysindy.test.test_notebooks",
        "documentation": {}
    },
    {
        "label": "notebook_dir",
        "kind": 5,
        "importPath": "pysindy.test.test_notebooks",
        "description": "pysindy.test.test_notebooks",
        "peekOfCode": "notebook_dir = Path(__file__).parent.parent / \"examples\"\nnotebooks = [nb.name for nb in notebook_dir.glob(\"*.ipynb\")]\nnotebook_scripts = []\nfor x in notebook_dir.iterdir():\n    if x.is_dir() and (x / \"example.py\").exists():\n        notebook_scripts.append(x.name)\ndef _load_notebook(filename: Path) -> nbformat.NotebookNode:\n    \"\"\"Load Jupyter Notebook as NotebookNode object.\"\"\"\n    with open(filename, \"r\") as fh:\n        notebook = nbformat.read(fh, as_version=4)",
        "detail": "pysindy.test.test_notebooks",
        "documentation": {}
    },
    {
        "label": "notebooks",
        "kind": 5,
        "importPath": "pysindy.test.test_notebooks",
        "description": "pysindy.test.test_notebooks",
        "peekOfCode": "notebooks = [nb.name for nb in notebook_dir.glob(\"*.ipynb\")]\nnotebook_scripts = []\nfor x in notebook_dir.iterdir():\n    if x.is_dir() and (x / \"example.py\").exists():\n        notebook_scripts.append(x.name)\ndef _load_notebook(filename: Path) -> nbformat.NotebookNode:\n    \"\"\"Load Jupyter Notebook as NotebookNode object.\"\"\"\n    with open(filename, \"r\") as fh:\n        notebook = nbformat.read(fh, as_version=4)\n    return notebook",
        "detail": "pysindy.test.test_notebooks",
        "documentation": {}
    },
    {
        "label": "notebook_scripts",
        "kind": 5,
        "importPath": "pysindy.test.test_notebooks",
        "description": "pysindy.test.test_notebooks",
        "peekOfCode": "notebook_scripts = []\nfor x in notebook_dir.iterdir():\n    if x.is_dir() and (x / \"example.py\").exists():\n        notebook_scripts.append(x.name)\ndef _load_notebook(filename: Path) -> nbformat.NotebookNode:\n    \"\"\"Load Jupyter Notebook as NotebookNode object.\"\"\"\n    with open(filename, \"r\") as fh:\n        notebook = nbformat.read(fh, as_version=4)\n    return notebook\ndef _create_kernel() -> str:",
        "detail": "pysindy.test.test_notebooks",
        "documentation": {}
    },
    {
        "label": "test_complexity_parameter",
        "kind": 2,
        "importPath": "pysindy.test.test_optimizers_complexity",
        "description": "pysindy.test.test_optimizers_complexity",
        "peekOfCode": "def test_complexity_parameter(\n    opt_cls, reg_name, n_samples, n_features, n_informative, random_state\n):\n    \"\"\"Behaviour test for complexity 2.\n    We assume that a model with a bigger regularization parameter is less complex.\n    \"\"\"\n    assume(n_informative <= n_features)\n    x, y = make_regression(\n        n_samples=n_samples,\n        n_features=n_features,",
        "detail": "pysindy.test.test_optimizers_complexity",
        "documentation": {}
    },
    {
        "label": "test_get_feature_names_len",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_get_feature_names_len(data_lorenz):\n    x, t = data_lorenz\n    model = SINDy()\n    with pytest.raises(NotFittedError):\n        model.get_feature_names()\n    model.fit(x, t)\n    # Assumes default library is polynomial features of degree 2\n    assert len(model.get_feature_names()) == 10\ndef test_not_fitted(data_1d):\n    x, t = data_1d",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_not_fitted",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_not_fitted(data_1d):\n    x, t = data_1d\n    model = SINDy()\n    with pytest.raises(NotFittedError):\n        model.predict(x)\n    with pytest.raises(NotFittedError):\n        model.get_feature_names()\n    with pytest.raises(NotFittedError):\n        model.coefficients()\n    with pytest.raises(NotFittedError):",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_improper_shape_input",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_improper_shape_input(data_1d):\n    x, t = data_1d\n    # Ensure model successfully handles different data shapes\n    model = SINDy()\n    model.fit(x.flatten(), t)\n    check_is_fitted(model)\n    model = SINDy()\n    model.fit(x.flatten(), t, x_dot=x.flatten())\n    check_is_fitted(model)\n    model = SINDy()",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_mixed_inputs",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_mixed_inputs(data):\n    x, t = data\n    # Scalar t\n    model = SINDy()\n    model.fit(x, t=2)\n    check_is_fitted(model)\n    # x_dot is passed in\n    model = SINDy()\n    model.fit(x, x_dot=x)\n    check_is_fitted(model)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_bad_t",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_bad_t(data):\n    x, t = data\n    model = SINDy()\n    # Wrong type\n    with pytest.raises(ValueError):\n        model.fit(x, t=\"1\")\n    # Invalid value of t\n    with pytest.raises(ValueError):\n        model.fit(x, t=-1)\n    # t is a list",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_t_default",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_t_default(data):\n    x, t = data\n    dt = t[1] - t[0]\n    with pytest.raises(ValueError):\n        model = SINDy(t_default=0)\n    with pytest.raises(ValueError):\n        model = SINDy(t_default=\"1\")\n    model = SINDy()\n    model.fit(x, dt)\n    model_t_default = SINDy(t_default=dt)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_differentiate_returns_compatible_data_type",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_differentiate_returns_compatible_data_type(data):\n    x, t = data\n    x_dot = SINDy().differentiate(x)\n    assert isinstance(x_dot, type(x))\n@pytest.mark.parametrize(\n    \"data\", [pytest.lazy_fixture(\"data_1d\"), pytest.lazy_fixture(\"data_lorenz\")]\n)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_predict",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_predict(data, optimizer):\n    x, t = data\n    model = SINDy(optimizer=optimizer)\n    model.fit(x, t)\n    x_dot = model.predict(x)\n    assert x.shape == x_dot.shape\n@pytest.mark.parametrize(\n    \"data\",\n    [\n        pytest.lazy_fixture(\"data_1d\"),",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_simulate",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_simulate(data):\n    x, t = data\n    model = SINDy(feature_library=PolynomialLibrary(degree=1))\n    model.fit(x, t)\n    x1 = model.simulate(np.ravel(x[0]), t, integrator_kws={\"rtol\": 0.1})\n    assert len(x1) == len(t)\n    x1 = model.simulate(\n        np.ravel(x[0]), t, integrator=\"odeint\", integrator_kws={\"rtol\": 0.1}\n    )\n    assert len(x1) == len(t)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_libraries",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_libraries(data_lorenz, library):\n    x, t = data_lorenz\n    model = SINDy(feature_library=library)\n    model.fit(x, t)\n    s = model.score(x, t)\n    assert s <= 1\ndef test_integration_smoothed_finite_difference(data_lorenz):\n    x, t = data_lorenz\n    model = SINDy(differentiation_method=SmoothedFiniteDifference())\n    model.fit(x, t=t)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_integration_smoothed_finite_difference",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_integration_smoothed_finite_difference(data_lorenz):\n    x, t = data_lorenz\n    model = SINDy(differentiation_method=SmoothedFiniteDifference())\n    model.fit(x, t=t)\n    check_is_fitted(model)\n@pytest.mark.parametrize(\n    \"derivative_kws\",\n    [\n        dict(kind=\"finite_difference\", k=1),\n        dict(kind=\"spectral\"),",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_integration_derivative_methods",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_integration_derivative_methods(data_lorenz, derivative_kws):\n    x, t = data_lorenz\n    model = SINDy(differentiation_method=SINDyDerivative(**derivative_kws))\n    model.fit(x, t=t)\n    check_is_fitted(model)\n@pytest.mark.parametrize(\n    \"data\",\n    [\n        pytest.lazy_fixture(\"data_1d\"),\n        pytest.lazy_fixture(\"data_lorenz\"),",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_score",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_score(data):\n    x, t = data\n    model = SINDy()\n    model.fit(x, t)\n    assert model.score(x) <= 1\n    assert model.score(x, t) <= 1\n    assert model.score(x, x_dot=x) <= 1\n    assert model.score(x, t, x_dot=x) <= 1\ndef test_score_pde(data_1d_random_pde):\n    t, x, u, u_dot = data_1d_random_pde",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_score_pde",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_score_pde(data_1d_random_pde):\n    t, x, u, u_dot = data_1d_random_pde\n    pde_lib = PDELibrary(\n        function_library=PolynomialLibrary(degree=2, include_bias=False),\n        derivative_order=4,\n        spatial_grid=x,\n        include_bias=True,\n    )\n    model = SINDy(feature_library=pde_lib).fit(\n        u,",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_fit_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_fit_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    model = SINDy()\n    model.fit(x)\n    check_is_fitted(model)\n    model.fit(x, t=t)\n    assert model.score(x, t=t) > 0.8\n    model = SINDy()\n    model.fit(x, x_dot=x)\n    check_is_fitted(model)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_predict_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_predict_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    model = SINDy()\n    model.fit(x, t=t)\n    p = model.predict(x)\n    assert len(p) == len(x)\ndef test_score_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    model = SINDy()\n    model.fit(x, t=t)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_score_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_score_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    model = SINDy()\n    model.fit(x, t=t)\n    s = model.score(x)\n    assert s <= 1\n    s = model.score(x, t=t)\n    assert s <= 1\n    s = model.score(x, x_dot=x)\n    assert s <= 1",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_fit_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_fit_discrete_time(data_discrete_time):\n    x = data_discrete_time\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    check_is_fitted(model)\n    model = SINDy(discrete_time=True)\n    model.fit(x[:-1], x_dot=x[1:])\n    check_is_fitted(model)\ndef test_simulate_discrete_time(data_discrete_time):\n    x = data_discrete_time",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_simulate_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_simulate_discrete_time(data_discrete_time):\n    x = data_discrete_time\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    n_steps = x.shape[0]\n    x1 = model.simulate(x[0], n_steps)\n    assert len(x1) == n_steps\n    def stop_func(xi):\n        # check if we are at the 2nd to last element\n        return np.isclose(xi[0], 0.874363)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_predict_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_predict_discrete_time(data_discrete_time):\n    x = data_discrete_time\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    assert len(model.predict(x)) == len(x)\ndef test_score_discrete_time(data_discrete_time):\n    x = data_discrete_time\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    assert model.score(x) > 0.75",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_score_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_score_discrete_time(data_discrete_time):\n    x = data_discrete_time\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    assert model.score(x) > 0.75\n    assert model.score(x, x_dot=x) < 1\ndef test_bad_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    with pytest.raises(TypeError):\n        pysindy._check_multiple_trajectories(x, x_dot=x[0], u=None)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_bad_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_bad_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    with pytest.raises(TypeError):\n        pysindy._check_multiple_trajectories(x, x_dot=x[0], u=None)\n    with pytest.raises(ValueError):\n        pysindy._check_multiple_trajectories(x, x_dot=x[:-1], u=None)\ndef test_fit_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories,\n):\n    x = data_discrete_time_multiple_trajectories",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_fit_discrete_time_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_fit_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories,\n):\n    x = data_discrete_time_multiple_trajectories\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    check_is_fitted(model)\n    model = SINDy(discrete_time=True)\n    model.fit(x, x_dot=x)\n    check_is_fitted(model)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_predict_discrete_time_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_predict_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories,\n):\n    x = data_discrete_time_multiple_trajectories\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    y = model.predict(x)\n    assert len(y) == len(x)\ndef test_score_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories,",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_score_discrete_time_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_score_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories,\n):\n    x = data_discrete_time_multiple_trajectories\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    s = model.score(x)\n    assert s > 0.75\n    # x is not its own derivative, so we expect bad performance here\n    s = model.score(x, x_dot=x)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_equations",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_equations(data, capsys):\n    x, t = data\n    model = SINDy()\n    model.fit(x, t)\n    out, _ = capsys.readouterr()\n    assert len(out) == 0\n    model.print(precision=2)\n    out, _ = capsys.readouterr()\n    assert len(out) > 0\n    assert \"(x0)' = \" in out",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_print_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_print_discrete_time(data_discrete_time, capsys):\n    x = data_discrete_time\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    model.print()\n    out, _ = capsys.readouterr()\n    assert len(out) > 0\n    assert \"(x0)[k+1] = \" in out\ndef test_differentiate(data_lorenz, data_multiple_trajectories):\n    x, t = data_lorenz",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_differentiate",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_differentiate(data_lorenz, data_multiple_trajectories):\n    x, t = data_lorenz\n    model = SINDy()\n    model.differentiate(x, t)\n    x, t = data_multiple_trajectories\n    model.differentiate(x, t)\n    model = SINDy(discrete_time=True)\n    with pytest.raises(RuntimeError):\n        model.differentiate(x)\ndef test_coefficients_equals_complexity(data_lorenz):",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_coefficients_equals_complexity",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_coefficients_equals_complexity(data_lorenz):\n    x, t = data_lorenz\n    model = SINDy()\n    model.fit(x, t)\n    c = model.coefficients()\n    assert model.complexity == np.count_nonzero(c)\n    assert model.complexity < 30\ndef test_simulate_errors(data_lorenz):\n    x, t = data_lorenz\n    model = SINDy()",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_simulate_errors",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_simulate_errors(data_lorenz):\n    x, t = data_lorenz\n    model = SINDy()\n    model.fit(x, t)\n    with pytest.raises(ValueError):\n        model.simulate(x[0], t=1)\n    model = SINDy(discrete_time=True)\n    with pytest.raises(ValueError):\n        model.simulate(x[0], t=[1, 2])\n    model = SINDy(discrete_time=True)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_fit_warn",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_fit_warn(data_lorenz, params, warning):\n    x, t = data_lorenz\n    model = SINDy(optimizer=STLSQ(**params))\n    with pytest.warns(warning):\n        model.fit(x, t=t)\ndef test_cross_validation(data_lorenz):\n    x, t = data_lorenz\n    dt = t[1] - t[0]\n    model = SINDy(\n        t_default=dt, differentiation_method=SINDyDerivative(kind=\"spline\", s=1e-2)",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_cross_validation",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_cross_validation(data_lorenz):\n    x, t = data_lorenz\n    dt = t[1] - t[0]\n    model = SINDy(\n        t_default=dt, differentiation_method=SINDyDerivative(kind=\"spline\", s=1e-2)\n    )\n    param_grid = {\n        \"optimizer__threshold\": [0.01, 0.1],\n        \"differentiation_method__kwargs\": [\n            {\"kind\": \"spline\", \"s\": 1e-2},",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_linear_constraints",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_linear_constraints(data_lorenz):\n    x, t = data_lorenz\n    library = PolynomialLibrary().fit(x)\n    constraint_rhs = np.ones(2)\n    constraint_lhs = np.zeros((2, x.shape[1] * library.n_output_features_))\n    target_1, target_2 = 1, 3\n    constraint_lhs[0, 3] = target_1\n    constraint_lhs[1, library.n_output_features_] = target_2\n    optimizer = ConstrainedSR3(\n        constraint_lhs=constraint_lhs, constraint_rhs=constraint_rhs",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_data_shapes",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_data_shapes():\n    model = SINDy()\n    n = 10\n    x = np.ones(n)\n    model.fit(x)\n    x = np.ones((n, 2))\n    model.fit(x)\n    x = np.ones((n, n, 2))\n    model.fit(x)\n    x = np.ones((n, n, n, 2))",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_diffusion_pde",
        "kind": 2,
        "importPath": "pysindy.test.test_pysindy",
        "description": "pysindy.test.test_pysindy",
        "peekOfCode": "def test_diffusion_pde(diffuse_multiple_trajectories):\n    t, x, u = diffuse_multiple_trajectories\n    pde_lib = PDELibrary(\n        function_library=PolynomialLibrary(degree=1, include_bias=False),\n        derivative_order=2,\n        spatial_grid=x,\n    )\n    X, T = np.meshgrid(x, t, indexing=\"ij\")\n    XT = np.transpose([X, T], [1, 2, 0])\n    weak_lib = WeakPDELibrary(",
        "detail": "pysindy.test.test_pysindy",
        "documentation": {}
    },
    {
        "label": "test_estimator_has_model",
        "kind": 2,
        "importPath": "pysindy.test.test_scikit_time",
        "description": "pysindy.test.test_scikit_time",
        "peekOfCode": "def test_estimator_has_model(data_lorenz):\n    x, t = data_lorenz\n    estimator = SINDyEstimator()\n    assert not estimator.has_model\n    estimator.fit(x, t=t)\n    assert estimator.has_model\ndef test_estimator_fetch_model(data_lorenz):\n    x, t = data_lorenz\n    estimator = SINDyEstimator()\n    assert estimator.fetch_model() is None",
        "detail": "pysindy.test.test_scikit_time",
        "documentation": {}
    },
    {
        "label": "test_estimator_fetch_model",
        "kind": 2,
        "importPath": "pysindy.test.test_scikit_time",
        "description": "pysindy.test.test_scikit_time",
        "peekOfCode": "def test_estimator_fetch_model(data_lorenz):\n    x, t = data_lorenz\n    estimator = SINDyEstimator()\n    assert estimator.fetch_model() is None\n    estimator.fit(x, t=t)\n    assert isinstance(estimator.fetch_model(), SINDyModel)\ndef test_model_sindy_equivalence(data_lorenz_c_1d):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDyEstimator().fit(x, t=t, u=u).fetch_model()\n    sindy_model = SINDy().fit(x, t=t, u=u)",
        "detail": "pysindy.test.test_scikit_time",
        "documentation": {}
    },
    {
        "label": "test_model_sindy_equivalence",
        "kind": 2,
        "importPath": "pysindy.test.test_scikit_time",
        "description": "pysindy.test.test_scikit_time",
        "peekOfCode": "def test_model_sindy_equivalence(data_lorenz_c_1d):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDyEstimator().fit(x, t=t, u=u).fetch_model()\n    sindy_model = SINDy().fit(x, t=t, u=u)\n    assert_allclose(model.coefficients(), sindy_model.coefficients())\n    print(sindy_model.n_features_in_)\n    assert model.n_features_in_ == sindy_model.n_features_in_\n    assert model.n_output_features_ == sindy_model.n_output_features_\n    assert model.n_control_features_ == sindy_model.n_control_features_\ndef test_model_has_sindy_methods(data_lorenz):",
        "detail": "pysindy.test.test_scikit_time",
        "documentation": {}
    },
    {
        "label": "test_model_has_sindy_methods",
        "kind": 2,
        "importPath": "pysindy.test.test_scikit_time",
        "description": "pysindy.test.test_scikit_time",
        "peekOfCode": "def test_model_has_sindy_methods(data_lorenz):\n    x, t = data_lorenz\n    model = SINDyEstimator().fit(x, t=t).fetch_model()\n    assert hasattr(model, \"predict\")\n    assert hasattr(model, \"simulate\")\n    assert hasattr(model, \"score\")\n    assert hasattr(model, \"print\")\n    assert hasattr(model, \"equations\")\ndef test_model_unfitted_library(data_derivative_2d):\n    x, x_dot = data_derivative_2d",
        "detail": "pysindy.test.test_scikit_time",
        "documentation": {}
    },
    {
        "label": "test_model_unfitted_library",
        "kind": 2,
        "importPath": "pysindy.test.test_scikit_time",
        "description": "pysindy.test.test_scikit_time",
        "peekOfCode": "def test_model_unfitted_library(data_derivative_2d):\n    x, x_dot = data_derivative_2d\n    optimizer = STLSQ().fit(x, x_dot)\n    library = FourierLibrary()\n    with pytest.raises(NotFittedError):\n        SINDyModel(optimizer, library)\ndef test_model_unfitted_optimizer(data_lorenz):\n    x, t = data_lorenz\n    optimizer = STLSQ()\n    library = FourierLibrary().fit(x)",
        "detail": "pysindy.test.test_scikit_time",
        "documentation": {}
    },
    {
        "label": "test_model_unfitted_optimizer",
        "kind": 2,
        "importPath": "pysindy.test.test_scikit_time",
        "description": "pysindy.test.test_scikit_time",
        "peekOfCode": "def test_model_unfitted_optimizer(data_lorenz):\n    x, t = data_lorenz\n    optimizer = STLSQ()\n    library = FourierLibrary().fit(x)\n    with pytest.raises(NotFittedError):\n        SINDyModel(optimizer, library)\ndef test_model_copy(data_lorenz):\n    x, t = data_lorenz\n    model = SINDyEstimator().fit(x, t=t).fetch_model()\n    model_copy = model.copy()",
        "detail": "pysindy.test.test_scikit_time",
        "documentation": {}
    },
    {
        "label": "test_model_copy",
        "kind": 2,
        "importPath": "pysindy.test.test_scikit_time",
        "description": "pysindy.test.test_scikit_time",
        "peekOfCode": "def test_model_copy(data_lorenz):\n    x, t = data_lorenz\n    model = SINDyEstimator().fit(x, t=t).fetch_model()\n    model_copy = model.copy()\n    assert model is not model_copy",
        "detail": "pysindy.test.test_scikit_time",
        "documentation": {}
    },
    {
        "label": "test_get_feature_names_len",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_get_feature_names_len(data_lorenz_c_1d):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    # Assumes default library is polynomial features of degree 2\n    assert len(model.get_feature_names()) == 21\ndef test_not_fitted(data_lorenz_c_1d):\n    x, t, u, u_fun = data_lorenz_c_1d\n    model = SINDy()\n    with pytest.raises(NotFittedError):",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_not_fitted",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_not_fitted(data_lorenz_c_1d):\n    x, t, u, u_fun = data_lorenz_c_1d\n    model = SINDy()\n    with pytest.raises(NotFittedError):\n        model.predict(x, u=u)\n    with pytest.raises(NotFittedError):\n        model.simulate(x[0], t=t, u=u_fun, integrator_kws={\"rtol\": 0.1})\ndef test_improper_shape_input(data_1d):\n    x, t = data_1d\n    u = np.ones_like(x)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_improper_shape_input",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_improper_shape_input(data_1d):\n    x, t = data_1d\n    u = np.ones_like(x)\n    # Ensure model successfully handles different data shapes\n    model = SINDy()\n    model.fit(x.flatten(), u=u, t=t)\n    check_is_fitted(model)\n    model = SINDy()\n    model.fit(x.flatten(), u=u, t=t, x_dot=x.flatten())\n    check_is_fitted(model)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_mixed_inputs",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_mixed_inputs(data):\n    x, t, u, _ = data\n    # Scalar t\n    model = SINDy()\n    model.fit(x, u=u, t=2)\n    check_is_fitted(model)\n    # x_dot is passed in\n    model = SINDy()\n    model.fit(x, u=u, x_dot=x)\n    check_is_fitted(model)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_bad_control_input",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_bad_control_input(data_lorenz_c_1d):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDy()\n    with pytest.raises(TypeError):\n        model.fit(x, u=set(u), t=t)\n@pytest.mark.parametrize(\n    \"data\",\n    [pytest.lazy_fixture(\"data_lorenz_c_1d\"), pytest.lazy_fixture(\"data_lorenz_c_2d\")],\n)\ndef test_bad_t(data):",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_bad_t",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_bad_t(data):\n    x, t, u, _ = data\n    model = SINDy()\n    # Wrong type\n    with pytest.raises(ValueError):\n        model.fit(x, u=u, t=\"1\")\n    # Invalid value of t\n    with pytest.raises(ValueError):\n        model.fit(x, u=u, t=-1)\n    # t is a list",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_t_default",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_t_default(data):\n    x, t, u, _ = data\n    dt = t[1] - t[0]\n    model = SINDy()\n    model.fit(x, u=u, t=dt)\n    model_t_default = SINDy(t_default=dt)\n    model_t_default.fit(x, u=u)\n    np.testing.assert_allclose(model.coefficients(), model_t_default.coefficients())\n    np.testing.assert_almost_equal(\n        model.score(x, u=u, t=dt), model_t_default.score(x, u=u)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_predict",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_predict(data, optimizer):\n    x, t, u, _ = data\n    model = SINDy(optimizer=optimizer)\n    model.fit(x, u=u, t=t)\n    x_dot = model.predict(x, u=u)\n    assert x.shape == x_dot.shape\n@pytest.mark.parametrize(\n    \"data\",\n    [pytest.lazy_fixture(\"data_lorenz_c_1d\"), pytest.lazy_fixture(\"data_lorenz_c_2d\")],\n)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_simulate",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_simulate(data):\n    x, t, u, u_fun = data\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    x1 = model.simulate(x[0], t=t, u=u_fun, integrator_kws={\"rtol\": 0.1})\n    assert len(x1) == len(t)\n@pytest.mark.parametrize(\n    \"data\",\n    [pytest.lazy_fixture(\"data_lorenz_c_1d\"), pytest.lazy_fixture(\"data_lorenz_c_2d\")],\n)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_simulate_with_interp",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_simulate_with_interp(data):\n    x, t, u, _ = data\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    u_fun = interp1d(t, u, axis=0)\n    x1 = model.simulate(x[0], t=t, u=u_fun, integrator_kws={\"rtol\": 0.1})\n    assert len(x1) == len(t)\n@pytest.mark.parametrize(\n    \"data\",\n    [pytest.lazy_fixture(\"data_lorenz_c_1d\"), pytest.lazy_fixture(\"data_lorenz_c_2d\")],",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_simulate_with_vector_control_input",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_simulate_with_vector_control_input(data):\n    x, t, u, _ = data\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    x1 = model.simulate(x[0], t=t, u=u, integrator_kws={\"rtol\": 0.1})\n    assert len(x1) == len(t) - 1\n@pytest.mark.parametrize(\n    \"data\",\n    [pytest.lazy_fixture(\"data_lorenz_c_1d\"), pytest.lazy_fixture(\"data_lorenz_c_2d\")],\n)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_score",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_score(data):\n    x, t, u, _ = data\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    assert model.score(x, u=u) <= 1\n    assert model.score(x, u=u, t=t) <= 1\n    assert model.score(x, u=u, x_dot=x) <= 1\n    assert model.score(x, u=u, t=t, x_dot=x) <= 1\ndef test_fit_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_fit_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_fit_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    u = [np.ones((xi.shape[0], 2)) for xi in x]\n    model = SINDy()\n    model.fit(x, u=u)\n    check_is_fitted(model)\n    model.fit(x, u=u, t=t)\n    assert model.score(x, u=u, t=t) > 0.8\n    model = SINDy()\n    model.fit(x, u=u, x_dot=x)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_predict_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_predict_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    u = [np.ones((xi.shape[0], 2)) for xi in x]\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    p = model.predict(x, u=u)\n    assert len(p) == len(x)\ndef test_score_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    u = [np.ones((xi.shape[0], 2)) for xi in x]",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_score_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_score_multiple_trajectories(data_multiple_trajectories):\n    x, t = data_multiple_trajectories\n    u = [np.ones((xi.shape[0], 2)) for xi in x]\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    s = model.score(x, u=u)\n    assert s <= 1\n    s = model.score(x, u=u, t=t)\n    assert s <= 1\n    s = model.score(x, u=u, x_dot=x)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_fit_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_fit_discrete_time(data):\n    x, u = data\n    model = SINDy(discrete_time=True)\n    model.fit(x, u=u)\n    check_is_fitted(model)\n    model = SINDy(discrete_time=True)\n    model.fit(x[:-1], u=u[:-1], x_dot=x[1:])\n    check_is_fitted(model)\n@pytest.mark.parametrize(\n    \"data\",",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_simulate_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_simulate_discrete_time(data):\n    x, u = data\n    model = SINDy(discrete_time=True)\n    model.fit(x, u=u)\n    n_steps = x.shape[0]\n    x1 = model.simulate(x[0], t=n_steps, u=u)\n    assert len(x1) == n_steps\n    # TODO: implement test using the stop_condition option\n@pytest.mark.parametrize(\n    \"data\",",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_predict_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_predict_discrete_time(data):\n    x, u = data\n    model = SINDy(discrete_time=True)\n    print(x, u)\n    model.fit(x, u=u)\n    assert len(model.predict(x, u=u)) == len(x)\n@pytest.mark.parametrize(\n    \"data\",\n    [\n        pytest.lazy_fixture(\"data_discrete_time_c\"),",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_score_discrete_time",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_score_discrete_time(data):\n    x, u = data\n    model = SINDy(discrete_time=True)\n    model.fit(x, u=u)\n    assert model.score(x, u=u) > 0.75\n    assert model.score(x, u=u, x_dot=x) < 1\ndef test_fit_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories_c,\n):\n    x, u = data_discrete_time_multiple_trajectories_c",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_fit_discrete_time_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_fit_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories_c,\n):\n    x, u = data_discrete_time_multiple_trajectories_c\n    model = SINDy(discrete_time=True)\n    model.fit(x, u=u)\n    check_is_fitted(model)\n    model = SINDy(discrete_time=True)\n    model.fit(x, u=u, x_dot=x)\n    check_is_fitted(model)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_predict_discrete_time_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_predict_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories_c,\n):\n    x, u = data_discrete_time_multiple_trajectories_c\n    model = SINDy(discrete_time=True)\n    model.fit(x, u=u)\n    y = model.predict(x, u=u)\n    assert len(y) == len(x)\ndef test_score_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories_c,",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_score_discrete_time_multiple_trajectories",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_score_discrete_time_multiple_trajectories(\n    data_discrete_time_multiple_trajectories_c,\n):\n    x, u = data_discrete_time_multiple_trajectories_c\n    model = SINDy(discrete_time=True)\n    model.fit(x, u=u)\n    s = model.score(x, u=u)\n    assert s > 0.75\n    # x is not its own derivative, so we expect bad performance here\n    s = model.score(x, u=u, x_dot=x)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_simulate_errors",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_simulate_errors(data_lorenz_c_1d):\n    x, t, u, u_fun = data_lorenz_c_1d\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    with pytest.raises(ValueError):\n        model.simulate(x[0], t=1, u=u)\n    model = SINDy(discrete_time=True)\n    with pytest.raises(ValueError):\n        model.simulate(x[0], t=[1, 2], u=u)\n@pytest.mark.parametrize(",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_fit_warn",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_fit_warn(data_lorenz_c_1d, params, warning):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDy(optimizer=STLSQ(**params))\n    with pytest.warns(warning):\n        model.fit(x, u=u, t=t)\ndef test_u_omitted(data_lorenz_c_1d):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    with pytest.raises(TypeError):",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_u_omitted",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_u_omitted(data_lorenz_c_1d):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDy()\n    model.fit(x, u=u, t=t)\n    with pytest.raises(TypeError):\n        model.predict(x)\n    with pytest.raises(TypeError):\n        model.score(x)\n    with pytest.raises(TypeError):\n        model.simulate(x[0], t=t)",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_extra_u_warn",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_extra_u_warn(data_lorenz_c_1d):\n    x, t, u, _ = data_lorenz_c_1d\n    model = SINDy()\n    model.fit(x, t=t)\n    with pytest.warns(UserWarning):\n        model.predict(x, u=u)\n    with pytest.warns(UserWarning):\n        model.score(x, u=u)\n    with pytest.warns(UserWarning):\n        model.simulate(x[0], t=t, u=u, integrator_kws={\"rtol\": 0.1})",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    },
    {
        "label": "test_extra_u_warn_discrete",
        "kind": 2,
        "importPath": "pysindy.test.test_sindyc",
        "description": "pysindy.test.test_sindyc",
        "peekOfCode": "def test_extra_u_warn_discrete(data_discrete_time_c):\n    x, u = data_discrete_time_c\n    model = SINDy(discrete_time=True)\n    model.fit(x)\n    with pytest.warns(UserWarning):\n        model.predict(x, u=u)\n    with pytest.warns(UserWarning):\n        model.score(x, u=u)\n    with pytest.warns(UserWarning):\n        model.simulate(x[0], u=u, t=10, integrator_kws={\"rtol\": 0.1})",
        "detail": "pysindy.test.test_sindyc",
        "documentation": {}
    }
]